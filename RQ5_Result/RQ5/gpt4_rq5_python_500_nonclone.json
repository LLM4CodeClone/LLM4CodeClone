[
 {
  "f1": "import math\n\nn,d = map(int,input().split())\nl = []\n\nfor i in range(n):\narray = list(map(int,input().split()))\nl.append(array)\n\ndef dist(a,b):\ncnt = 0\nfor i in range(len(a)):\ncnt += (a[i]-b[i])**2\nreturn math.sqrt(cnt)\n\nans = 0\n\nfor i in range(n):\nfor j in range(i+1,n):\nif dist(l[i],l[j])%1 == 0:\nans+=1\nprint(ans)",
  "f2": "from fractions import gcd\n\nn, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\nif max(a) < k:\nprint(\"IMPOSSIBLE\")\nexit()\nx = a[0]\nfor i in range(1,n):\nx = gcd(x, a[i])\n\nfor i in range(n):\nif (a[i] - k) % x == 0:\nprint(\"POSSIBLE\")\nexit()\n\nprint(\"IMPOSSIBLE\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02982/s166776166.py",
  "f2_idx": "./Project_CodeNet_Python800/p03651/s784767584.py",
  "response": "No"
 },
 {
  "f1": "def resolve():\nS = input()\nfor i, c in enumerate(list(S)):\nif i%2==0:\nif c == \"L\":\nprint(\"No\")\nreturn\nelse:\nif c == \"R\":\nprint(\"No\")\nreturn\nprint(\"Yes\")\n\nif '__main__' == __name__:\nresolve()",
  "f2": "a = list(map(int,input().split()))\nprint(abs(max(a)-min(a)))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02910/s066040230.py",
  "f2_idx": "./Project_CodeNet_Python800/p03292/s895399886.py",
  "response": "No"
 },
 {
  "f1": "n,m = map(int, input().split())\na=[]\nc=[]\nfor i in range(m):\ntmp,_=map(int, input().split())\na.append(tmp)\ntmp=list(map(int, input().split()))\nbit = 0\nfor b in tmp:\nbit+=(1<<(b-1))\nc.append(bit)\n\ndp = [[10**9 for i in range(2**n)] for j in range(m+1)]\ndp[0][0]=0\n\nfor i in range(m):\ncst = a[i]\nkey=c[i]\nfor s in range(2**n):\ndp[i+1][s] = min(dp[i+1][s], dp[i][s])\ndp[i+1][s|key] = min(dp[i+1][s|key], dp[i][s]+cst)\n\nans=dp[-1][-1]\nif ans ==10**9:\nprint(-1)\nelse:\nprint(ans)",
  "f2": "n=int(input())\na=list(map(int,input().split()))\n\nodd,even=a[::2],a[1::2]\n\nif n%2==0:\nans=even[::-1]+odd\nelse:\nans=odd[::-1]+even\n\nprint(*ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02901/s295871164.py",
  "f2_idx": "./Project_CodeNet_Python800/p03673/s379246078.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\n\nj, b = 0, 0\nfor _ in range(n):\nx, y = input().split()\nx = float(x)\nif y == 'JPY':\nj += x\nelse:\nb += x\nprint(j + b*380000)",
  "f2": "N = int(input())\nW = list(map(int,input().split()))\n\nans = 10**7\n\nfor i in range(N-1):\nS1 = W[0:i+1]\nS2 = W[i+1:]\nans = min(ans,abs(sum(S2)-sum(S1)))\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03110/s287808807.py",
  "f2_idx": "./Project_CodeNet_Python800/p03012/s571123274.py",
  "response": "No"
 },
 {
  "f1": "# Begin Header {{{\nfrom math import gcd\nfrom collections import Counter, deque, defaultdict\nfrom heapq import heappush, heappop, heappushpop, heapify, heapreplace, merge\nfrom bisect import bisect_left, bisect_right, bisect, insort_left, insort_right, insort\nfrom itertools import accumulate, product, permutations, combinations, combinations_with_replacement\n# }}} End Header\n# _________コーディングはここから！！___________\nn = int(input())\nl = list(map(int, input().split()))\nl.sort()\nans = 0\nfor x in combinations(l, 3):\nif x[0]!=x[1] and x[0]!=x[2] and x[1]!=x[2]:\nif x[0] + x[1] > x[2]:\nans+=1\nprint(ans)",
  "f2": "from bisect import bisect_right\n\nN = int(input())\nnum = [i for i in range(1, N)]\ncnt = 0\nfor a in range(1, N):\nn = (N - 1) // a\nb = bisect_right(num, n)\ncnt += b\n\nprint(cnt)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02583/s467137659.py",
  "f2_idx": "./Project_CodeNet_Python800/p02548/s823696459.py",
  "response": "No"
 },
 {
  "f1": "N, Ma, Mb = map(int, input().split())\ndp = [[[10**18]*401 for _ in range(401)] for _ in range(N+1)]\ndp[0][0][0] = 0\n\nfor i in range(N):\na, b, c = map(int, input().split())\n\nfor j in range(401):\nfor k in range(401):\ndp[i+1][j][k] = min(dp[i+1][j][k], dp[i][j][k])\n\nif j+a<=400 and k+b<=400:\ndp[i+1][j+a][k+b] = min(dp[i+1][j+a][k+b], dp[i][j][k]+c)\n\nans = 10**18\n\nfor i in range(401):\nfor j in range(401):\nif i>0 and j>0 and i*Mb==j*Ma:\nans = min(ans, dp[N][i][j])\n\nif ans==10**18:\nprint(-1)\nelse:\nprint(ans)",
  "f2": "\nn = int(input())\nv = list(map(int, input().split()))\n\nkisu = [0]*(10**6)\ngusu = [0]*(10**6)\nfor i in range(n):\nif i % 2 == 0:\ngusu[v[i]] += 1\nelse:\nkisu[v[i]] += 1\n\ncount = 0\ngusu_m = gusu.index(max(gusu))\nkisu_m = kisu.index(max(kisu))\n\nif gusu_m == kisu_m:\n\ngusu[gusu_m] = 0\nkisu[kisu_m] = 0\nif max(gusu) > max(kisu):\ngusu_m = gusu.index(max(gusu))\nelse:\nkisu_m = kisu.index(max(kisu))\n\nfor i in range(n):\nif i % 2 == 0 and gusu_m != v[i]:\ncount += 1\nif i % 2 != 0 and kisu_m != v[i]:\ncount += 1\n\nprint(count)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03806/s091968365.py",
  "f2_idx": "./Project_CodeNet_Python800/p03244/s551706295.py",
  "response": "No"
 },
 {
  "f1": "from collections import defaultdict\n\nN=int(input())\nC=[int(input()) for _ in range(N)]\n\nd = defaultdict(int)\n\nans=1\nfor i,c in enumerate(C):\nif i>=1 and C[i-1]==C[i]:\ncontinue\nelse:\nans+=d[c]\nd[c]=ans\n\nans%=10**9+7\nd[c]%=10**9+7\nprint(ans)",
  "f2": "n=int(input())\nl = list(map(int,input().split()))\nmax=0\na=0\nfor i in range(n-1):\nif l[i+1]<=l[i]:\na+=1\nif a>=max:\nmax=a\nelif l[i+1]>l[i]:\nif a>=max:\nmax=a\na=0\nprint(max)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03096/s871071359.py",
  "f2_idx": "./Project_CodeNet_Python800/p02923/s778620196.py",
  "response": "No"
 },
 {
  "f1": "N,A,B = map(int,input().split())\nS = input()\nSS = list(S)\nCA = 0\nCB = 0\nfor i in range(len(SS)):\nif SS[i] =='a':\nif CA < A+B:\nCA +=1\nprint('Yes')\nelse:\nprint('No')\nelif SS[i] == 'b':\nCB += 1\nif CA < A+B and CB <= B :\nCA +=1\nprint('Yes')\nelse:\nprint('No')\nelse:\nprint('No')",
  "f2": "import sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**7)\ndef input():\nreturn sys.stdin.readline()[:-1]\n\nmod = 10**9 + 7\n\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\ndef Line(N):\nread_all = [tuple(map(int, input().split())) for _ in range(N)]\nreturn map(list,zip(*read_all))\n\n#################\n\nclass UF(object):\ndef __init__(self, n=1):\nself.par = [i for i in range(n)]\nself.rank = [0 for _ in range(n)]\nself.size = [1 for _ in range(n)]\n\ndef find(self, x):\n'''\nx が属するグループを探索\n'''\nif self.par[x] == x:\nreturn x\nelse:\nself.par[x] = self.find(self.par[x])\nreturn self.par[x]\n\ndef union(self, x, y):\n'''\nx と y のグループを結合\n'''\nx = self.find(x)\ny = self.find(y)\nif x != y:\nif self.rank[x] < self.rank[y]:\nx, y = y, x\nif self.rank[x] == self.rank[y]:\nself.rank[x] += 1\nself.par[y] = x\nself.size[x] += self.size[y]\n\ndef is_same(self, x, y):\n'''\nx と y が同じグループか否か\n'''\nreturn self.find(x) == self.find(y)\n\ndef get_size(self, x):\n'''\nx が属するグループの要素数\n'''\nx = self.find(x)\nreturn self.size[x]\n\nN,M = II()\np = III()\np = list(map(lambda x:x-1, p))\nx,y = Line(M)\n\nplace = [0]*N\nfor i in range(N):\nplace[p[i]] = i\n\nuf = UF(N)\nfor i in range(M):\nuf.union(x[i]-1, y[i]-1)\n\nans = 0\nfor i in range(N):\nif uf.is_same(i,place[i]):\nans += 1\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03971/s288827500.py",
  "f2_idx": "./Project_CodeNet_Python800/p03354/s939631704.py",
  "response": "No"
 },
 {
  "f1": "N,K = map(int, input().split())\nH = list(map(int, input().split()))\n\ndp = [0] * N\n\nfor n in range(1, N):\ndp[n] = min(dp[k] + abs(H[n] - H[k]) for k in range(max(0, n-K), n))\n\nprint(dp[-1])",
  "f2": "N = int(input())\nA = set([])\nfor _ in range(N):\nA.add(input())\nprint(len(A))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03161/s594270930.py",
  "f2_idx": "./Project_CodeNet_Python800/p02701/s866685991.py",
  "response": "No"
 },
 {
  "f1": "def main():\nN = int(input())\ns = input()\nt = input()\n\nfor i in range(N):\nif s[i:] == t[:N-i]:\nprint(2*N-(N-i))\nreturn\nprint(N*2)\n\nmain()",
  "f2": "n = int(input())\na = [int(x) for x in input().split()]\n\nmi = 10 ** 7\nma = -(10 ** 7)\nmi_idx = 0\nma_idx = 0\nfor i,v in enumerate(a):\nif v < mi:\nmi = v\nmi_idx = i\nif v > ma:\nma = v\nma_idx = i\n\nprint(2 * n - 1)\nif abs(ma) >= abs(mi):\nfor i in range(1, len(a) + 1):\nprint(ma_idx + 1, i)\nfor i in range(1, len(a)):\nprint(i, i + 1)\nelse:\nfor i in range(1, len(a) + 1):\nprint(mi_idx + 1, i)\nfor i in range(len(a), 1, -1):\nprint(i, i - 1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03951/s287975423.py",
  "f2_idx": "./Project_CodeNet_Python800/p03496/s419159862.py",
  "response": "No"
 },
 {
  "f1": "a,b=map(int, input().split())\nif a<b:print(\"a < b\")\nelif a>b:print(\"a > b\")\nelse: print(\"a == b\")",
  "f2": "A, op, B = input().split()\nif op == '+':\nans = int(A) + int(B)\nelse:\nans = int(A) - int(B)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02391/s551904351.py",
  "f2_idx": "./Project_CodeNet_Python800/p03844/s300099817.py",
  "response": "No"
 },
 {
  "f1": "n,a,b = map(int,input().split())\ntowns = list(map(int,input().split()))\n\nfatigue = 0\nfor i in range(n-1):\nd = towns[i+1] -towns[i]\nfatigue += min(d*a,b)\nprint(fatigue)\n",
  "f2": "r, g, b, n = map(int, input().split())\nans = 0\nfor i in range(n//r+1):\nfor j in range((n-r*i)//g+1):\nif (n-(r*i+g*j))%b == 0:\nans += 1\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03829/s581321193.py",
  "f2_idx": "./Project_CodeNet_Python800/p03048/s230464167.py",
  "response": "No"
 },
 {
  "f1": "#!/usr/bin/env python3\nimport sys\n\nYES = \"Yes\"  # type: str\nNO = \"No\"  # type: str\n\n\ndef solve(S: str):\nif S[2] == S[3] and S[4] == S[5]:\nprint(YES)\nelse:\nprint(NO)\nreturn\n\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\ndef iterate_tokens():\nfor line in sys.stdin:\nfor word in line.split():\nyield word\ntokens = iterate_tokens()\nS = next(tokens)  # type: str\nsolve(S)\n\nif __name__ == '__main__':\nmain()",
  "f2": "S = list(input())\nN = len(S)+1\ncnt = [0] * N\nj = 0\nk = 0\n\nfor i in range(N-2):\nif S[i] == S[i+1]:\nk += 1\n\nelse:\nk += 1\ncnt[j] = k\nj += 1\nk = 0\n\nif S[N-2] == S[N-3]:\ncnt[j] = k + 1\nelse:\ncnt[j] = 1\n\nans = 0\nif S[0] == \"<\":\nst = 0\nelse:\nans += cnt[0]*(cnt[0]+1)//2\nst = 1\n\nfor k in range(st,N,2):\nif cnt[k] != 0:\nm = min(cnt[k],cnt[k+1])\nM = max(cnt[k],cnt[k+1])\nans += m*(m-1)//2 + M*(M+1)//2\nelse:\nbreak\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02723/s087734336.py",
  "f2_idx": "./Project_CodeNet_Python800/p02873/s876933910.py",
  "response": "No"
 },
 {
  "f1": "# coding = SJIS\n\nh, w = map(int, input().split())\nrow = []\n\nfor i in range(h):\nrow.append(str(input()))\n\nfor i in range(h):\nfor j in range(2):\nprint(row[i])",
  "f2": "# https://atcoder.jp/contests/abc126/tasks/abc126_d\n\nimport heapq\nfrom collections import defaultdict\n\nclass Dijkstra:\ndef __init__(self, rote_map, start_point, goal_point=None):\nself.rote_map = rote_map\nself.start_point = start_point\nself.goal_point = goal_point\n\ndef execute(self):\nnum_of_city = len(self.rote_map)\ndist = [float(\"inf\") for _ in range(num_of_city)]\nprev = [float(\"inf\") for _ in range(num_of_city)]\n\ndist[self.start_point] = 0\nheap_q = []\nheapq.heappush(heap_q, (0, self.start_point))\nwhile len(heap_q) > 0:\nprev_cost, src = heapq.heappop(heap_q)\n\nif dist[src] < prev_cost:\ncontinue\n\nfor dest, cost in self.rote_map[src].items():\nif cost != float(\"inf\") and dist[dest] > dist[src] + cost:\ndist[dest] = dist[src] + cost\nheapq.heappush(heap_q, (dist[dest], dest))\nprev[dest] = src\nreturn dist\n\ndef get_path(self, goal, prev):\npath = [goal]\ndest = goal\nwhile prev[dest] != float(\"inf\"):\npath.append(prev[dest])\ndest = prev[dest]\nreturn list(reversed(path))\n\nn = int(input())\nroute_map = [dict() for _ in range(n)]\nfor i in range(n - 1):\nu, v, wi = map(int, input().split())\nu, v = u - 1, v - 1\nroute_map[u][v] = wi\nroute_map[v][u] = wi\n\nd = Dijkstra(route_map, 0).execute()\nfor k in range(n):\nif d[k] % 2 == 0:\nprint(0)\nelse:\nprint(1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03853/s303319466.py",
  "f2_idx": "./Project_CodeNet_Python800/p03044/s845130056.py",
  "response": "No"
 },
 {
  "f1": "from collections import Counter\n\nn = int(input())\na = Counter(map(int, input().split()))\n\ncnt = 0\nfor i in a:\ncnt ^= i\n\nif n % 3 == 0 and all(a[i] % (n // 3) == 0 for i in a):\nprint('Yes' if (cnt == 0 or a[0] == n // 3) else 'No')\nelse:\nprint('Yes' if a[0] == n else 'No')",
  "f2": "import sys\nimport math\nfrom fractions import gcd\n# import queue\n# from collections import Counter\n# from itertools import accumulate\n# from functools import reduce\n\ndef lcm(a, b):\nreturn a * b // gcd(a, b)\n\ndef combination_count(n, r):\nreturn math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\ndef permutations_count(n, r):\nreturn math.factorial(n) // math.factorial(n - r)\n\nbig_prime = 1000000007\n\n\"\"\"\n# 標準入力取得\n## 文字列\n=  sys.stdin.readline().rstrip()\n=  list(sys.stdin.readline().rstrip())\n\n## 数値\n=  int(sys.stdin.readline())\n=  map(int, sys.stdin.readline().split())\n=  list(map(int, sys.stdin.readline().split()))\n=  [list(map(int,list(sys.stdin.readline().split()))) for i in range(N)]\n\"\"\"\n\nA, B =  map(int, sys.stdin.readline().split())\n\nprint(max(A + B, max(A - B, A * B)))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02975/s721762818.py",
  "f2_idx": "./Project_CodeNet_Python800/p03337/s394916944.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\nS = [input() for _ in range(n)]\nm = int(input())\nT = [input() for _ in range(m)]\n\nans = 0\nfor s in S:\nrwd = 0\nfor i in range(n):\nif s == S[i]:\nrwd += 1\nfor i in range(m):\nif s == T[i]:\nrwd -= 1\nans = max(rwd, ans)\nprint(ans)",
  "f2": "N = int(input())\n\nimport math\ndef is_prime(n):\nif n == 1: return False\n\nfor k in range(2, int(math.sqrt(n)) + 1):\nif n % k == 0:\nreturn False\n\nreturn True\n\nfor i in range(N,10**6):\nif is_prime(i):\nprint(i)\nexit(0)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03408/s257599432.py",
  "f2_idx": "./Project_CodeNet_Python800/p02819/s660272687.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\n\n\ndef main():\nS = readline().strip()\nT = readline().strip()\nN, M = len(S), len(T)\n\ndp = [[0] * (M + 1) for _ in range(N + 1)]\nprev = [[0] * (M + 1) for _ in range(N + 1)]\nfor i in range(N):\nfor j in range(M):\nif S[i] == T[j]:\ndp[i + 1][j + 1] = dp[i][j] + 1\nprev[i + 1][j + 1] = (i, j)\nelif dp[i + 1][j] > dp[i][j + 1]:\ndp[i + 1][j + 1] = dp[i + 1][j]\nprev[i + 1][j + 1] = (i + 1, j)\nelse:\ndp[i + 1][j + 1] = dp[i][j + 1]\nprev[i + 1][j + 1] = (i, j + 1)\n\nans = []\ni, j = N, M\nwhile i and j:\np, q = prev[i][j]\nif i > p and j > q:\nans.append(S[p])\ni, j = p, q\n\nprint(''.join(reversed(ans)))\nreturn\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "n = int(input())\ncounter = 0\n\nfor i in range(1, n+1):\ncounter += 1 if len(str(i))%2==1 else 0\n\nprint(counter)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03165/s953536070.py",
  "f2_idx": "./Project_CodeNet_Python800/p02952/s102436237.py",
  "response": "No"
 },
 {
  "f1": "raw_input()\nnum_list = map(int, raw_input().split(\" \"))\nprint \"%d %d %d\" % (min(num_list), max(num_list), sum(num_list))",
  "f2": "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)で最大の2個とりだせるお a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3回\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# pythonで無理なときは、pypyでやると正解するかも！！\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# 四捨五入g\n#\n# インデックス系\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nINF = float('inf')\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\nreturn list(map(int,readline().split()))\ndef readTuples():\nreturn tuple(map(int,readline().split()))\ndef I():\nreturn int(readline())\nn = I()\nA = readInts()\ncum = list(accumulate(A))\nans = 0\nfor i in range(n-1):\nans += A[i] * (cum[n-1]-cum[i])\nans%=mod\nprint(ans%mod)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02402/s375701305.py",
  "f2_idx": "./Project_CodeNet_Python800/p02572/s415632329.py",
  "response": "No"
 },
 {
  "f1": "s = input()\nlen_s = len(s)\ns_array = [int(i) for i in s]\n\nmod = 2019\nmod_array = [0]*mod\n\nnum = 0\nmod_array[0] += 1\nfor i in range(len_s):\nnum = pow(10, i, mod) * s_array[len_s - i - 1] + num\nnum %= mod\nmod_array[num] += 1\n\nans = 0\nfor i in mod_array:\nans += (i * (i - 1)) / 2\n\nprint(int(ans))",
  "f2": "import math\n\nn = int(input())\nf = math.floor(n / 1.08)\nc = math.ceil(n / 1.08)\nfor i in [f, c]:\nif math.floor(i*1.08) == n:\nprint(i)\nexit()\nprint(':(')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02702/s072274623.py",
  "f2_idx": "./Project_CodeNet_Python800/p02842/s177329955.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\n\na = [int(i) for i in input().split()]\n\ncnt = 0\nfor i,v in enumerate(a,1):\nif i%2 != 0 and v%2 != 0:\ncnt += 1\n\nprint(cnt)",
  "f2": "import math\nN, K = map(int,input().split())\nlogs = list(map(int,input().split()))\na = 0\nb = max(logs)\nb_memo = set()\ncount=0\nflg =0\nwhile b-a > 1:\nc = (a+b)//2\ntimes = []\nfor i in logs:\ntimes.append(math.ceil(i/c)-1)\nif sum(times) > K:\na = c\nelse:\nb = c\n\nprint(b)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02607/s381640039.py",
  "f2_idx": "./Project_CodeNet_Python800/p02598/s062209519.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\np = list(map(int, input().split()))\nl = [i for i in range(1,n+1)]\nc = 0\nfor j in range(n):\nif p[j] != l[j]:\nc += 1\nprint(\"YES\" if c == 0 or c == 2 else \"NO\")",
  "f2": "N = int(input())\nS = input().split()\n\nif len(set(S)) == 3:\nprint(\"Three\")\nelse:\nprint(\"Four\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02958/s631192355.py",
  "f2_idx": "./Project_CodeNet_Python800/p03424/s196892484.py",
  "response": "No"
 },
 {
  "f1": "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, copy, functools, random\nfrom collections import deque\nfrom heapq import heappush, heappop\nsys.setrecursionlimit(10 ** 7)\nans = 0\ntmp = 0\ninf = 10 ** 20\nINF = float(\"INF\")\neps = 1.0 / 10 ** 10\nmod = 10 ** 9 + 7\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\nddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\nddn9 = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1), (0, 0)]\n\"\"\"for dx, dy in dd:\nnx = j + dx; ny = i + dy\nif 0 <= nx < w and 0 <= ny < h:\"\"\"\ndef wi(): return list(map(int, sys.stdin.readline().split()))\ndef wip(): return [int(x) - 1 for x in sys.stdin.readline().split()]#WideIntPoint\ndef ws(): return sys.stdin.readline().split()\ndef i(): return int(sys.stdin.readline())\ndef s(): return input()\ndef hi(n): return [i() for _ in range(n)]\ndef hs(n): return [s() for _ in range(n)]#HeightString\ndef mi(n): return [wi() for _ in range(n)]#MatrixInt\ndef mip(n): return [wip() for _ in range(n)]\ndef ms(n): return [ws() for _ in range(n)]\n\nh, w, n = wi()\nc = mip(n)\n\nd = collections.defaultdict(int)\n\nfor i in range(n):\nfor dx, dy in ddn9:\nnx = c[i][1] + dx;\nny = c[i][0] + dy\nif 0 < nx < w - 1 and 0 < ny < h - 1:\nd[str(ny) + \"+\" + str(nx)] += 1#前のままだと，28+1,2+81とかがが被る\n\nansli = [0] * 10\nfor i in d:\nansli[d[i]] += 1\n\nansli[0] = (h - 2) * (w - 2) - sum(ansli)\nfor i in ansli:\nprint(i)",
  "f2": "# L = x + y + z\n# S = x*y*z\n#これをSが最大となるようにyとLの式で表すと\n# S_max = 1/2 * (L - y) * y * 1/2 * (L - y) = 1/4 * (y**3 - 2*L*y**2 +L**2 * y)\n\nL = int(input())\nS_list = []\nfor y in range(L*10**3):\ny_cal = y / 10**3\ns  = 1/4 * (y_cal**3 - 2*L*y_cal**2 +L**2 * y_cal)\nS_list.append(s)\n\nS_max = max(S_list)\nprint(S_max)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p04000/s890108793.py",
  "f2_idx": "./Project_CodeNet_Python800/p02731/s270851702.py",
  "response": "No"
 },
 {
  "f1": "N,K = map(int,input().split())\npls = list(map(int,input().split()))\nans = sum(pls[:K])/2 + 0.5*K\nsum1 = ans\nfor i in range(1,N-K+1):\nsum1 += -pls[i-1]/2+pls[i+K-1]/2\nans = max(ans,sum1)\nprint(ans)",
  "f2": "import sys\nfrom collections import *\nimport heapq\nimport math\nimport bisect\nfrom itertools import permutations,accumulate,combinations,product\nfrom fractions import gcd\ndef input():\nreturn sys.stdin.readline()[:-1]\ndef ruiseki(lst):\nreturn [0]+list(accumulate(lst))\nmod=pow(10,9)+7\n\nn,k=map(int,input().split())\na=list(map(int,input().split()))\nf=list(map(int,input().split()))\nleft,right=-1,10**12+1\na.sort()\nf.sort()\n# print(a)\nwhile right-left>1:\nmid=(right+left)//2\ntmp=0\nfor i in range(n):\ntmp+=max(0,a[i]-mid//f[-1-i])\n\nif tmp<=k:\nright=mid\nelse:\nleft=mid\nprint(right)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02780/s938560622.py",
  "f2_idx": "./Project_CodeNet_Python800/p02883/s161194795.py",
  "response": "No"
 },
 {
  "f1": "W=input().upper()\nr=0\nwhile 1:\nw=input()\nif w == 'END_OF_TEXT':break\nr+=len([x for x in w.upper().split() if x == W])\nprint(r)",
  "f2": "n,q=[int(i) for i in input().split()]\ns=input()\n\n\ndp=[0]*(n)\nans=0\nfor i in range(1,n):\nif s[i-1]==\"A\" and s[i]==\"C\":\nans=ans+1\ndp[i]=ans\n\nfor i in range(q):\nl,r=[int(i) for i in input().split()]\nprint(dp[r-1]-dp[l-1])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02419/s693618415.py",
  "f2_idx": "./Project_CodeNet_Python800/p03087/s027336178.py",
  "response": "No"
 },
 {
  "f1": "from collections import Counter\n\nn,t = map(int,input().split())\na = list(map(int,input().split()))\na_min = [0] * n\na_min[0] = a[0]\nfor i in range(1,n):\na_min[i] = min(a_min[i-1],a[i])\n\nprofit = [a[i] - a_min[i] for i in range(n)]\n\ncomb = Counter(profit)\nprint(sorted(comb.items(),reverse = True)[0][1])",
  "f2": "N = int(input())\nS = input()\nres = 0\n\nf = S[0]\n\nfor i in range(N):\nif S[i] != f:\nf = S[i]\nres += 1\n\nprint(res+1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03946/s193731680.py",
  "f2_idx": "./Project_CodeNet_Python800/p02887/s055721506.py",
  "response": "No"
 },
 {
  "f1": "n, k = list(map(int, input().split()))\nv = list(map(int, input().split()))\nl = 0\nr = 0\na = 0\nm = min(n, k)+1\nhave = []\ntotal = 0\nans = 0\nfor r in range(m):\nfor l in range(m-r):\nhave = []\nhave.append(v[:r])\nif l != 0:\nhave.append(v[-l:])\nelse:\nhave.append([])\na = k-l-r\ndata = have[0]+have[1]\ndata.sort()\nfor i in range(len(data)):\nif i < a and data[i] < 0:\ndata[i] = 0\ntotal = sum(data)\nif total > ans:\nans = total\nprint(ans)",
  "f2": "def solve():\nL = input()\nN = len(L)\nmod = 10**9+7\ndp = [[0]*2 for _ in range(N+1)]\ndp[0][1] = 1\nfor i in range(1,N+1):\nif L[i-1]=='1':\ndp[i][0] = dp[i-1][0]*3+dp[i-1][1]\ndp[i][1] = dp[i-1][1]*2\nelse:\ndp[i][0] = dp[i-1][0]*3\ndp[i][1] = dp[i-1][1]\ndp[i][0]%=mod\ndp[i][1]%=mod\nans = sum(dp[-1])%mod\nreturn ans\nprint(solve())",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03032/s975201797.py",
  "f2_idx": "./Project_CodeNet_Python800/p03015/s610688833.py",
  "response": "No"
 },
 {
  "f1": "_,k,*l=map(int,open(0).read().split())\nfor a,b in sorted(zip(*[iter(l)]*2)):\nk-=b\nif k<1:print(a);exit()",
  "f2": "n, m = map(int, input().split())\nH = list(map(int, input().split()))\ncheck = [1]*n\n\nfor _ in range(m):\na, b = map(int, input().split())\nif H[a-1] >= H[b-1]:\ncheck[b-1] = 0\nif H[a-1] <= H[b-1]:\ncheck[a-1] = 0\n\nprint(sum(check))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03721/s254048480.py",
  "f2_idx": "./Project_CodeNet_Python800/p02689/s341868498.py",
  "response": "No"
 },
 {
  "f1": "from itertools import accumulate\nN, K = map(int, input().split())\nP = list(map(int, input().split()))\nacc = [0] + list(accumulate(P))\nans = 0\nfor a, b in zip(acc, acc[K:]):\nexp = (b - a + K) / 2\nans = max(exp, ans)\nprint(ans)",
  "f2": "n,m = map(int, input().split())\n\nif m - 2*n <0:\nprint(m//2)\nelse:\nans = n\nm -= 2*n\nans += m//4\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02780/s066971500.py",
  "f2_idx": "./Project_CodeNet_Python800/p03797/s839424933.py",
  "response": "No"
 },
 {
  "f1": "A,B=map(int,input().split())\nif B > A:\nA,B = B,A\n\nfor i in range(1, B+1):\nif (A * i) % B == 0:\nprint(A * i)\nbreak",
  "f2": "\n\nu,s,e,w,n,b = map(int,input().split())\nroll = input()\nfor i in roll:\nif i == \"E\":\ntmp = e\ne = u\nu = w\nw = b\nb = tmp\nelif i == \"S\":\ntmp = s\ns = u\nu = n\nn = b\nb = tmp\nelif i == \"W\":\ntmp = w\nw = u\nu = e\ne = b\nb = tmp\nelif i == \"N\":\ntmp = n\nn = u\nu = s\ns = b\nb = tmp\n\nprint(u)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02831/s701914044.py",
  "f2_idx": "./Project_CodeNet_Python800/p02383/s763988942.py",
  "response": "No"
 },
 {
  "f1": "def math(A,B):\nif B%A ==0:\nprint(A+B)\nelse:\nprint(B-A)\nA,B = tuple(map(int, input().split()))\n\nmath(A,B)",
  "f2": "def connect(s,t,u):\nreturn abs(s-t)<=u\na,b,c,d=map(int,input().split())\nprint(\"Yes\" if connect(a,c,d) or connect(a,b,d) and connect(b,c,d) else \"No\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03125/s298353876.py",
  "f2_idx": "./Project_CodeNet_Python800/p03351/s605213214.py",
  "response": "No"
 },
 {
  "f1": "s = input()\nprint(sum((s[i] != s[i+1] for i in range(len(s)-1))))",
  "f2": "import sys\nimport time\nimport math\nimport itertools as it\ndef inpl():\nreturn list(map(int, input().split()))\nst = time.perf_counter()\n# ------------------------------\n\nN = int(input())\n\nmn = 1001001001001\na = 1\nwhile a*a <= N:\nif N % a == 0:\nmn = min(mn, a + N//a - 2)\na += 1\nprint(mn)\n\n\n# ------------------------------\ned = time.perf_counter()\nprint('time:', ed-st, file=sys.stderr)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03945/s794463776.py",
  "f2_idx": "./Project_CodeNet_Python800/p02881/s293869604.py",
  "response": "No"
 },
 {
  "f1": "import math\n\nr=input()\na=(int)(r)*2*math.pi\nprint(a)",
  "f2": "A = [list(map(int, input().split())) for _ in range(3)]\nN = int(input())\nB =  [int(input()) for _ in range(N)]\n\nfor b in B:\nfor i in range(3):\nfor j in range(3):\nif A[i][j] == b:\nA[i][j] = 0\n\nfor i in range(3):\nif A[i][0] == A[i][1] == A[i][2] == 0:\nprint('Yes')\nexit()\n\nif A[0][i] == A[1][i] == A[2][i] == 0:\nprint('Yes')\nexit()\n\nif A[0][0] == A[1][1] == A[2][2] == 0:\nprint('Yes')\nexit()\n\n\nif A[0][2] == A[1][1] == A[2][0] == 0:\nprint('Yes')\nexit()\n\n\nprint('No')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02705/s686192834.py",
  "f2_idx": "./Project_CodeNet_Python800/p02760/s965537774.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nA = list(map(int, input().split()))\n\nS = sum(A)\n\nsuma = 0\nfor i in range(1,N,2):\nsuma += A[i]\n\nX1 = S - 2 * suma\nans = [X1]\n\nprev = X1\nfor i in range(0, N-1):\nnx = 2 * A[i] - prev\nans.append(nx)\nprev = nx\n\nprint(*ans)",
  "f2": "# -*- coding: utf-8 -*-\nimport math\nx = int(input())\n\ndef is_prime(n):\nif n == 1:\nreturn False\nfor i in range(2, int(n**0.5) + 1):\nif n % i == 0:\nreturn True\nreturn False\n\n\nwhile is_prime(x):\nx += 1\n\nprint(x)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02984/s403068287.py",
  "f2_idx": "./Project_CodeNet_Python800/p02819/s098363621.py",
  "response": "No"
 },
 {
  "f1": "# -*- coding: utf-8 -*-\n\na,b,x = map(int, input().split())\n\nans = (b // x) - ((a-1) // x)\nif ans < 0:\nans = 0\n\nprint(ans)",
  "f2": "X = int(input())\nA = int(input())\nB = int(input())\n\nX -= A\ntmp = X//B\nprint(X-tmp*B)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03861/s962157037.py",
  "f2_idx": "./Project_CodeNet_Python800/p03447/s655216328.py",
  "response": "No"
 },
 {
  "f1": "x, y = input().split()\n\nx = int(x, 16)\ny = int(y, 16)\nif x < y:\nprint('<')\nelif x==y:\nprint('=')\nelse:\nprint('>')\n",
  "f2": "a,b,c = map(int, input().split())\n\nans = c-(a-b)\n\nif ans < 0: ans = 0\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03547/s727280222.py",
  "f2_idx": "./Project_CodeNet_Python800/p02951/s145471840.py",
  "response": "No"
 },
 {
  "f1": "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(N: int):\nreturn sum(range(1, N+1))\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools\ndef main():\ndef iterate_tokens():\nfor line in sys.stdin:\nfor word in line.split():\nyield word\ntokens = iterate_tokens()\nN = int(next(tokens))  # type: int\nprint(solve(N))\n\ndef test():\nimport doctest\ndoctest.testmod()\n\nif __name__ == '__main__':\n#test()\nmain()",
  "f2": "import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\nss=[SI() for _ in range(3)]\nii=[0,0,0]\nt=0\nwhile 1:\nif ii[t]==len(ss[t]):\nprint(\"ABC\"[t])\nbreak\nnt=\"abc\".index(ss[t][ii[t]])\nii[t]+=1\nt=nt",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p04029/s894745345.py",
  "f2_idx": "./Project_CodeNet_Python800/p03998/s955902597.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\nans = sum([r - l + 1 for l, r in [[int(x) for x in input().split()] for _ in range(n)]])\nprint(ans)",
  "f2": "a = input()\nb = input()\nc = input()\nprint(a[0], b[1], c[2], sep='')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03606/s554867116.py",
  "f2_idx": "./Project_CodeNet_Python800/p03415/s298938524.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\n*a,=map(int,input().split())\na.sort()\nprint(abs(a[-1]-a[0]))",
  "f2": "y,x = map(int,input().split())\nfor i in range(x+1):\nprint(\"#\",end = \"\")\nprint(\"#\")\nfor i in range(y):\nprint(\"#\"+input()+\"#\")\nfor i in range(x+1):\nprint(\"#\",end = \"\")\nprint(\"#\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03694/s192899126.py",
  "f2_idx": "./Project_CodeNet_Python800/p03712/s319839551.py",
  "response": "No"
 },
 {
  "f1": "s = input()\nxy = list(map(int,input().split()))\ndata = [[0],[0]]\ndirect = 0\nfor i in s:\nif i == \"F\":\ndata[direct][-1] += 1\nelse:\ndirect ^= 1\ndata[direct].append(0)\njudge = [False, False]\nfor direct in range(2):\nset_now = set((data[direct][0],))\nfor d in data[direct][1:]:\ns_next = set()\nfor e in set_now:\ns_next.add(e+d)\ns_next.add(e-d)\nset_now = s_next\n\nif xy[direct] in set_now:\njudge[direct] = True\n\nif judge[0] and judge[1]:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "f2": "A, B, K= map(int,input().split())\nif A >= K :\nprint(A-K,B)\nexit()\nB -= K-A\nif B <= 0 :\nprint(0,0)\nelse :\nprint(0,B)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03488/s746016047.py",
  "f2_idx": "./Project_CodeNet_Python800/p02818/s795237694.py",
  "response": "No"
 },
 {
  "f1": "def main():\nN=int(input())\nA=list(map(int,input().split()))\nans=1000\nstocks=0\nfor i in range(N-1):\nif A[i]>A[i+1]:\nans+=stocks*A[i]\nstocks=0\nelse:\nstocks+=(ans//A[i])\nans-=(ans//A[i])*A[i]\nprint(ans+stocks*A[-1])\nif __name__=='__main__':\nmain()",
  "f2": "t = input()\nd = list(map(int, input().split()))\ncure = 0\nfor i in range(len(d)):\nfor s in range(i+1, len(d)):\ncure += d[i] * d[s]\nprint(cure)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02603/s677013337.py",
  "f2_idx": "./Project_CodeNet_Python800/p02886/s572697655.py",
  "response": "No"
 },
 {
  "f1": "mod=10**9+7\ns=input()\nn=len(s)\ndp=[[0]*4 for _ in range(n+1)]\nabc=\"ABC\"\ndp[n][3]=1\nfor i in range(n-1,-1,-1):\nfor j in range(4):\nif j==3:\nm=0\nif s[i]==\"?\":\nm=3\nelse:\nm=1\ndp[i][j]=(m*dp[i+1][j])%mod\nelse:\nm1=0\nm2=0\nif s[i]==\"?\":\nm1=3\nm2=1\nelse:\nm1=1\nif s[i]==abc[j]:\nm2=1\nelse:\nm2=0\ndp[i][j]=(m1*dp[i+1][j]+m2*dp[i+1][j+1])%mod\nprint(dp[0][0])",
  "f2": "a,b = map(int,input().split())\n\nif a<b:\nprint('{0} < {1}'.format('a','b'))\nelif a>b:\nprint('{0} > {1}'.format('a','b'))\nelse:\nprint('{0} == {1}'.format('a','b'))\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03291/s100962097.py",
  "f2_idx": "./Project_CodeNet_Python800/p02391/s554781057.py",
  "response": "No"
 },
 {
  "f1": "coin = [1,\n6,6**2,6**3,6**4,6**5,6**6,\n9,9**2,9**3,9**4,9**5]\nn = int(input())\ninf = 10**9\ndp = [inf]*(n+1)\ndp[0] = 0\nfor c in coin:\nfor yen in range(c, n+1):\ndp[yen] = min(dp[yen], dp[yen-c] + 1)\nprint(dp[n])",
  "f2": "n = input()\na = input()\nb = input()\nc = input()\ncount = 0\nfor i in range(int(n)):\nd = set([a[i], b[i], c[i]])\n\nif len(d) == 3:\ncount += 2\nelif len(d) == 2:\ncount += 1\nelse:\npass\n\nprint(count)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03329/s138868246.py",
  "f2_idx": "./Project_CodeNet_Python800/p03140/s006682473.py",
  "response": "No"
 },
 {
  "f1": "n,m=map(int,input().split())\nprint(\"Yes\" if n<=m else \"No\")",
  "f2": "from collections import Counter\n_, K = map(int, input().split())\nA = sorted(list(Counter(input().split()).values()))\nprint(sum(A[:len(A)-K]))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02789/s101852771.py",
  "f2_idx": "./Project_CodeNet_Python800/p03495/s932320495.py",
  "response": "No"
 },
 {
  "f1": "def main():\nN = int(input())\nA = [int(input()) for _ in range(N)]\nexist_odds = False\nfor a in A:\nif a % 2 == 1:\nexist_odds = True\nbreak\nif exist_odds:\nprint('first')\nelse:\nprint('second')\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "import sys\nfrom collections import deque\nfrom operator import itemgetter\n\n\ndef input():\nreturn sys.stdin.readline().rstrip()\n\n\ndef main():\nN, K = map(int, input().split())\nh = list(map(int, input().split()))\nh.insert(0,0)\ndp = [10 ** 9 + 7] * (N + 1)\ndp[1] = 0\nfor i in range(1, N + 1):\nfor k in range(1, K + 1):\nif k <= i:\ndp[i] = min(dp[i], dp[i - k] + abs(h[i - k]- h[i]))\nprint(dp[-1])\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03197/s201090953.py",
  "f2_idx": "./Project_CodeNet_Python800/p03161/s100168324.py",
  "response": "No"
 },
 {
  "f1": "#from collections import deque,defaultdict\nprintn = lambda x: print(x,end='')\ninn = lambda : int(input())\ninl   = lambda: list(map(int, input().split()))\ninm   = lambda:      map(int, input().split())\nins = lambda : input().strip()\nDBG = True # and False\nBIG = 10**18\nR = 10**9 + 7\n#R = 998244353\n\ndef ddprint(x):\nif DBG:\nprint(x)\n\nl,r,d = inm()\nsm = 0\nfor i in range(l,r+1):\nif i%d==0:\nsm += 1\nprint(sm)",
  "f2": "N=int(input())\nA,B=map(int,input().split())\n*P,=map(int,input().split())\n\nX=Y=Z=0\nfor p in P:\nif p<=A:\nX+=1\nelif B<p:\nZ+=1\nelse:\nY+=1\n\nprint(min([X,Y,Z]))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02606/s197575624.py",
  "f2_idx": "./Project_CodeNet_Python800/p03156/s398921452.py",
  "response": "No"
 },
 {
  "f1": "a,b,c,d = map(int,input().split())\nif b<c or d<a:\nprint(0)\nelif a<=c and c<=b:\nprint(min(b,d)-c)\nelse:\nprint(min(b,d)-a)",
  "f2": "n=int(input())\nnyukyo=[list(map(int, input().split())) for i in range(n)]\nbld=[[[0 for i in range(10)] for j in range(3)] for k in range(4)]\n\nfor ny in nyukyo:\nbld[ny[0]-1][ny[1]-1][ny[2]-1]+=ny[3]\n\nfor i,b in enumerate(bld):\nfor f in b:\nprint(\"\",*f)\nif i != 3:\nprint(\"####################\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03632/s372155153.py",
  "f2_idx": "./Project_CodeNet_Python800/p02409/s425254636.py",
  "response": "No"
 },
 {
  "f1": "import sys\ninput = sys.stdin.readline\ndef ii(): return int(input())\ndef mi(): return map(int, input().rstrip().split())\ndef lmi(): return list(map(int, input().rstrip().split()))\ndef li(): return list(input().rstrip())\n# template\n\n\nN, A, B = mi()\nprint(min(A*N, B))",
  "f2": "from collections import deque\nfrom math import gcd\nimport sys\n\ndef input():\nreturn sys.stdin.readline().rstrip()\n\nMOD = 10**9 + 7\nn = int(input())\ncnt = {}\nzero_cnt = 0\nans = 1\n\nfor _ in range(n):\na, b = map(int, input().split())\nif (a, b) == (0, 0):\nzero_cnt += 1\ncontinue\ng = gcd(abs(a), abs(b))\nif a == 0 or b == 0: g = max(abs(a), abs(b))\na //= g\nb //= g\n\nrotate = 0\nwhile not (a > 0 and b >= 0):\na, b = -b, a\nrotate += 1\nif (a, b) not in cnt:\ncnt[(a, b)] = [0, 0]\n\ncnt[(a, b)][rotate%2] += 1\n\nfor key in cnt:\nA, B = cnt[key]\nans *= 1 + pow(2, A, MOD) - 1 + pow(2, B, MOD) - 1\nans %= MOD\n\nans += zero_cnt\nans -= 1 #for empty set\nprint(ans % MOD)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03501/s694458663.py",
  "f2_idx": "./Project_CodeNet_Python800/p02679/s931116399.py",
  "response": "No"
 },
 {
  "f1": "import sys\ndef Z(): return int(input())\ndef ZZ(): return [int(_) for _ in input().split()]\n\ndef main():\nN = Z()\ni = 0\nprint(i, flush=True)\ns = input()\n\nf = s\nfirst, last = 0, N\n\nwhile s != 'Vacant':\ni = (first + last)//2\nprint(i, flush=True)\ns = input()\nif s == 'Vacant': break\nif (i%2 == 0 and f == s) or (i%2 == 1 and f != s): first = i\nelse: last = i\nreturn\n\nif __name__ == '__main__':\nmain()\nsys.exit(0)",
  "f2": "n = int(input())\nA = tuple(map(int, input().split()))\nc = 0\ns = 0\nr = 0\nfor l in range(n):\nwhile r < n and A[r] ^ s == A[r] + s:\ns = A[r] + s\nr += 1\n\nc += r- l\nif l == r:\nr += 1\nelse:\ns -= A[l]\n\nprint(c)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03439/s337628673.py",
  "f2_idx": "./Project_CodeNet_Python800/p03340/s450725412.py",
  "response": "No"
 },
 {
  "f1": "N, A, B = map(int, input().split())\n\nma = A + B * (N - 1)\nmi = B + A * (N - 1)\n\nif ma < mi:\nprint(0)\nelif ma==mi:\nprint(1)\nelse:\nprint(ma - mi + 1)",
  "f2": "N = int(input())\nA = [0] + list(map(int,input().split())) + [0]\nB = [0] * (N+1)\ntotal = 0\nfor i in range(N+1):\nB[i] = A[i+1]-A[i]\ntotal += abs(B[i])\nfor i in range(N):\nprint(total - (abs(B[i])+abs(B[i+1])) + abs(B[i]+B[i+1]))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03705/s352655016.py",
  "f2_idx": "./Project_CodeNet_Python800/p03401/s785659860.py",
  "response": "No"
 },
 {
  "f1": "import sys\nfrom collections import deque\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\nclass UnionFindWeighted:\n# Reference:\n# https://note.nkmk.me/python-union-find/\n# https://at274.hatenablog.com/entry/2018/02/03/140504\n# https://qiita.com/drken/items/cce6fc5c579051e64fab\ndef __init__(self, n):\nself.n = n\nself.parents = [-1] * n\nself.weight = [0] * n\n\ndef find(self, x):\nif self.parents[x] < 0:\nreturn x\nelse:\nroot = self.find(self.parents[x])\nself.weight[x] += self.weight[self.parents[x]]\nself.parents[x] = root\nreturn root\n\ndef union(self, x, y, w):\nrx = self.find(x)\nry = self.find(y)\n\nif rx == ry:\nreturn\n\nif self.parents[rx] > self.parents[ry]:\nx, y, rx, ry, w = y, x, ry, rx, -w\n\nself.parents[rx] += self.parents[ry]\nself.parents[ry] = rx\nself.weight[ry] = self.weight[x] - self.weight[y] + w\n\ndef same(self, x, y):\nreturn self.find(x) == self.find(y)\n\ndef diff(self, x, y):\nreturn self.weight[y] - self.weight[x]\n\n\ndef main():\nN, M, *LRD = map(int, read().split())\n\nuf = UnionFindWeighted(N)\nfor l, r, d in zip(*[iter(LRD)] * 3):\nl -= 1\nr -= 1\nif uf.same(l, r) and uf.diff(l, r) != d:\nprint('No')\nreturn\nelse:\nuf.union(l, r, d)\n\nprint('Yes')\nreturn\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "def main():\nname =input()\nif name=='a' or name =='i' or name =='u' or name =='e' or name=='o' :\nprint('vowel')\nelse :\nprint('consonant')\n\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03450/s830180631.py",
  "f2_idx": "./Project_CodeNet_Python800/p03852/s660599044.py",
  "response": "No"
 },
 {
  "f1": "s = input()\nif s == 'a' or s == 'i' or s == 'u' or s == 'e' or s == 'o':\nprint('vowel')\nelse:\nprint('consonant')",
  "f2": "import sys\nsys.setrecursionlimit(10**9)\n\ndef main():\nS = input()\nN = len(S)\nMOD = 10**9+7\n\nS = [int(s) if s!=\"?\" else -1 for s in S ]\ndp = [[0] * 13 for _ in range(N+1)]\n\ns = S[0]\nif s == -1:\nfor j in range(10):\ndp[0][j] += 1\nelse:\ndp[0][s%13] += 1\nfor i in range(1,N):\ns = S[i]\nX = [s]\nif s == -1:\nX = range(10)\n\nfor j in range(0,13):\nten_j = j*10\nfor x in X:\nk = (ten_j+x)%13\ndp[i][k] += dp[i-1][j]\ndp[i][k] %= MOD\n\n# print(dp)\nprint(dp[N-1][5])\n\n\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03852/s593671584.py",
  "f2_idx": "./Project_CodeNet_Python800/p02960/s579875451.py",
  "response": "No"
 },
 {
  "f1": "import re\n\nS = input()\nK = int(input())\n\nm = re.match(r'\\A(1+)([1-9]*)\\Z', S)\nif m:\nprint('1' if len(m.group(1)) >= K else m.group(2)[0])\nelse:\nprint(S[0])",
  "f2": "n,m,l = map(int,input().split())\n\na = [[0 for i in range(m)] for j in range(n)]\nb = [[0 for i in range(l)] for j in range(m)]\nc = [[0 for i in range(l)] for j in range(n)]\n\nfor i in range(n):\nmat_tmp = list(map(int,input().split()))\nfor j in range(m):\na[i][j] = mat_tmp[j]\n\nfor i in range(m):\nmat_tmp = list(map(int,input().split()))\nfor j in range(l):\nb[i][j] = mat_tmp[j]\n\nfor i in range(n):\nfor j in range(l):\nfor k in range(m):\nc[i][j] += a[i][k]*b[k][j]\n\nfor i in range(n):\nprint(' '.join(str(x) for x in c[i]))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03282/s084605329.py",
  "f2_idx": "./Project_CodeNet_Python800/p02414/s810363420.py",
  "response": "No"
 },
 {
  "f1": "k, s = map(int,input().split())\n\nans = 0\nfor x in range(0,k+1):\nfor y in range(0,s-x+1):\nif y > k:\nbreak\nz = s-x-y\nif 0<=z<=k:\nans += 1\nprint(ans)",
  "f2": "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees, log2, log\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\nfrom decimal import Decimal\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10**9 + 7\nfrom decimal import *\n\nS = input()\nN = len(S)+1\n\nans = [-1]*(N)\n\nfor i in range(N-2):\nif S[i] == \">\" and S[i+1] == \"<\":\nans[i+1] = 0\n\nif S[0] == \"<\":\nans[0] = 0\n\nif S[-1] == \">\":\nans[-1] = 0\n\nfor i in range(N-1):\nif S[i] == \"<\" and ans[i] != -1 and ans[i]+1 > ans[i+1] and ans[i+1] != 0:\nans[i+1] = ans[i] + 1\n\n#print(ans)\n\nfor i in range(N-2, -1, -1):\nif S[i] == \">\" and ans[i+1] != -1 and ans[i+1]+1 > ans[i] and ans[i] != 0:\nans[i] = ans[i+1] + 1\n\n#print(ans)\nprint(sum(ans))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03835/s444223162.py",
  "f2_idx": "./Project_CodeNet_Python800/p02873/s722801445.py",
  "response": "No"
 },
 {
  "f1": "s = input()\n\ny, m, d = s.split(\"/\")\nprint(\"2018/\" + m + \"/\" + d)",
  "f2": "\nn, k = [int(i) for i in input().split()]\nans = [1 for i in range(k)]\nans[-1] += n - sum(ans)\nprint(max(ans) - min(ans))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03469/s432707315.py",
  "f2_idx": "./Project_CodeNet_Python800/p03005/s232180221.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\ntotal = 0\n\nA = list(map(int, input().split()))\n\nfor i in range(n):\nfor j in range(i+1, n):\nfor k in range(j+1, n):\nB = [A[i], A[j], A[k]]\nif len(set(B)) == 3 and (max(B) < sum(B) - max(B)):\ntotal += 1\n\nprint(total)",
  "f2": "from math import sin,cos,radians\na,b,c=map(int,input().split())\nc=radians(c)\ns=a*b*sin(c)*0.5\nfor i in[s,a+b+(a*a+b*b-2*a*b*cos(c))**0.5,s/a*2]:print('%5f'%i)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02583/s868439091.py",
  "f2_idx": "./Project_CodeNet_Python800/p02380/s713244247.py",
  "response": "No"
 },
 {
  "f1": "# -*- coding: utf-8 -*-\nimport sys\nN,M,X=map(int, sys.stdin.readline().split())\nCA=[ map(int, sys.stdin.readline().split()) for _ in range(N) ]\n\nans=float(\"inf\")\n\nfor n in range(2**N):\n#先頭列が金額、後は各アルゴリズムの理解度の合計値\nL=[ 0 for _ in range(M+1) ]\nfor keta in range(N):\nif n%2==1:\nfor i,t in enumerate(CA[keta]):\nL[i]+=t\nn/=2\nif X<=min(L[1:]):\nans=min(ans,L[0])\n\nif ans==float(\"inf\"):\nprint -1\nelse:\nprint ans",
  "f2": "import sys\ninput = sys.stdin.readline\nn=int(input())\nT=1\nA=1\n\nfor i in range(n):\nt,a=map(int,input().split())\nx=-(-T//t)\ny=-(-A//a)\nbai=max(x,y)\nT=t*bai\nA=a*bai\nprint(T+A)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02683/s946912130.py",
  "f2_idx": "./Project_CodeNet_Python800/p03964/s105338217.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\nmod = 1000000007\n\nn, k = map(int, input().split())\nnexts = [[] for _ in range(n+1)]\nfor i in range(n-1):\na, b = map(int, sys.stdin.readline().split())\nnexts[a].append(b)\nnexts[b].append(a)\n\n# [score, defined]\nscores = [[0, 0] for _ in range(n+1)]\nresult = 1\nnextList = [1]\nwhile len(nextList) > 0:\ni = nextList.pop()\ndefined = 0\nfor j in nexts[i]:\nif scores[j][0] != 0:\ndefined += scores[j][1]\nelse:\nnextList.append(j)\nscores[j][1] += 1\nif k - defined <= 0:\nresult = 0\nbreak\nresult = result * (k-defined) % mod\nscores[i][0] = k-defined\nscores[i][1] += 1\n\nprint(result)\n",
  "f2": "import math\nimport sys\nimport os\nfrom operator import mul\nimport bisect\n\nsys.setrecursionlimit(10**7)\n\ndef _S(): return sys.stdin.readline().rstrip()\ndef I(): return int(_S())\ndef LS(): return list(_S().split())\ndef LI(): return list(map(int,LS()))\n\nif os.getenv(\"LOCAL\"):\ninputFile = basename_without_ext = os.path.splitext(os.path.basename(__file__))[0]+'.txt'\nsys.stdin = open(inputFile, \"r\")\nINF = float(\"inf\")\n\nN = I()\nS = list(_S())\nans = 0\n\nr = []\ng = []\nb = []\n\nfor i,s in enumerate(S):\nif s == 'R':\nr.append(i)\nif s == 'G':\ng.append(i)\nif s == 'B':\nb.append(i)\n\n# j = bisect.bisect_right(<list>,<value>)\n# print(r)\n# print(g)\n# print(b)\n\n# for i in r:\n#     for j in g:\n#         for k in b:\n#             tmp = sorted([i,j,k])\n#             if not tmp[1]-tmp[0]==tmp[2]-tmp[1]:\n#                 ans += 1\n\nans = len(r)*len(g)*len(b)\n\nfor i in range(N):\nfor j in range(i,N):\nk = j + (j-i)\nif k > N-1:\nbreak\nif S[i]==S[j]:\ncontinue\nif S[i]==S[k] or S[j]==S[k]:\ncontinue\nans -= 1\n\nprint(ans)\n\n# R G B\n# R B G\n# G B R\n# G R B\n# B G R\n# B R G\n\n# i   j   k\n#  - != -\n\n# RBRBGRBGGB\n# 1122233333\n# 0000111233\n# 0112223334\n\n# B*3\n# G*4\n\n# GB系: (2,4), (4,5)\n# RB系: (1,3),",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02985/s976508137.py",
  "f2_idx": "./Project_CodeNet_Python800/p02714/s278189687.py",
  "response": "No"
 },
 {
  "f1": "n,k = map(int,input().split())\n\ncnt = 0\nfor b in range(k+1,n+1):\nl = n//b\nif k == 0:\ncnt += n\nelse:\ncnt += (b-k)*l + max(0,(n-b*l) - (k-1) )\nprint(cnt)",
  "f2": "import sys\nimport math\n\nfor line in sys.stdin:\ntry:\na, b = [int(i) for i in line.split()]\nprint(int(math.log10(a + b) + 1))\nexcept:\nbreak",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03418/s891190610.py",
  "f2_idx": "./Project_CodeNet_Python800/p00002/s009074618.py",
  "response": "No"
 },
 {
  "f1": "import math\nN, D = map(int, input().split(' '))\nX_ls = []\ncnt = 0\n\nfor i in range(N):\nX_ls.append(list(map(int, input().split(' '))))\n\nfor i in range(N - 1):\nfor j in range(i+1, N):\ndist_squared, dist = 0, 0\nfor y, z in zip(X_ls[i], X_ls[j]):\ndist_squared += (y - z) ** 2\ndist = math.sqrt(dist_squared)\nif dist - math.floor(dist) == 0:\ncnt += 1\nprint(cnt)",
  "f2": "from collections import defaultdict\n\nN = int(input())\nA = list(map(int, input().split()))\n\nsum = [0]\nfor i in range(N):\nsum.append(sum[i] + A[i])\n\nsum.sort()\ndict = defaultdict(int)\nfor i in range(N + 1):\ndict[sum[i]] += 1\n\nans = 0\nfor key, val in dict.items():\nans += val * (val - 1) // 2\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02982/s907098922.py",
  "f2_idx": "./Project_CodeNet_Python800/p03363/s304564172.py",
  "response": "No"
 },
 {
  "f1": "input()\ns = input()\nprint(s.count('ABC'))",
  "f2": "N, K = map(int,input().split())\nprint(pow(N//K,3)+(1-K%2)*pow((N+(K//2))//K,3))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02812/s831543533.py",
  "f2_idx": "./Project_CodeNet_Python800/p03268/s712540674.py",
  "response": "No"
 },
 {
  "f1": "\n#B- Frog 2\n\ndef solution(nums):\nn = len(nums)\ndp = [0,0,0]\nfor day in range(n):\nnew_dp = [0,0,0]\nfor i in range(3):\nfor j in range(3):\nif i!=j:\nnew_dp[i] = max(new_dp[i] , dp[j]+ nums[day][i] )\ndp = new_dp\nreturn max(dp[0],dp[1],dp[2])\n\nN = int(input())\nnums = []\nfor _ in range(N):\nday = list(map(int,input().split()))\nnums.append(day)\nres = solution(nums)\nprint(res)",
  "f2": "N, M = list(map(int, input().split()))\nL = [tuple(map(int, input().split())) for i in range(N)]\nL.sort()\n# print(L)\nct = 0\ncost = 0\ni = 0\nwhile ct < M:\na = min(M-ct, L[i][1])\nct += a\ncost += a*L[i][0]\n# print(ct,cost)\ni += 1\nprint(cost)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03162/s190696844.py",
  "f2_idx": "./Project_CodeNet_Python800/p03103/s806539126.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nS = input()\nx = 0\nres = 0\nfor s in S:\nif(s == \"I\"):\nx += 1\nelif(s == \"D\"):\nx -= 1\nres = max(res, x)\nprint(res)",
  "f2": "N = int(input())\nA = map(int, input().split())\n\nB = [[i, a] for i, a in enumerate(A)]\n\nC = sorted(B, key=lambda b: b[1], reverse=True)\n\ndp = [[-1 for _ in range(N + 1)] for _ in range(N + 1)]\n\ndp[1][0] = (C[0][0] - 0) * C[0][1]\ndp[0][1] = ((N - 1) - C[0][0]) * C[0][1]\n\nans = 0\nfor i in range(2, N + 1):\nfor j in range(0, i + 1):\nt1, t2 = 0, 0\n\nif j - 1 >= 0:\nt1 = dp[j - 1][i - j] + abs((C[i - 1][0] - (j - 1))) * C[i - 1][1]\n\nif i - j - 1 >= 0:\nt2 = dp[j][i - j - 1] + abs((C[i - 1][0] - (N - (i - j)))) * C[i - 1][1]\n\ndp[j][i - j] = max(t1, t2)\n\nif i == N:\nans = max(ans, dp[j][i - j])\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03827/s782524779.py",
  "f2_idx": "./Project_CodeNet_Python800/p02709/s718927935.py",
  "response": "No"
 },
 {
  "f1": "R=int(input())\n\nprint(2*3.14159265*R)",
  "f2": "import math\nN = int(input())\ncount = 0\n\nfor i in range(N):\nn_size = int(math.log10(N-i)+1)\nif n_size%2==1:\ncount += 1\nelse:\ncount += 0\ni += 1\nprint(count)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02705/s256403403.py",
  "f2_idx": "./Project_CodeNet_Python800/p02952/s713971425.py",
  "response": "No"
 },
 {
  "f1": "# 過去の提出を見ながら解いた\n\ndef main():\nN, M = map(int, input().split())\n*a, = map(int, input().split())\na.sort()\n\ndef count(mid) -> int:\ncnt = 0  # (i,j)>=mid の個数\nj = N  # j: iと組んでペア和>=midを満たすjの下限, 初期値は範囲外=条件を満たすjはない\nfor i in range(N):\nwhile j > 0 and a[i] + a[j - 1] >= mid:\nj -= 1\n# j==0 or a[i]+a[j]>=mid\n# j==0\n# 現在のiに対しすべてのaの要素が相方になる。\n# 一度そのようなiに達したら、それ以降のiはすべてこの条件を満たす。\ncnt += N - j  # iに対し[j,N)が相方になる\nreturn cnt\n\ndef binary_search(*, ok: int, ng: int, is_ok: 'function') -> int:\n\"\"\"あるペア和以上のみ採用する場合に\nM回以上握手できないようなペア和の上限\"\"\"\nwhile abs(ok - ng) > 1:\nmid = (ok + ng) // 2\nif is_ok(mid):\nok = mid\nelse:\nng = mid\nreturn ok\n\nma = binary_search(ok=2 * 10 ** 5 + 1, ng=0, is_ok=lambda mid: count(mid) < M)\n\ndef accumulate(a):\ns = 0\nyield s\nfor x in a:\ns += x\nyield s\n\n*acc, = accumulate(a)\n\nans = 0\nj = N  # j: iと組んでペア和>=midを満たすjの下限, 初期値は範囲外=条件を満たすjはない\nfor i in range(N):\nwhile j > 0 and a[i] + a[j - 1] >= ma:\nj -= 1\nans += a[i] * (N - j) + acc[N] - acc[j]  # i側の寄与=ペア数,j側の寄与=acc\nans += (ma - 1) * (M - count(ma))  # ペア和maではMペア組めないが、ma-1で埋められる\n\nprint(ans)\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "A, B, C, D = map(int, input().split())\nwhile True:\n# 高橋\nC -= B\nif C <= 0:\nprint('Yes')\nbreak\n# 青木\nA -= D\nif A <= 0:\nprint('No')\nbreak",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02821/s651194938.py",
  "f2_idx": "./Project_CodeNet_Python800/p02700/s345606438.py",
  "response": "No"
 },
 {
  "f1": "sx, sy, tx, ty = map(int, input().split())\nx = tx - sx\ny = ty - sy\nL = []\nL.append('R' * x)\nL.append('U' * y)\nL.append('L' * x)\nL.append('D' * (y + 1))\nL.append('R' * (x + 1))\nL.append('U' * (y + 1))\nL.append('LU')\nL.append('L' * (x + 1))\nL.append('D' * (y + 1))\nL.append('R')\nprint(*L, sep='')",
  "f2": "x,y=map(int,input().split())\nif(x>8 or y>8):\nprint(\":(\")\nelse:\nprint(\"Yay!\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03836/s652095947.py",
  "f2_idx": "./Project_CodeNet_Python800/p03323/s258296942.py",
  "response": "No"
 },
 {
  "f1": "s = input().split(\" \")\nn = int(s[0])\nm = int(s[1])\nl = int(s[2])\na = [[0 for i in range(m)] for j in range(n)]\nb = [[0 for i in range(l)] for j in range(m)]\nfor i in range(n):\ns = input().split(\" \")\nfor j in range(m):\na[i][j] = int(s[j])\nfor i in range(m):\ns = input().split(\" \")\nfor j in range(l):\nb[i][j] = int(s[j])\nfor i in range(n):\nfor j in range(l):\nsk = 0\nfor k in range(m):\nsk += a[i][k] * b[k][j]\nif j == l-1:\nprint(sk)\nelse:\nprint(sk,end=\" \")",
  "f2": "a, b = map(int, input().split())\n\nimport math\nflag = True\nfor i in range(1009):\nif math.floor(i * 0.08) == a and math.floor(i * 0.10) == b:\nprint(i)\nflag = False\nbreak\nif flag:\nprint(-1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02414/s401923776.py",
  "f2_idx": "./Project_CodeNet_Python800/p02755/s596774626.py",
  "response": "No"
 },
 {
  "f1": "s = list(input())\nt = list(input())\nans = 0\n\nfor i in range(len(s)):\nif s[i] != t[i]:\nans += 1\n\nprint(ans)",
  "f2": "n = int(input())\n\nprint(\"ABC\" + str(n))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02622/s679485476.py",
  "f2_idx": "./Project_CodeNet_Python800/p03643/s823035961.py",
  "response": "No"
 },
 {
  "f1": "from math import cos, radians, sin, sqrt\n\ndef g(a, b, c):\nc_rad = radians(c)\nyield a * b * sin(c_rad) / 2\nyield a + b + sqrt(a ** 2 + b ** 2 - 2 * a * b * cos(c_rad))\nyield b * sin(c_rad)\n\na, b, c = list(map(int, input().split()))\n\nfor i in g(a, b, c):\nprint(\"{:.8f}\".format(i))",
  "f2": "#\n# abc167 c\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\ndef assertIO(self, input, output):\nstdout, stdin = sys.stdout, sys.stdin\nsys.stdout, sys.stdin = StringIO(), StringIO(input)\nresolve()\nsys.stdout.seek(0)\nout = sys.stdout.read()[:-1]\nsys.stdout, sys.stdin = stdout, stdin\nself.assertEqual(out, output)\n\ndef test_入力例_1(self):\ninput = \"\"\"3 3 10\n60 2 2 4\n70 8 7 9\n50 2 3 9\"\"\"\noutput = \"\"\"120\"\"\"\nself.assertIO(input, output)\n\ndef test_入力例_2(self):\ninput = \"\"\"3 3 10\n100 3 1 4\n100 1 5 9\n100 2 6 5\"\"\"\noutput = \"\"\"-1\"\"\"\nself.assertIO(input, output)\n\ndef test_入力例_3(self):\ninput = \"\"\"8 5 22\n100 3 7 5 3 1\n164 4 5 2 7 8\n334 7 2 7 2 9\n234 4 7 2 8 2\n541 5 4 3 3 6\n235 4 8 6 9 7\n394 3 6 1 6 2\n872 8 4 3 7 2\"\"\"\noutput = \"\"\"1067\"\"\"\nself.assertIO(input, output)\n\n\ndef resolve():\nN, M, X = map(int, input().split())\nCA = [list(map(int, input().split())) for _ in range(N)]\n\nans = float(\"inf\")\nfor bit in range(1 << N):\nS = [0]*(M+1)\nfor i, ca in enumerate(CA):\nif (1 << i) & bit == 1 << i:\nS = list(map(sum, zip(S, ca)))\nfor s in S[1:]:\nif s < X:\nbreak\nelse:\nans = min(ans, S[0])\n\nif ans == float(\"inf\"):\nans = -1\n\nprint(ans)\n\n\nif __name__ == \"__main__\":\n# unittest.main()\nresolve()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02380/s061903610.py",
  "f2_idx": "./Project_CodeNet_Python800/p02683/s407997174.py",
  "response": "No"
 },
 {
  "f1": "a = [int(_) for _ in input().split()]\nif all(1 <= i <= 100 for i in a):\nprint('YES' if a[1] - a[0] == a[2] - a[1] else 'NO')\nelse:\nprint('hoge!')",
  "f2": "import math\nfrom datetime import date\n\ndef main():\n\nn = int(input())\nprint(n * (n + 1) // 2)\n\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03759/s846491168.py",
  "f2_idx": "./Project_CodeNet_Python800/p04029/s434380478.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\ns=input()\nw=[0]*(n+1)\nb=[0]*(n+1)\nfor i in range(1,n+1):\nw[i]=w[i-1]+1 if s[i-1]==\"#\" else w[i-1]\nb[-i-1]=b[-i]+1 if s[-i]==\".\" else b[-i]\nprint(min([x+y for x,y in zip(w,b)]))",
  "f2": "import collections\n\ndef prime_factorize(n):\na = []\nwhile n % 2 == 0:\na.append(2)\nn //= 2\nf = 3\nwhile f**2 <= n:\nif n % f == 0:\na.append(f)\nn //= f\nelse:\nf += 2\nif n != 1:\na.append(n)\nreturn a\n\ncount = 0\nN = int(input())\n\nif N <= 1:\nprint(0)\nexit()\nelse:\nc = collections.Counter(prime_factorize(N))\n\nK = [sum(range(1,i)) for i in range(2,11)]\n# = [1, 3, 6, 10, 15, 21, 28, 36, 45]\n\nfor i in c:\nfor j in range(1,len(K)):\nif c[i] < K[j]:\ncount += j\nbreak\n\nprint(count)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03069/s173733861.py",
  "f2_idx": "./Project_CodeNet_Python800/p02660/s046941989.py",
  "response": "No"
 },
 {
  "f1": "#A\nR = int(input())\nprint(2*R*3.141592)",
  "f2": "import sys\ninput = sys.stdin.readline\n\ndef main():\nN = int(input())\nS = set([input().rstrip() for _ in range(N)])\nprint(len(S))\n\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02705/s251857290.py",
  "f2_idx": "./Project_CodeNet_Python800/p02701/s008147536.py",
  "response": "No"
 },
 {
  "f1": "l = set(map(int,input().split()))\nprint('Yes'if l <= set([1,3,5,7,8,10,12])or l <= set([4,6,9,11] )else 'No')\n",
  "f2": "import sys\n\nrr = lambda: sys.stdin.readline().rstrip()\n\ns = rr()\nif s[5:5+2] > '04':\nprint('TBD')\nelse:\nprint('Heisei')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03711/s666464356.py",
  "f2_idx": "./Project_CodeNet_Python800/p03109/s791479948.py",
  "response": "No"
 },
 {
  "f1": "from copy import copy\nSs = input() + \"T\"\nX, Y = map(int, input().split())\n\nd = [len(s) for s in Ss.split(\"T\")]\nx = d[0]\n# x,y方向に分解\nd_x = d[2::2]\nd_y = d[1::2]\n\nxs = set([x])\nys = set([0])\nblx = [X in xs]\nfor d in d_x:\n# 各移動後に、X座標にいるかcheck\nxs_ = set()\nfor x in xs:\nxs_.add(x+d)\nxs_.add(x-d)\nblx.append(X in xs_)\nxs = copy(xs_)\n\nbly = []\nfor d in d_y:\nys_ = set()\nfor y in ys:\nys_.add(y+d)\nys_.add(y-d)\nbly.append(Y in ys_)\nys = copy(ys_)\n\nif blx[-1] and bly[-1]: print(\"Yes\")\nelse: print(\"No\")",
  "f2": "# coding: utf-8\nimport sys\n#from operator import itemgetter\nsysread = sys.stdin.buffer.readline\nread = sys.stdin.buffer.read\n#from heapq import heappop, heappush\n#from collections import defaultdict\nsys.setrecursionlimit(10**7)\n#import math\n#from itertools import product, accumulate, combinations, product\n#import bisect\n#import numpy as np\n#from copy import deepcopy\n#from collections import deque\n\nINF = 1 << 50\n\n\n\ndef run():\nN = int(sysread())\nXL = []\nfor i in range(N):\nx,l = map(int, sysread().split())\nXL.append((x-l, l+x))\nXL = sorted(XL, key = lambda x:x[1])\n#print(XL)\nans = 0\npre_end = - (1 << 50)\nfor left,right in XL:\nif pre_end <= left:\nans += 1\npre_end = right\nprint(ans)\n\n\nif __name__ == \"__main__\":\nrun()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03488/s855722534.py",
  "f2_idx": "./Project_CodeNet_Python800/p02796/s944217484.py",
  "response": "No"
 },
 {
  "f1": "N, K = map(int, input().split())\nc = 0\nfor i in range(1,N+1):\nb = i*K\nif b <= N:\nc += 1\nelse:\nbreak\ne = 0\nif K%2 ==0:\nfor i in range(1,N+1):\nd = i*K/2\nif d <= N and d%K != 0:\ne += 1\nprint(c**3 + e**3)\nelse:\nprint(c**3)",
  "f2": "S = int(raw_input())\nM, s = S / 60, S % 60\nh, m = M / 60, M % 60\nprint '%d:%d:%d' % (h, m, s)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03268/s442453418.py",
  "f2_idx": "./Project_CodeNet_Python800/p02390/s322111113.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\nP = list(map(int, input().split()))\nsor_P = sorted(P)\ncount = 0\nfor i in range(n):\nif P[i] != sor_P[i]:\ncount += 1\nif count > 2:\nprint('NO')\nexit()\nprint('YES')",
  "f2": "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(X: int, A: int, B: int):\nif B - A <= 0:\nreturn \"delicious\"\nelif B - A <= X:\nreturn \"safe\"\nelse:\nreturn \"dangerous\"\n\n\n# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\ndef iterate_tokens():\nfor line in sys.stdin:\nfor word in line.split():\nyield word\ntokens = iterate_tokens()\nX = int(next(tokens))  # type: int\nA = int(next(tokens))  # type: int\nB = int(next(tokens))  # type: int\nprint(solve(X, A, B))\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02958/s784536445.py",
  "f2_idx": "./Project_CodeNet_Python800/p03679/s819020284.py",
  "response": "No"
 },
 {
  "f1": "def main():\nn=int(input())\na=list(map(int, input().split()))\nmod=10**9+7\nans=((sum(a)%mod)**2)%mod\nfor i in range(n):\nans-=a[i]**2\nans%=mod\nm=pow(2,mod-2,mod)\nprint(ans*m%mod)\nmain()",
  "f2": "def gusuuhantei(i):\ncount = 0\nnum = i\nwhile True:\nif num % 2 ==0 and not num == 0:\nnum = num / 2\ncount += 1\nelse:\nbreak\nreturn count\nN = int(input())\nli = [0]*(N+1)\nfor i in range(N+1):\nli[i] = gusuuhantei(i)\nMaxcount = max(li)\nindex = li.index(Maxcount)\nif N == 1:\nprint(1)\nelse:\nprint(index)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02572/s274914141.py",
  "f2_idx": "./Project_CodeNet_Python800/p03644/s650929116.py",
  "response": "No"
 },
 {
  "f1": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nsys.setrecursionlimit(10 ** 7)\n\nn, k, *a = map(int, read().split())\nv = 0\nans = 0\nfor i in range(40, -1, -1):\ncnt = 0\nfor aa in a:\nif (aa >> i) & 1:\ncnt += 1\nif n - cnt > cnt and v + (1 << i) <= k:\nv += 1 << i\nans += (n - cnt) * (1 << i)\nelse:\nans += cnt * (1 << i)\nprint(ans)",
  "f2": "a,b = map(int,input().split())\n\nif a == 1 and b != 1:\nprint('Alice')\nelif b == 1 and a != 1:\nprint('Bob')\nelif a > b:\nprint('Alice')\nelif a == b:\nprint('Draw')\nelse:\nprint('Bob')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03138/s342574478.py",
  "f2_idx": "./Project_CodeNet_Python800/p03803/s484918016.py",
  "response": "No"
 },
 {
  "f1": "s = input()\nans = 10000\nfor i in range(len(s)-2):\nnum = int(s[i] + s[i+1] + s[i+2])\nif abs(num-753) < ans:\nans = abs(num-753)\nprint(ans)",
  "f2": "import math\n\ns=int(input())\n\nn=math.ceil(math.sqrt(s))\n\nif n*n-s<0:\nn+=1\n\nx2=n\ny3=n\n\nwhile x2*y3-s>10**9:\ny3-=1\n\ny2=x2*y3-s\nx3=1\n\nprint(0,0,x2,y2,x3,y3)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03211/s186973448.py",
  "f2_idx": "./Project_CodeNet_Python800/p02963/s622524410.py",
  "response": "No"
 },
 {
  "f1": "from math import gcd\n\nmod = 1000000007\n\nn = int(input())\ncounter = {}\nzeros = 0\nfor i in range(n):\na, b = map(int, input().split())\nif (a == 0 and b == 0):\nzeros += 1\ncontinue\ng = gcd(a, b)\na //= g\nb //= g\nif (b < 0):\na = -a\nb = -b\nif (b == 0 and a < 0):\na = -a\nrot90 = a <= 0\nif rot90:\na, b = b, -a\ncount = counter.get((a, b), [0, 0])\nif rot90:\ncount[0] += 1\nelse:\ncount[1] += 1\ncounter[(a, b)] = count\n\nans = 1\nfor k, pairs in counter.items():\ns_count = pairs[0]\nt_count = pairs[1]\nnow = pow(2, s_count, mod)-1\nnow += pow(2, t_count, mod)-1\nnow += 1\nans *= now\nans %= mod\nprint((ans - 1 + zeros) % mod)",
  "f2": "s = int(input())\nif s >= 1200:\nprint(\"ARC\")\nelse:\nprint(\"ABC\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02679/s855524042.py",
  "f2_idx": "./Project_CodeNet_Python800/p03813/s525732902.py",
  "response": "No"
 },
 {
  "f1": "S=input()\nmod=10**9+7\nLa,Lq,Rc,Rq=0,0,S.count(\"C\"),S.count(\"?\")\nans=0\nf=lambda x,y:pow(x,y,mod) if y>=0 else 0\nfor s in S:\nRc-=s==\"C\";Rq-=s==\"?\"\nif s==\"B\" or s==\"?\":\nans+=(La*f(3,Lq)+Lq*f(3,Lq-1))*(Rc*f(3,Rq)+Rq*f(3,Rq-1))\nans%=mod\nLa+=s==\"A\";Lq+=s==\"?\"\nprint(ans)",
  "f2": "k = int(input())\nn = 50\nx, y = divmod(k, n)\nans = [i+x for i in range(n)]\nfor i in range(y):\ni %= n\nans[i] += n\nfor j in range(n):\nif i == j:\ncontinue\nans[j] -= 1\nprint(n)\nprint(*ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03291/s770533319.py",
  "f2_idx": "./Project_CodeNet_Python800/p03646/s413366833.py",
  "response": "No"
 },
 {
  "f1": "M,D=map(int,input().split())\nans=0\nfor i in range(11,D+1):\na,b=0,0\nif i%10>=2:\na=i%10\nif i//10>=2:\nb=i//10\nif 4<=a*b<=M:\nans+=1\nprint(ans)",
  "f2": "N=int(input())\nst=[]\nfor i in range(N):\ns,t=input().split()\nt=int(t)\nst.append((s,t))\nX=input()\n\n#st = sorted(st,key=lambda x:x[1])\nflag=0\nans=0\nfor i in range(N):\nif flag: ans += st[i][1]\nif st[i][0]==X:flag=1\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02927/s118171751.py",
  "f2_idx": "./Project_CodeNet_Python800/p02806/s058170158.py",
  "response": "No"
 },
 {
  "f1": "# A - September 9\n\nN = input()\nmy_list = []\n\nfor i in N:\nmy_list.append(i)\n\nif \"9\" in my_list:\nprint('Yes')\nelse:\nprint('No')",
  "f2": "a, b = map(int, raw_input().split())\nprint a - b + 1",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03605/s565886246.py",
  "f2_idx": "./Project_CodeNet_Python800/p03272/s032588600.py",
  "response": "No"
 },
 {
  "f1": "H,W=(int(x) for x in input().split())\nif H == 1 or W == 1:\nprint(1)\nexit()\nif (H * W) % 2 == 0:\nprint((H * W) // 2)\nelse:\nprint(((H * W) // 2) + 1)",
  "f2": "\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport numpy as np\n\ndef int_mtx(N):\nx = []\nfor _ in range(N):\nx.append(input())\nreturn x\n\ndef int_map():\nreturn map(int,input().split())\n\ndef int_list():\nreturn list(map(int,input().split()))\n\nimport collections as col\n\nN = int(input())\na = int_list()\n\nc = col.Counter(a)\n\nans = 0\n\nfor i in range(1,100000):\nans = max(ans,c[i-1]+c[i]+c[i+1])\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02742/s923833514.py",
  "f2_idx": "./Project_CodeNet_Python800/p03611/s873295334.py",
  "response": "No"
 },
 {
  "f1": "def main():\nn, m = list(map(int, input().split(\" \")))\nk_list = []\ns_list = []\nfor _ in range(m):\ns = []\nfor i, one in enumerate(input().split(\" \")):\nif i==0:\nk = int(one)\nelse:\ns.append(int(one))\nk_list.append(k)\ns_list.append(s)\np = list(map(int, input().split(\" \")))\n\ncnt = 0\nfor x in range(2**n):\nf = 0\nonoff_list = [1 if bin(x)[2:].zfill(n)[i]==\"1\" else 0 for i in range(n)]\nfor mi in range(m):\ns = s_list[mi]\non_num = sum([onoff_list[si-1] for si in s])\nif on_num%2==p[mi]:\nf+=1\nelse:\nbreak\nif f==m:\ncnt+=1\nprint(cnt)\n\nif __name__==\"__main__\":\nmain()",
  "f2": "n,m,c = map(int,input().split())\nb = list(map(int,input().split()))\na = []\nfor _ in range(n):\nd = list(map(int,input().split()))\na.append(d)\n\nans = 0\nfor i in range(n):\ntmp = 0\nfor j in range(m):\ntmp += b[j]*a[i][j]\ntmp += c\nif tmp > 0:\nans += 1\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03031/s535053503.py",
  "f2_idx": "./Project_CodeNet_Python800/p03102/s257456410.py",
  "response": "No"
 },
 {
  "f1": "N,K =map(int,input().split())\nList = list(map(int,input().split()))\nDP = [False]*(2*K+1)\nfor i in range(K):\nfor item in List:\nif DP[i]==False:\nDP[i+item] = True\nif DP[K]==True:\nprint('First')\nelse:\nprint('Second')",
  "f2": "N, A, B = map(int, input().split())\nX = list(map(int, input().split()))\n\nsa_cost = [0] * (N - 1)\nfor i in range(N - 1):\nsa_cost[i] = (X[i + 1] - X[i]) * A\n\n\nans = 0\nfor i in range(len(sa_cost)):\nif sa_cost[i] <= B:\nans += sa_cost[i]\nelse:\nans += B\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03170/s690917375.py",
  "f2_idx": "./Project_CodeNet_Python800/p03829/s831316798.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nA = list(map(int, input().split()))\nA.sort()\nans = 1\nmax_limit = 10 ** 18\nfor i in range(N):\nans *= A[i]\nif ans > max_limit:\nans = -1\nbreak\n\nif ans > max_limit:\nprint(str(-1))\nelse:\nprint(str(ans))",
  "f2": "import sys\ninput = sys.stdin.readline\nn = int(input())\nl = []\nfor i in range(n):\na,b = map(int,input().split())\nl.append((b,a))\nl.sort()\nt = 0\nfor i in range(n):\nt += l[i][1]\nif t > l[i][0]:\nprint('No')\nexit()\nprint('Yes')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02658/s928698238.py",
  "f2_idx": "./Project_CodeNet_Python800/p02996/s843205309.py",
  "response": "No"
 },
 {
  "f1": "import itertools\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main():\nN, M, Q = list(map(int, input().split()))\ncands = itertools.combinations(range(N+M-1), N)\nQs = [tuple(map(int, input().split())) for _ in range(Q)]\n\nseq = [0]*N\nmax_ = 0\nfor cand in cands:\ntemp_max = 0\nfor i in range(N):\nseq[i] = cand[i] - i\n\nfor a, b, c, d in Qs:\nif seq[b-1] - seq[a-1] == c:\ntemp_max += d\nmax_ = max(max_, temp_max)\n\nprint(max_)\n\n\nif(__name__ == '__main__'):\nmain()",
  "f2": "from sys import stdin\na = stdin.readline().rstrip()\nn = len(a)\nk = [0]*26\na = sorted(a)\nt = \"a\"\ntmp = 0\nfor i in range(n):\nif t == a[i]:\nk[tmp] += 1\nelse:\nt = a[i]\ntmp += 1\nk[tmp] += 1\nanswer = (n*(n-1)) // 2\nfor i in range(26):\nif k[i] > 1:\nanswer -= (k[i]*(k[i]-1)) // 2\nprint(answer + 1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02695/s823465416.py",
  "f2_idx": "./Project_CodeNet_Python800/p03618/s115808015.py",
  "response": "No"
 },
 {
  "f1": "print(len(set([int(i) for i in input().split()])))",
  "f2": "#!/usr/bin/env python3\n\"\"\"\nSimple Version\nPython TLE https://atcoder.jp/contests/dp/submissions/14906600\nPyPy TLE https://atcoder.jp/contests/dp/submissions/14906630\n\"\"\"\nfrom collections import defaultdict\nimport sys\n\nsys.setrecursionlimit(10**6)\n\n\ndef solve(N, M, edges):\nlongest = {}\n\nstack = [v for v in edges]\n\nwhile stack:\nv = stack.pop()\nif v > 0:\nif v in longest:\ncontinue\nnext_edges = edges.get(v)\nstack.append(-v)\nif next_edges:\nstack.extend(next_edges)\nelse:\nnext_edges = edges.get(-v)\nif not next_edges:\nret = 0\nelse:\nret = max(longest[x] for x in next_edges) + 1\nlongest[-v] = ret\n\nreturn max(longest[v] for v in edges)\n\n\ndef main():\nN, M = map(int, input().split())\nedges = defaultdict(set)\nfor i in range(M):\nv1, v2 = map(int, input().split())\nedges[v1].add(v2)\n\nprint(solve(N, M, edges))\n\n\nT1 = \"\"\"\n4 5\n1 2\n1 3\n3 2\n2 4\n3 4\n\"\"\"\n\nT2 = \"\"\"\n6 3\n2 3\n4 5\n5 6\n\"\"\"\n\nT3 = \"\"\"\n5 8\n5 3\n2 3\n2 4\n5 2\n5 1\n1 4\n4 3\n1 3\n\"\"\"\n\n\ndef _test():\n\"\"\"\n# >>> as_input(T1)\n# >>> main()\n# 3\n\n# >>> as_input(T2)\n# >>> main()\n# 2\n\n>>> as_input(T3)\n>>> main()\n3\n\"\"\"\nimport doctest\ndoctest.testmod()\n\n\ndef as_input(s):\n\"use in test, use given string as input file\"\nimport io\nglobal read, input\nf = io.StringIO(s.strip())\ninput = f.readline\nread = f.read\n\n\nUSE_NUMBA = False\nif (USE_NUMBA and sys.argv[-1] == 'ONLINE_JUDGE') or sys.argv[-1] == '-c':\nprint(\"compiling\")\nfrom numba.pycc import CC\ncc = CC('my_module')\ncc.export('solve', solve.__doc__.strip().split()[0])(solve)\ncc.compile()\nexit()\nelse:\ninput = sys.stdin.buffer.readline\nread = sys.stdin.buffer.read\n\nif (USE_NUMBA and sys.argv[-1] != '-p') or sys.argv[-1] == \"--numba\":\n# -p: pure python mode\n# if not -p, import compiled module\nfrom my_module import solve  # pylint: disable=all\nelif sys.argv[-1] == \"-t\":\n_test()\nsys.exit()\nelif sys.argv[-1] != '-p' and len(sys.argv) == 2:\n# input given as file\ninput_as_file = open(sys.argv[1])\ninput = input_as_file.buffer.readline\nread = input_as_file.buffer.read\n\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03962/s971056561.py",
  "f2_idx": "./Project_CodeNet_Python800/p03166/s877422619.py",
  "response": "No"
 },
 {
  "f1": "# Problem C - Sqrt Inequality\n\n# input\na, b, c = map(int, input().split())\n\n# check\nis_ok = (a * b)*4 < (c - a - b)**2 and (c-a-b)>0\n\n# output\nif is_ok:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "f2": "money = int(input())\n\ncount_div_500, left_after_500 = divmod(money, 500)\ncount_div_5, left_after_5 = divmod(left_after_500, 5)\n\nprint(count_div_500 * 1000 + count_div_5 * 5)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02743/s941227718.py",
  "f2_idx": "./Project_CodeNet_Python800/p02724/s456595797.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\na = list(map(int, input().split()))\n\nprint(min(sum(map(lambda x: (x - i) * (x - i), a)) for i in range(-100, 101)))",
  "f2": "N, K = map(int, input().split())\nA = sorted(list(map(int, input().split())))\nP = int(1e9+7)\nans = 0\n\nkaizyo = [0]\nkaizyo_inv = [0]\ntmp = 1\nfor i in range(1, N+1):\ntmp = (tmp*i) % P\nkaizyo.append(tmp)\nkaizyo_inv.append(pow(tmp, P - 2, P))\n\n\ndef comb(n, r):\nif n < r or n == 0:\nreturn 0\nelif n == r or r == 0:\nreturn 1\nelse:\nreturn kaizyo[n] * kaizyo_inv[r] * kaizyo_inv[n - r]\n\n\ncombs=[comb(i, K - 1)%P for i in range(N+1)]\n\nfor i, a in enumerate(A):\nans = (ans + a * combs[i]) % P\nans = (ans - a * combs[N - i - 1]) % P\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p04031/s368279157.py",
  "f2_idx": "./Project_CodeNet_Python800/p02804/s249053084.py",
  "response": "No"
 },
 {
  "f1": "A, B, M = map(int, input().split())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\n#割引を使わなくても一番安い価格を初期値にする\ntotal = min(a) + min(b)\n\nfor i in range(0,M,1):\nc = list(map(int,input().split()))  #割引券を入手\nkakaku = a[c[0]-1]+ b[c[1]-1] - c[2]\nif total > kakaku:\ntotal = kakaku\n\nprint(total)",
  "f2": "a,b,c=map(int,raw_input().split())\nif a+b >= c:\nprint 'Yes'\nelse:\nprint 'No'",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02748/s832883597.py",
  "f2_idx": "./Project_CodeNet_Python800/p03407/s704776345.py",
  "response": "No"
 },
 {
  "f1": "n, k = map(int, input().split())\na = list(map(int, input().split()))\nmod = 10**9 + 7\nres = 1\na.sort(reverse=True)\nif a[0]<0 and k%2==1:\nfor i in range(k):\nres = (res*a[i])%mod\nelse:\nright = n-1\nleft = 0\nwhile k > 1:\nif a[right]*a[right-1] < a[left]*a[left+1]:\nres = (res*a[left])%mod\nleft += 1\nk -= 1\nelse:\nres = (res*a[right]*a[right-1])%mod\nright -= 2\nk -= 2\nif k == 1:\nres = (res*a[left])%mod\n\nprint(res)",
  "f2": "from collections import deque\n\nN, Q = map(int, input().split()) # Nは頂点の数、Qは操作の回数\ngraph = [[] for _ in range(N+1)]\nfor _ in range(N-1):\na, b = map(int, input().split())\ngraph[a].append(b)\ngraph[b].append(a)\n\ncounts = [0] * (N+1)\nfor _ in range(Q):\np, x  = map(int, input().split())\ncounts[p] += x\nvisited = [-1] * (N+1)\n\nq = deque()\nq.append(1)\nvisited[1] = 1\nwhile q:\nnode = q.pop()\n\nnext_nodes = graph[node]\nfor next in next_nodes:\nif visited[next] != -1:\ncontinue\nq.append(next)\nvisited[next] = 1\ncounts[next] += counts[node]\n\nprint(*counts[1:])\n\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02616/s926302628.py",
  "f2_idx": "./Project_CodeNet_Python800/p02936/s224564215.py",
  "response": "No"
 },
 {
  "f1": "a,b,c,d,e=map(int,input().split())\nprint(15-(a+b+c+d+e))",
  "f2": "\ndef s0():return input()\ndef s1():return input().split()\ndef s2(n):return [input() for x in range(n)]\ndef s3(n):return [input().split() for _ in range(n)]\ndef s4(n):return [[x for x in s] for s in s2(n)]\ndef n0():return int(input())\ndef n1():return [int(x) for x in input().split()]\ndef n2(n):return [int(input()) for _ in range(n)]\ndef n3(n):return [[int(x) for x in input().split()] for _ in range(n)]\ndef t3(n):return [tuple(int(x) for x in input().split()) for _ in range(n)]\ndef p0(b,yes=\"Yes\",no=\"No\"): print(yes if b else no)\n# from sys import setrecursionlimit\n# setrecursionlimit(1000000)\n# from collections import Counter,deque,defaultdict\n# import itertools\n# import math\n# import networkx as nx\n# from bisect import bisect_left,bisect_right\nfrom heapq import heapify,heappush,heappop\nn,m=n1()\nA=n1()\nBC=t3(m)\n\nheapify(A)\nBC.sort(key=lambda x:-x[1])\n\nD=[]\nfor b,c in BC:\nD.extend([c]*b)\nif len(D)>=n:\nbreak\nD=D[:n]\n\n\nfor d in D:\na=heappop(A)\nif a>=d:\nheappush(A,a)\nbreak;\nelse:\nheappush(A,d)\n\nprint(sum(A))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02639/s604501744.py",
  "f2_idx": "./Project_CodeNet_Python800/p03038/s184114924.py",
  "response": "No"
 },
 {
  "f1": "x=sorted(list(input()))\ny=sorted(list(input()),reverse=True)\na=\"\"\nb=\"\"\nfor p in x:\na+=p\nfor q in y:\nb+=q\nif a<b:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "f2": "n, m = map(int, input().split())\nikeru = [[] for _ in range(n)]\nfor i in range(m):\na, b = map(int, input().split())\nikeru[a - 1].append(b - 1)\nikeru[b - 1].append(a - 1)\n\nfukasa = [10 ** 18 for _ in range(n)]\nkaisuu = 0\nsettansaku = set([])\nsetmada = set([0])\nkouho = 1\n\nwhile kouho != 0:\nkaisuu += 1\nfor i in list(setmada):\nsettansaku.add(i)\nsetmada.remove(i)\nkouho -= 1\nfor k in ikeru[i]:\nif not k in setmada:\nif not k in settansaku:\nsetmada.add(k)\nkouho += 1\nfukasa[k] = kaisuu\n\nif fukasa[n-1] <= 2:\nprint(\"POSSIBLE\")\nelse:\nprint(\"IMPOSSIBLE\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03486/s417344210.py",
  "f2_idx": "./Project_CodeNet_Python800/p03645/s730469500.py",
  "response": "No"
 },
 {
  "f1": "n,m,d = map(int,input().split())\na = n if d == 0 else 2*(n-d)\nprint(a/(n**2)*(m-1))",
  "f2": "n = int(input())\nif n % 1000 % 111 == 0 or n // 10 % 111 == 0:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03304/s012988604.py",
  "f2_idx": "./Project_CodeNet_Python800/p03543/s716096071.py",
  "response": "No"
 },
 {
  "f1": "s = input()\nw = int(input())\nans = ''\nfor i in range(0 ,len(s) , w):\nans += s[i:i+w][0]\n\nprint(ans)",
  "f2": "print({\n'H H': 'H',\n'H D': 'D',\n'D H': 'D',\n'D D': 'H',\n}[input()])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03303/s877602804.py",
  "f2_idx": "./Project_CodeNet_Python800/p03777/s487497373.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\na = list(map(int,input().split()))\na=sorted(a)\nprint(sum(a[-n*3+n:-1:2]))",
  "f2": "s = input()\nK = int(input())\nN = len(s)\nsets = set()\nfor l in range(1, K+1):\nfor i in range(N-l+1):\nsubs = s[i:i+l]\nsets.add(subs)\n\nsets = sorted(list(sets))\nprint(sets[K-1])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03767/s553544104.py",
  "f2_idx": "./Project_CodeNet_Python800/p03353/s693806744.py",
  "response": "No"
 },
 {
  "f1": "N=int(input())\nx0,y0=0,0\nt0=0\nfor n in range(N):\nt,x,y=map(int,input().split())\nif abs(x-x0)+abs(y-y0) > t-t0:\nprint('No')\nexit(0)\nif (abs(x-x0)+abs(y-y0))%2 != (t-t0)%2:\nprint('No')\nexit(0)\nt0,x0,y0=t,x,y\nprint('Yes')",
  "f2": "import numpy as np\nfrom queue import Queue\nn,k = map(int,input().split())\nA = [a-1 for a in list(map(int,input().split()))]\nA = np.cumsum(+np.array([0]+A))%k\n\ndic = {}\nans = 0\nQ = Queue()\nfor a in A:\nQ.put(a)\nif a in dic:\nans += dic[a]\ndic[a] += 1\nelse:\ndic[a] = 1\nif Q.qsize() == k:\nq = Q.get()\ndic[q] -= 1\n# print(dic)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03457/s547234220.py",
  "f2_idx": "./Project_CodeNet_Python800/p02851/s440464862.py",
  "response": "No"
 },
 {
  "f1": "def main():\nN, A = int(input()), list(map(int, input().split()))\n\nans = 0\nfor idx in range(1, N):\nif A[idx] < A[idx - 1]:\ndiff = A[idx - 1] - A[idx]\nans += diff\nA[idx] = A[idx - 1]\n\nprint('{}'.format(ans))\n\nif __name__ == '__main__':\nmain()",
  "f2": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\ndef main():\nA, B, C = map(int, input().split())\nK = int(input())\n\nfor _ in range(K):\nif not A < B:\nB *= 2\nelif not B < C:\nC *= 2\nif A < B < C:\nprint(\"Yes\")\nelse:\nprint(\"No\")\n\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02578/s198723061.py",
  "f2_idx": "./Project_CodeNet_Python800/p02601/s552272812.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\na=list(map(int,input().split()))\nb=[a[0]]\nfor i in range(1,n):\nb.append(b[-1]+a[i])\ns=sum(a)\nans=10**20\nfor i in range(n-1):\nans=min(ans,abs(s-2*b[i]))\nprint(ans)",
  "f2": "import sys\ninput = sys.stdin.readline\n\n\ndef main():\nn = int(input())\nitems = {input().rstrip() for _ in range(n)}\nprint(len(items))\n\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03659/s353646228.py",
  "f2_idx": "./Project_CodeNet_Python800/p02701/s600706074.py",
  "response": "No"
 },
 {
  "f1": "w, a, b = list(map(int, input().split()))\nans = 0\n\nif a + w < b:\nans = b - (a + w)\nelif b + w < a:\nans = a - (b + w)\nelse:\nans = 0\n\nprint(ans)",
  "f2": "\nfrom collections import defaultdict\n\nN,C = map(int, input().split())\nD = [tuple(map(int, input().split())) for _ in range(C)]\ngrid = [tuple(map(int, input().split())) for _ in range(N)]\n\n\n# mod_x : (i+j)%3がxで、keyは色、valueは個数\nmod_0 = defaultdict(int)\nmod_1 = defaultdict(int)\nmod_2 = defaultdict(int)\n\n\nfor i in range(N):\nfor j in range(N):\nif (i+1 + j+1) % 3 == 0:\nmod_0[grid[i][j]] += 1\nelif (i+1 + j+1) % 3 == 1:\nmod_1[grid[i][j]] += 1\nelif (i+1 + j+1) % 3 == 2:\nmod_2[grid[i][j]] += 1\n\nans = float(\"inf\")\n# mod_0のマスにあるものをiに、mod_1のものをjに、mod_2のものをkに塗り替える\nfor i in range(C):\nfor j in range(C):\nif i == j: continue\nfor k in range(C):\nif k in [i,j]:\ncontinue\n\ntotal = 0\nfor prev,cnt in mod_0.items():\ntotal += D[prev-1][i] * cnt\nfor prev,cnt in mod_1.items():\ntotal += D[prev-1][j] * cnt\nfor prev,cnt in mod_2.items():\ntotal += D[prev-1][k] * cnt\n\nans = min(ans, total)\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03778/s706657204.py",
  "f2_idx": "./Project_CodeNet_Python800/p03330/s938639681.py",
  "response": "No"
 },
 {
  "f1": "r,d,x=map(int,input().split())\nkoke=[0]*11\nkoke[0]=x\nfor i in range(10):\nkoke[i+1]=r*koke[i]-d\nfor i in range (10):\nprint(koke[i+1])",
  "f2": "def solve():\nN, M, K = map(int, input().split())\nmod = 10**9+7\ncom = 1\nfor i in range(1,K-1):\ncom *= N*M-1-i\ncom *= pow(i,mod-2,mod)\ncom %= mod\nans = com*M*N*(M*N-1)*(M+N)//6\nreturn ans%mod\nprint(solve())",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03036/s635040062.py",
  "f2_idx": "./Project_CodeNet_Python800/p03039/s667990490.py",
  "response": "No"
 },
 {
  "f1": "from math import ceil,floor,factorial,gcd,sqrt,log2,cos,sin,tan,acos,asin,atan,degrees,radians,pi,inf\nfrom itertools import accumulate,groupby,permutations,combinations,product,combinations_with_replacement\nfrom collections import deque,defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom operator import itemgetter\nfrom heapq import heapify,heappop,heappush\nfrom queue import Queue,LifoQueue,PriorityQueue\nfrom copy import deepcopy\nfrom time import time\nimport string\nimport sys\nsys.setrecursionlimit(10 ** 7)\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return map(int,input().split())\ndef LIST()  : return list(MAP())\n\nn = INT()\na = [[0]*10 for i in range(10)]\n\nfor i in range(1, n+1):\nif i % 10 != 0:\na[int(str(i)[0])][int(str(i)[-1])] += 1\n\nans = 0\nfor i in range(10):\nfor j in range(10):\nans += a[i][j]*a[j][i]\n\nprint(ans)",
  "f2": "# -*- coding: utf-8 -*-\nN = int(input())\nA = list(map(int, input().split()))\n\nmoney = 1000\nstock = 0\n\ni = 0\nfor i in range(N):\n# 前日よりも株価が上がっている場合は、株を全て売却\nif i != 0 and A[i] > A[i-1]:\nmoney += stock * A[i]\nstock = 0\n\n# 翌日に株価が上がる場合は、所持金を全て株に変える\nif i != (N-1) and A[i+1] > A[i]:\nstock += money // A[i]\nmoney = money % A[i]\nprint(money)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02792/s252807196.py",
  "f2_idx": "./Project_CodeNet_Python800/p02603/s463973100.py",
  "response": "No"
 },
 {
  "f1": "def main():\nK = int(input())\nmod = 7 % K\nmods = set([mod])\nif mod == 0:\nprint(1)\nexit()\nans = 1\nwhile True:\nans += 1\nmod = (mod * 10 + 7) % K\nif mod == 0:\nprint(ans)\nexit()\nelif mod in mods:\nprint(-1)\nexit()\nelse:\nmods.add(mod)\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "n = input()\nx = map(int, input().split())\ny = map(int, input().split())\n\nx_y = [abs(xi - yi) for xi, yi in zip(x, y)]\nfor p in range(1, 4):\nprint(sum(i ** p for i in x_y) ** (1 / p))\nprint(max(x_y))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02596/s632969936.py",
  "f2_idx": "./Project_CodeNet_Python800/p02382/s415621015.py",
  "response": "No"
 },
 {
  "f1": "from sys import stdin,stdout\ndef INPUT():return list(int(i) for i in stdin.readline().split())\ndef inp():return stdin.readline()\ndef out(x):return stdout.write(x)\nimport math\nimport random\nJ=998244353\nfrom collections import deque\n########################################################\nn,x=INPUT()\nA=[]\nfor i in range(n):\nA.append(int(input()))\nA.sort()\nprint(n+(x-sum(A))//A[0])",
  "f2": "N, C = map(int, input().split())\naccu = [[0]*(10**5+10) for _ in range(C)]\nfor _ in range(N):\ns, t, c = map(int, input().split())\naccu[c-1][s] += 1\naccu[c-1][t+1] -= 1\nfor i in range(C):\nfor j in range(1, 10**5+10):\naccu[i][j] += accu[i][j-1]\nans = 0\nfor i in range(10**5+10):\ntmp = 0\nfor j in range(C):\ntmp += accu[j][i]>0\nans = max(ans, tmp)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03370/s738781241.py",
  "f2_idx": "./Project_CodeNet_Python800/p03504/s079132327.py",
  "response": "No"
 },
 {
  "f1": "T1, T2 = list(map(int, input().split()))\nA1, A2 = list(map(int, input().split()))\nB1, B2 = list(map(int, input().split()))\n\na, b = A1 * T1, A2 * T2\nc, d = B1 * T1, B2 * T2\n\nif a + b == c+ d:\nprint(\"infinity\")\nexit()\nif a + b < c+d:\na,b,c,d = c,d,a,b\nif a > c:\nprint(0)\nexit()\nelse:\nnum = 0\nif (c-a) % (a+b-c-d)  == 0:\nnum = 1\nprint((c-a-1) // (a+b-c-d) * 2+num+1)",
  "f2": "#E_Picking Goods\nR,C,K = map(int,input().split())\nA =     [[0  for j in range(C)] for i in range(R)]\nvarr = [[[0  for j in range(C)] for i in range(R)] for k in range(4)]\n\nfor inputk in range(K):\nr,c,v = map(int,input().split())\nA[r-1][c-1] = v\n\nfor i in range(R):\nfor j in range(C):\nfor k in range(2,-1,-1):\nif varr[k][i][j] >= 0:\nif  varr[k+1][i][j] < varr[k][i][j] + A[i][j]:\nvarr[k+1][i][j] = varr[k][i][j] + A[i][j]\nfor kk in range(0,4):\nif varr[kk][i][j] >= 0:\nif i +1 < R :\nif  varr[0][i + 1][j] < varr[kk][i][j]:\nvarr[0][i + 1][j] = varr[kk][i][j]\nif j +1 < C :\nif  varr[kk][i][j + 1] < varr[kk][i][j]:\nvarr[kk][i][j + 1] = varr[kk][i][j]\nans = 0\nfor k in range (4):\nif ans < varr[k][R-1][C-1]:\nans = varr[k][R-1][C-1]\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02846/s172132124.py",
  "f2_idx": "./Project_CodeNet_Python800/p02586/s059415620.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\nstart=[[[0 for i in range(10)] for j in range(3)] for k in range(4)]\nfor i in range(n):\nb,f,r,v=[int(i) for i in input().split()]\nstart[b-1][f-1][r-1]+=v\nfor i in range(4):\nfor j in range(3):\nfor k in range(10):\nprint(\" \",end=\"\")\nprint(start[i][j][k],end=\"\")\nprint()\nif i<=2:\nfor m in range(20):\nprint(\"#\",end=\"\")\nprint()",
  "f2": "def factorize(N):\nif N == 1: return {1:1}\nres = {}\nfor i in range(2, N):\nif i**2 > N: break\nif N % i != 0: continue\nnum = 0\nwhile N % i == 0:\nN = int(N/i)\nnum += 1\nres[i] = num\nif N>1: res[N] = 1\nreturn res\n\nA, B = map(int, input().split())\nresA = factorize(A)\nresB = factorize(B)\nres = set(resA.keys()) & set(resB.keys())\nans = len(res) if 1 in res else len(res)+1\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02409/s459672645.py",
  "f2_idx": "./Project_CodeNet_Python800/p02900/s938984002.py",
  "response": "No"
 },
 {
  "f1": "\nimport math\nfrom functools import reduce\n\n\ndef gcd(*numbers):\nreturn reduce(math.gcd, numbers)\n\n\ndef gcd_list(numbers):\nreturn reduce(math.gcd, numbers)\n\n\ndef eratosthenes(n):\nD = [0]*(n+1)\nfor i in range(2, n+1):\nif D[i] > 0:\ncontinue\nfor j in range(i, n+1, i):\nD[j] = i\nreturn D\n\n\nN = int(input())\nA = list(map(int, input().split()))\nD = eratosthenes(10**6+1)\n# D = eratosthenes(max(A))\ndic = {}\nfor i in A:\nwhile i != 1:\nif i in dic:\ndic[i] += 1\nelse:\ndic[i] = 1\ni //= D[i]\nisPairwise = True\nfor i in dic.items():\nif i[1] > 1:\nisPairwise = False\nbreak\n\n\ndef is_pairwise():\nused_primes = [False] * (10**6 + 1)\nfor a in A:\nwhile a > 1:\nprime = D[a]\nwhile a % prime == 0:\na //= prime\nif used_primes[prime]:\nreturn False\nused_primes[prime] = 1\nreturn True\n\n\n# if isPairwise:\nif is_pairwise():\nprint(\"pairwise coprime\")\nelif gcd_list(A) == 1:\nprint(\"setwise coprime\")\nelse:\nprint(\"not coprime\")",
  "f2": "H, W = [int(i) for i in input().split()]\nA = [[a for a in input()] for _ in range(H)]\n\ni = 0\nwhile i < H:\nj = 0\nwhile j < W and A[i][j] == '.':\nj += 1\nif j >= W:\nfor k in range(i, H - 1):\nfor j in range(W):\nA[k][j] = A[k + 1][j]\nH -= 1\nelse:\ni += 1\nj = 0\nwhile j < W:\ni = 0\nwhile i < H and A[i][j] == '.':\ni += 1\nif i >= H:\nfor k in range(j, W - 1):\nfor i in range(H):\nA[i][k] = A[i][k + 1]\nW -= 1\nelse:\nj += 1\nfor i in range(H):\nfor j in range(W):\nprint(A[i][j], end='')\nprint()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02574/s223363554.py",
  "f2_idx": "./Project_CodeNet_Python800/p03273/s738343401.py",
  "response": "No"
 },
 {
  "f1": "import sys\ndef ISI(): return map(int, sys.stdin.readline().rstrip().split())\n\na, b=ISI()\nif a>9 or b>9:print(-1)\nelse:print(a*b)",
  "f2": "a,b,c=map(int,input().split())\ns=a+b+c\nprint(max(a,b,c)*10+s-max(a,b,c))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02879/s311899432.py",
  "f2_idx": "./Project_CodeNet_Python800/p03250/s059229516.py",
  "response": "No"
 },
 {
  "f1": "def main():\nX,Y = map(int,input().split())\nfor x in range(101):\nfor y in range(101):\nif x+y==X and 2*x+4*y==Y:\nreturn True\nreturn False\n\nif __name__ == '__main__':\nprint(\"Yes\" if main() else \"No\")",
  "f2": "def check(s,t):\nfor i in range(s,s+M):\nfor j in range(t,t+M):\nif A[i][j] != B[i-s][j-t]:\nreturn False\nreturn True\n\n\nN,M = map(int,input().split())\n\nA = [list(input()) for _ in range(N)]\nB = [list(input()) for _ in range(M)]\n\nfor i in range(N-M+1):\nfor j in range(N-M+1):\nif check(i,j):\nprint(\"Yes\")\nexit()\n\nprint(\"No\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02640/s371283824.py",
  "f2_idx": "./Project_CodeNet_Python800/p03804/s607046410.py",
  "response": "No"
 },
 {
  "f1": "s=str(input())\nt=str(input())\n\nn=len(s)\ncount=0\n\nfor i in range(n):\nif s[i]==t[i]:\ncount+=1\nelse:\ncontinue\n\nprint(n-count)",
  "f2": "from collections import deque\nN = int(input())\nA = [int(input()) for _ in range(N)]\n\nA.sort()\nq = deque([A[0]])\ni = 1\nj = N-1\nwhile i <= j:\ntemp = max(abs(A[i]-q[0]), abs(A[j]-q[0]), abs(A[i]-q[-1]), abs(A[j]-q[-1]))\nif temp == abs(A[i]-q[0]):\nq.appendleft(A[i])\ni += 1\nelif temp == abs(A[j]-q[0]):\nq.appendleft(A[j])\nj -= 1\nelif temp == abs(A[i]-q[-1]):\nq.append(A[i])\ni += 1\nelse:\nq.append(A[j])\nj -= 1\nL = list(q)\nans = 0\nfor i in range(N-1):\nans += abs(L[i+1]-L[i])\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02622/s182882322.py",
  "f2_idx": "./Project_CodeNet_Python800/p03229/s931860545.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\na, v = map(int, input().split())\nb, w = map(int, input().split())\nt = int(input())\n\nif v <= w:\nprint('NO')\nsys.exit()\n\na_b_dist = abs(a-b)\nv_w_dist = abs(v-w)\n\nif v_w_dist * t < a_b_dist:\nprint('NO')\nsys.exit()\n\nprint('YES')",
  "f2": "import itertools\n\nn = int(input())\nd = [int(num) for num in input().split()]\n\nd.sort(reverse=True)\n\nresult = []\nfor conb in itertools.combinations(d, 2):\nresult.append(list(conb))\n\nanswer = 0\nfor i in result:\nanswer += i[0]*i[1]\n\nprint(answer)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02646/s281313207.py",
  "f2_idx": "./Project_CodeNet_Python800/p02886/s739974556.py",
  "response": "No"
 },
 {
  "f1": "x = raw_input()\nx = int(x)\nx = x ** 3\nprint x",
  "f2": "n,m = [int(x) for x in input().split()]\nprint(n-m+1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02388/s109265992.py",
  "f2_idx": "./Project_CodeNet_Python800/p03272/s680844624.py",
  "response": "No"
 },
 {
  "f1": "a,b,x = map(int,input().split())\n\nB = b//x\nA = (a-1)//x\n\nprint(B-A)",
  "f2": "if __name__ == \"__main__\":\nn = int(input())\nF = [1, 1]\nfor i in range(n-1):\nF.append(F[-2]+F[-1])\nprint(F[n])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03861/s005795735.py",
  "f2_idx": "./Project_CodeNet_Python800/p02233/s807351212.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\nG=[[] for i in range(n)]\nfor i in range(n-1):\na,b=map(int,input().split())\nG[a-1].append(b-1)\nG[b-1].append(a-1)\n\nfrom collections import deque\ndist_f=[-1]*n\ndist_f[0]=0\nq=deque()\nq.append(0)\nwhile q:\ncur=q.popleft()\nfor nx in G[cur]:\nif dist_f[nx]==-1:\ndist_f[nx]=dist_f[cur]+1\nq.append(nx)\n\ndist_s=[-1]*n\ndist_s[n-1]=0\nq=deque()\nq.append(n-1)\nwhile q:\ncur=q.popleft()\nfor nx in G[cur]:\nif dist_s[nx]==-1:\ndist_s[nx]=dist_s[cur]+1\nq.append(nx)\nfenec,sunuke=0,0\nfor i in range(n):\nif dist_f[i]<=dist_s[i]:\nfenec+=1\nelse:\nsunuke+=1\nprint(\"Fennec\") if fenec>sunuke else print(\"Snuke\")",
  "f2": "s = \"hi\"\nS = input()\nflag = False\nfor i in range(5):\nif S==s:\nflag=True\nbreak\ns = s+\"hi\"\nif flag:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03660/s385094932.py",
  "f2_idx": "./Project_CodeNet_Python800/p02747/s199020349.py",
  "response": "No"
 },
 {
  "f1": "#!/usr/bin/env python3\n\nimport sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nsys.setrecursionlimit(10 ** 7)\n\nN, H = map(int, input().split())\nA = []\nB = []\nfor i in range(N):\na, b = map(int, input().split())\nA.append(a)\nB.append(b)\n\nmax_a = max(A)\nB.sort(reverse=True)\n\n# is_OK(x) を x 回の攻撃で H ポイント与えられれば1, そうでなければ0を返す関数とする\n# 二分探索\n\n\ndef is_OK(x):\ncount = 0\ndamage = 0\nfor n in range(N):\nif B[n] > max_a and count < x:\ncount += 1\ndamage += B[n]\ndamage += (x-count) * max_a\nif H - damage <= 0:\nreturn True\nelse:\nreturn False\n\n\nng, ok = 0, 10**9+1\nwhile ok - ng > 1:\nmid = ng + (ok - ng) // 2\nif is_OK(mid):\nok = mid\nelse:\nng = mid\n\nprint(ok)",
  "f2": "S = input()\n\nc = 0\nm = 0\nacgt = ['A', 'C', 'G', 'T']\nfor s in S:\nif s in acgt:\nc += 1\nif c > m:\nm = c\nelse:\nc = 0\n\nprint(m)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03472/s374158709.py",
  "f2_idx": "./Project_CodeNet_Python800/p03086/s363642393.py",
  "response": "No"
 },
 {
  "f1": "from collections import defaultdict\nfrom copy import deepcopy\nimport sys\n\n\ndef input(): return sys.stdin.readline().strip()\ndef I(): return int(input())\ndef LI(): return list(map(int, input().split()))\n\n\nclass UnionFind():\ndef __init__(self, n):\nself.n = n\n# 各要素の親要素 親は -(その集合の要素数)\nself.parents = [-1] * n\n\ndef find(self, x):\n'''要素 x の親要素の番号を返す'''\nif self.parents[x] < 0:\nreturn x\nelse:\nself.parents[x] = self.find(self.parents[x])\nreturn self.parents[x]\n\ndef union(self, x, y):\n'''要素 x が属する集合と要素 y が属する集合を併合する'''\nx = self.find(x)\ny = self.find(y)\n\nif x == y:\nreturn\n\nif self.parents[x] > self.parents[y]:\nx, y = y, x\n\nself.parents[x] += self.parents[y]\nself.parents[y] = x\n\ndef size(self, x):\n'''要素 x が属する集合の要素数を返す'''\nreturn -self.parents[self.find(x)]\n\ndef same(self, x, y):\n'''要素 x と要素 y が同じ集合に属するかを返す'''\nreturn self.find(x) == self.find(y)\n\ndef members(self, x):\n'''要素 x が属する集合の要素をリストを返す'''\nroot = self.find(x)\nreturn [i for i in range(self.n) if self.find(i) == root]\n\ndef roots(self):\nreturn [i for i, x in enumerate(self.parents) if x < 0]\n\ndef group_count(self):\nreturn len(self.roots())\n\ndef all_group_members(self):\nreturn {r: self.members(r) for r in self.roots()}\n\ndef __str__(self):\nreturn '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\n\ndef main():\nn, m = LI()\nedges = [LI() for _ in range(m)]\nans = 0\nfor remove_u, remove_v in edges:\nuf = UnionFind(n)\nfor u, v in edges:\nif u == remove_u and v == remove_v:\ncontinue\nu, v = u - 1, v - 1\nuf.union(u, v)\nif len(uf.roots()) > 1:\nans += 1\nprint(ans)\n\n\nmain()",
  "f2": "a,b = map(int,input().split())\nprint(\"{0} {1} {2:.5f}\".format((a//b),(a%b),(a/b)))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03575/s942708543.py",
  "f2_idx": "./Project_CodeNet_Python800/p02399/s375540324.py",
  "response": "No"
 },
 {
  "f1": "a,b=map(int,input().split())\nA=[]\nfor i in range(1,1000):\nA.append((i*(i+1))//2)\n\nfor j in range(5*(10**6)):\nif ((a+j) in A) and ((b+j) in A):\nif A.index(a+j)+1==A.index(b+j):\nprint(j)\nexit()",
  "f2": "# import itertools\n# import math\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n\nN = int(input())\n# S = input()\n# n, *a = map(int, open(0))\n# N, M = map(int, input().split())\nA = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# tree = [[] for _ in range(N + 1)]\n# B_C = [list(map(int,input().split())) for _ in range(M)]\n# S = input()\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A = np.array(A)\n# cum_A = np.cumsum(A)\n# cum_A = np.insert(cum_A, 0, 0)\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + l[1]\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\n# def factorization(n):\n#     arr = []\n#     temp = n\n#     for i in range(2, int(-(-n**0.5//1))+1):\n#         if temp%i==0:\n#             cnt=0\n#             while temp%i==0:\n#                 cnt+=1\n#                 temp //= i\n#             arr.append([i, cnt])\n#     if temp!=1:\n#         arr.append([temp, 1])\n#     if arr==[]:\n#         arr.append([n, 1])\n#     return arr\n\nnum = 1\nfor i in A:\nif i == num:\nnum += 1\nif num == 1:\nprint(-1)\nelse:\nprint(N - (num - 1))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03328/s356656341.py",
  "f2_idx": "./Project_CodeNet_Python800/p02832/s955843106.py",
  "response": "No"
 },
 {
  "f1": "k=int(input())\na=list(map(int,input().split()))\na.reverse()\nd=[2,2]\nf=True\nfor i in a:\nd[0]=((d[0]-1)//i+1)*i\nd[1]=d[1]//i*i+i-1\nif d[0]>d[1]:\nf=False\nif f:\nprint(d[0],d[1])\nelse:\nprint(-1)",
  "f2": "from copy import *\n\nN=int(input())\nX=list(map(int,input().split()))\nY=deepcopy(X)\nY.sort()\nmid1=Y[N//2-1]\nmid2=Y[N//2]\nfor i in range(N):\nif X[i]<=mid1:\nprint(mid2)\nelse:\nprint(mid1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03464/s644809262.py",
  "f2_idx": "./Project_CodeNet_Python800/p03379/s815838198.py",
  "response": "No"
 },
 {
  "f1": "x = input() #文字列を読み込む\nn = (int(x)**3)\nprint(n)",
  "f2": "import fractions\nn=int(input())\nA=list(map(int,input().split()))\ngd=1\ntmp=A[0]\nfor i in range(n-1):\ngd=fractions.gcd(A[i+1],A[i])\ntmp*=A[i+1]\nlcm=tmp//gd\nlcm-=1\nans=0\nfor a in A:\nans+=lcm%a\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02388/s936890257.py",
  "f2_idx": "./Project_CodeNet_Python800/p03294/s527867545.py",
  "response": "No"
 },
 {
  "f1": "n,k = list(map(int, input().split()))\nab = sorted([tuple(map(int, input().split())) for _ in range(n)])\nA,B = list(zip(*ab))\n\nfrom itertools import accumulate\nimport bisect\nprint(A[bisect.bisect_left(list(accumulate(B)), k)])",
  "f2": "import sys\nimport os\nimport math\nimport bisect\nimport itertools\nimport collections\nimport heapq\nimport queue\nimport array\n\n# 時々使う\n# from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall\n# from decimal import Decimal\n# from collections import defaultdict, deque\n\n# 再帰の制限設定\nsys.setrecursionlimit(10000000)\n\n\ndef ii(): return int(sys.stdin.buffer.readline().rstrip())\ndef il(): return list(map(int, sys.stdin.buffer.readline().split()))\ndef fl(): return list(map(float, sys.stdin.buffer.readline().split()))\ndef iln(n): return [int(sys.stdin.buffer.readline().rstrip())\nfor _ in range(n)]\n\n\ndef iss(): return sys.stdin.buffer.readline().decode().rstrip()\ndef sl(): return list(map(str, sys.stdin.buffer.readline().decode().split()))\ndef isn(n): return [sys.stdin.buffer.readline().decode().rstrip()\nfor _ in range(n)]\n\n\ndef lcm(x, y): return (x * y) // math.gcd(x, y)\n\n\nMOD = 10 ** 9 + 7\nINF = float('inf')\n\n\ndef main():\nif os.getenv(\"LOCAL\"):\nsys.stdin = open(\"input.txt\", \"r\")\n\nS = iss()\nK = ii()\n\nsubstring = set()\nfor i in range(len(S)):\nfor j in range(i+1, i+K+1):\nsubstring.add(S[i:j])\nret = sorted(list(substring))\nprint(ret[K-1])\n\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03721/s489757312.py",
  "f2_idx": "./Project_CodeNet_Python800/p03353/s731591466.py",
  "response": "No"
 },
 {
  "f1": "a,b=map(int,input().split())\nif a-2*b>=0:\nprint(a-2*b)\nelse:\nprint(\"0\")",
  "f2": "import sys\n\nX = int(input())\na = 100\nd = 0\nwhile(a<X):\na = a * 101 // 100\nd += 1\n\nprint(d)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02885/s403820387.py",
  "f2_idx": "./Project_CodeNet_Python800/p02694/s245005848.py",
  "response": "No"
 },
 {
  "f1": "n, a = eval(\"int(input()),\" * 2)\nprint(n ** 2 - a)",
  "f2": "import sys,queue,math,copy,itertools,bisect,collections,heapq\n\ndef main():\nsys.setrecursionlimit(10**7)\nINF = 10**18\nMOD = 10**9 + 7\nLI = lambda : [int(x) for x in sys.stdin.readline().split()]\nNI = lambda : int(sys.stdin.readline())\nSI = lambda : sys.stdin.readline().rstrip()\n\nL = SI()\nb = 1\nans = 1\nfor s in L[-1::-1]:\nif s == '1':\nans = (ans*2 + b) % MOD\nb = (b * 3) % MOD\nprint(ans)\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03597/s148666459.py",
  "f2_idx": "./Project_CodeNet_Python800/p03015/s766044153.py",
  "response": "No"
 },
 {
  "f1": "K = int(input())\nS = input()\nn = len(S)\nMOD = 10 ** 9 + 7\nMAX = 2 * 10 ** 6 + 5\n\nfac = [0] * MAX\nfinv = [0] * MAX\ninv = [0] * MAX\nfac[0] = fac[1] = 1\nfinv[0] = finv[1] = 1\ninv[1] = 1\nfor i in range(2, MAX):\nfac[i] = fac[i - 1] * i % MOD\ninv[i] = MOD - inv[MOD % i] * (MOD // i) % MOD\nfinv[i] = finv[i - 1] * inv[i] % MOD\n\ndef nCk(n, k):\nif n < k:\nreturn 0\nif n < 0 or k < 0:\nreturn 0\nreturn fac[n] * (finv[k] * finv[n - k] % MOD) % MOD\n\nA = 0\nfor i in range(K + 1):\nA1 = pow(26, K - i, MOD)\nA2 = (pow(25, i, MOD) * nCk(i + n - 1, n - 1)) % MOD\nA = (A + (A1 * A2) % MOD) % MOD\n\nprint(A % MOD)",
  "f2": "def sol():\nn=int(input())+1\na=[int(i) for i in input().split()]+[2**21-1]\nans=0\ni=j=w=x=0\nwhile i<n-1:\nwhile j<n and w==x:\nw+=a[j]\nx^=a[j]\nj+=1\nans+=(j-i-1)\nw-=a[i]\nx^=a[i]\ni+=1\nprint(ans)\n\nif __name__==\"__main__\":\nsol()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02632/s458680692.py",
  "f2_idx": "./Project_CodeNet_Python800/p03340/s630824280.py",
  "response": "No"
 },
 {
  "f1": "N = [1, 5, 2, 3, 0, 4]\nS = [4, 0, 2, 3, 5, 1]\nE = [3, 1, 0, 5, 4, 2]\nW = [2, 1, 5, 0, 4, 3]\ndice = [dice for dice in input().split()]\ndice_t = [\"\" for dice_t in range(6)]\ndirection = input()\nfor d in direction:\nif d == \"N\":\nfor i in range(6):\ndice_t[i] = dice[N[i]]\nelif d == \"S\":\nfor i in range(6):\ndice_t[i] = dice[S[i]]\nelif d == \"E\":\nfor i in range(6):\ndice_t[i] = dice[E[i]]\nelse:\nfor i in range(6):\ndice_t[i] = dice[W[i]]\nfor i in range(6):\ndice[i] = dice_t[i]\n\nprint(dice[0])",
  "f2": "N = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i, ai in enumerate(a):\nai_tmp = ai\nwhile ai_tmp % 2 == 0:\nans += 1\nai_tmp >>= 1\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02383/s725180486.py",
  "f2_idx": "./Project_CodeNet_Python800/p03325/s898605650.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\n\nal = list(map(int,input().split()))\n\neven = 0\nodd = 0\n\nfor a in al:\nif a % 2 == 0:\neven += 1\nelse:\nodd += 1\n\nif even == 0 or odd == 0:\nprint(\"YES\")\nelif (odd%2) == 0:\nprint(\"YES\")\nelse:\nprint(\"NO\")\n",
  "f2": "def main():\nimport sys\ninput = sys.stdin.readline\nN = int(input())\nA = [list(map(int,input().split())) for i in range(N)]\n\nimport copy\nD = [[[0,1] for i in range(N)] for j in range(N)]\nfor i in range(N):\nfor j in range(N):\nD[i][j][0] = A[i][j]\nflag = 0\n\nfor k in range(N):\nfor i in range(N):\nfor j in range(N):\nif k != i and k != j:\nif D[i][j][0] > D[i][k][0] + D[k][j][0]:\nflag = 1\nelif D[i][j][0] == D[i][k][0] + D[k][j][0]:\nD[i][j][1] += 1\nans = 0\nfor i in range(N):\nfor j in range(i+1,N):\nif D[i][j][1] == 1:\nans += D[i][j][0]\nif flag == 1:\nprint(-1)\nelse:\nprint(ans)\n\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03807/s579593474.py",
  "f2_idx": "./Project_CodeNet_Python800/p03600/s007135757.py",
  "response": "No"
 },
 {
  "f1": "x = list(map(int, input().split()))\nif 0 in x:\nans = x.index(0) + 1\nprint(ans)",
  "f2": "N,K=map(int,input().split())\nH=list(map(int,input().split()))\nP=0\nfor i in range(N):\nif K<=H[i]:\nP+=1\nprint(P)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02639/s253522071.py",
  "f2_idx": "./Project_CodeNet_Python800/p02898/s036011180.py",
  "response": "No"
 },
 {
  "f1": "N,T = list(map(int,input().split()))\n\nA =[list(map(int,input().split())) for i in range(N)]\n\nA.sort(key = lambda x:x[0])\n\nINF = float(\"inf\")\n\nDP = [[-INF]*(T+3001) for i in range(N+1)]\n\nDP[0][0] = 0\n\nfor i in range(N):\nfor j in range(T):\nDP[i+1][j] = max(DP[i+1][j],DP[i][j])\nDP[i+1][j+A[i][0]] = max(DP[i+1][j+A[i][0]],DP[i][j+A[i][0]],DP[i][j]+A[i][1])\nscore = 0\nfor i in range(N):\nfor j in range(T+A[i][0]):\nscore = DP[i+1][j] if DP[i+1][j]>score else score\n\nprint(score)",
  "f2": "A, B, C = map(int,input().split())\n\nx = B // A\nif x < C:\nprint(x)\nelse:\nprint(C)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02863/s468023509.py",
  "f2_idx": "./Project_CodeNet_Python800/p03105/s465852765.py",
  "response": "No"
 },
 {
  "f1": "a,b=map(int,input().split())\nd=a+b\ns=a-b\nm=a*b\n\nprint(max(d,s,m))",
  "f2": "def actual(s):\nreturn s[0::2]\n\ns = input()\n\nprint(actual(s))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03337/s980949291.py",
  "f2_idx": "./Project_CodeNet_Python800/p03610/s844249334.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nW = [input() for _ in range(N)]\n\nres = True\n\ndic = {}\n\nlast = \"\"\n\nfor w in W:\nif last != \"\":\nif w in dic:\nres = False\nif not w[0] == last:\nres = False\n\ndic[w] = 1\nlast = w[-1]\n\n\nif res:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "f2": "def erat(M):\np = [1] * M\np[0] = p[1] = 0\nfor x in range(2, int((M - 1)**.5) + 1):\nif p[x]:\nfor y in range(x*x, M, x):\np[y] = 0\nreturn p\nINF = 10**5 + 1\np = erat(INF)\nq = [0] * INF\nfrom itertools import*\nfor i in range(INF):\nq[i] = i%2 * p[i] * p[-~i//2]\n*a, = accumulate([0] + q)\nfor _ in [None] * int(input()):\nl, r = map(int, input().split())\nprint(a[-~r] - a[l])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03261/s185017981.py",
  "f2_idx": "./Project_CodeNet_Python800/p03476/s831468484.py",
  "response": "No"
 },
 {
  "f1": "import sys\nh,w=map(int,input().split())\na=[]\nfor i in range(h):\na.append(input())\nfor i in range(h):\nfor j in range(w):\nif a[i][j]=='#':\nflag=1\nif i>0 and a[i-1][j]=='#':\nflag=0\nif j>0 and a[i][j-1]=='#':\nflag=0\nif i<h-1 and a[i+1][j]=='#':\nflag=0\nif j<w-1 and a[i][j+1]=='#':\nflag=0\nif flag==1:\nprint('No')\nsys.exit()\nprint('Yes')",
  "f2": "from math import gcd\n\ndef solve():\nn, m = map(int, input().split())\nd = m // n\np = m % n\nres = max(1, gcd(d, d + p))\nif p == 0:\nprint(res)\nexit()\nwhile d > res:\nd -= 1\np += n\nif p % d == 0:\nres = max(res, d)\nprint(res)\n\n\nsolve()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03361/s737172392.py",
  "f2_idx": "./Project_CodeNet_Python800/p03241/s645219684.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\nt = list(map(int, input().split()))\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\nif max(t) != max(a):\nprint(0)\nexit()\n\n\ndef f(li, rev):\nif rev:\nli = li[::-1]\n\ncnts = [0] * n\ncands = [0] * n\nmx = 0\ncnt = 0\nfor i, e in enumerate(li):\nif e > mx:\ncnts[i] = 1\ncands[i] = e\ncnt = e\nmx = e\nelse:\ncnts[i] = cnt\n\nif rev:\ncnts = cnts[::-1]\ncands = cands[::-1]\n\nreturn cnts, cands\n\n\nt_cnt, t_cand = f(t, False)\na_cnt, a_cand = f(a, True)\n\nfor e1, e2 in zip(a, t_cand):\nif e2 > e1:\nprint(0)\nexit()\n\nans = 1\nfor e1, e2 in zip(t_cnt, a_cnt):\nans *= min(e1, e2)\nans %= mod\n\nprint(ans)",
  "f2": "def main():\ns = list(input())\n\nfor i in range(1,len(s)//2):\nt=s[:-2*i]\nhalf=len(t)//2\nif t[:half]==t[half:]:\nprint(len(t))\nbreak\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03959/s831810375.py",
  "f2_idx": "./Project_CodeNet_Python800/p03672/s295119523.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nLR = [list(map(int, input().split())) for _ in range(N)]\nans = 0\nfor i in range(N):\nans += LR[i][1] - LR[i][0] + 1\nprint(ans)",
  "f2": "K,T,*a = map(int, open(0).read().split())\na.sort()\nprint(max(0,a[-1]-sum(a[:T-1])-1))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03606/s279901427.py",
  "f2_idx": "./Project_CodeNet_Python800/p03958/s242042963.py",
  "response": "No"
 },
 {
  "f1": "from functools import lru_cache\nimport math\n\ndef main():\nn=int(input())\na=list(map(int,input().split()))\nx=set()\ny=a[0]\npair=True\nfor i in a:\nif pair:\np=set(prime_factorize(i))\nif len(x&p)>0:\npair=False\nx|=p\ny=math.gcd(y, i)\nif pair:\nprint(\"pairwise coprime\")\nelif y==1:\nprint(\"setwise coprime\")\nelse:\nprint(\"not coprime\")\n\n# 素数リスト（エラトステネスの篩）\n@lru_cache(maxsize=None)\ndef primes(n:int) -> list:\n'''n以下の全素数をlistで返す'''\nis_prime = [True] * (n + 1)\nis_prime[0] = False\nis_prime[1] = False\nfor i in range(2, int(n**0.5) + 1):\nif not is_prime[i]:\ncontinue\nfor j in range(i * 2, n + 1, i):\nis_prime[j] = False\nreturn [i for i in range(n + 1) if is_prime[i]]\n\n# 素数判定（単純な素数判定なら十分早い。大量にやる場合はX in primesがよさそう）\n@lru_cache(maxsize=None)\ndef is_prime(n: int) -> bool:\n'''引数nが素数であればTrue、そうでなければFalseを返す'''\nif n == 1:\nreturn False\nelif n == 2:\nreturn True\nelif n % 2 == 0:\nreturn False\n\nfor i in range(3, int(n**0.5)+1, 2):\nif n % i == 0:\nreturn False\nreturn True\n\n# 素因数分解\ndef prime_factorize(n: int) -> list:\n'''引数nの素因数分解結果のlistを返す。'''\narr = []\n# 2で割り続け奇数まで還元する\nwhile n % 2 == 0:\narr.append(2)\nn //= 2\n# sqrt(n)までの素数で試し割\nfor f in primes(int(n**0.5)):\nwhile n % f == 0:\narr.append(f)\nn //= f\nif n != 1:\narr.append(n)\nreturn arr\n\nif __name__ == \"__main__\":\nmain()",
  "f2": "n = int(input())\ntimeList = list(map(int, input().split()))\nm = int(input())\nargList = [list(map(int, input().split())) for _ in range(m)]\n\n#普通にやると\nres_time = sum(timeList)\n\nfor a in argList:\n\n#a[0]問目を解くのに　a[1]秒かかるよ\nprint(res_time - timeList[a[0]-1] + a[1])\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02574/s438182123.py",
  "f2_idx": "./Project_CodeNet_Python800/p03845/s374289560.py",
  "response": "No"
 },
 {
  "f1": "ABVW = [map(int, input().split()) for _ in range(2)]\nAB, VW = [list(i) for i in zip(*ABVW)]\nT = int(input())\n\nx = abs(AB[0] - AB[1])\ny = (VW[0] - VW[1])*T\nif x <= y:\nprint(\"YES\")\nelse:\nprint(\"NO\")",
  "f2": "string = raw_input()\nn = input()\n\nfor i in range(n):\ntmp = map(str, raw_input().split())\nif tmp[0] == \"print\":\nprint string[int(tmp[1]): int(tmp[2]) + 1]\nelif tmp[0] == \"reverse\":\ns = \"\"\nfor i in range(int(tmp[1])):\ns += string[i]\nfor i in range(int(tmp[2]) - int(tmp[1]) + 1):\ns += string[int(tmp[2]) - i]\nfor i in range (len(string) - int(tmp[2]) - 1):\ns += string[i + int(tmp[2]) + 1]\nstring = s\nelif tmp[0] == \"replace\":\ns = string[:int(tmp[1])] + tmp[3] + string[int(tmp[2]) + 1:]\nstring = s",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02646/s408425425.py",
  "f2_idx": "./Project_CodeNet_Python800/p02422/s388337948.py",
  "response": "No"
 },
 {
  "f1": "from sys import stdin\n\nn = int(stdin.readline())\nq = []\nbottom = 0\nfor i in range(n):\ncmd = stdin.readline()[:-1]\nif cmd[0] == 'i':\nq.append(cmd[7:])\nelif cmd[6] == ' ':\ntry:\nq.pop(~q[::-1].index(cmd[7:]))\nexcept:\npass\nelif cmd[6] == 'F':\nq.pop()\nelse:\nbottom += 1\n\nprint(' '.join(q[bottom:][::-1]))",
  "f2": "n = int(input())\nA = [int(input()) for _ in range(n)]\nans = 0\nfor i in range(n-1):\nx,y = A[i], A[i+1]\nans += x//2\nif x%2!=0 and y > 0:\nans += 1\nA[i+1] -= 1\nans += A[-1]//2\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02265/s299445016.py",
  "f2_idx": "./Project_CodeNet_Python800/p04020/s576041747.py",
  "response": "No"
 },
 {
  "f1": "A = {i-97:chr(i) for i in range(97,123)}\nB = {v:k for k,v in A.items()}\ns = list(input().strip())\nK = int(input())\nfor i in range(len(s)-1):\nif s[i]!=\"a\" and K>=26-B[s[i]]:\nK -= (26-B[s[i]])\ns[i]=\"a\"\nk = K%26\nind = (B[s[-1]]+k)%26\ns[-1] = A[ind]\nprint(\"\".join(s))",
  "f2": "a, b, c, d = map(int, input().split(\" \"))\n\nalice = [1 if a <= i < b else 0 for i in range(100)]\nbob = [1 if c <= i < d else 0 for i in range(100)]\nres = [0 for _ in range(100)]\n\nfor i in range(len(res)):\nres[i] = alice[i] * bob[i]\n\nprint(sum(res))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03994/s359046490.py",
  "f2_idx": "./Project_CodeNet_Python800/p03632/s893588295.py",
  "response": "No"
 },
 {
  "f1": "s = input()\n\nans = \"\"\nfor c in s:\nif c == \"B\":\nif len(ans) > 0:\nans = ans[:-1]\nelse:\nans += c\n\nprint(ans)",
  "f2": "n,m,p=map(int,input().split())\nA=[]\nfor i in range(m):\na,b,c=map(int,input().split())\nA.append((a,b,c-p))\n\ndef BellmanFord(edges,num_v,source):\n#グラフの初期化\ninf=float(\"inf\")\ndist=[-inf for i in range(num_v)]\ndist[source-1]=0\n\n#辺の緩和\nbuf=0\nfor i in range(num_v*2):\nfor edge in edges:\nif dist[edge[1]-1] < dist[edge[0]-1] + edge[2]:\ndist[edge[1]-1] = dist[edge[0]-1] + edge[2]\nif i>=num_v:\ndist[edge[1]-1] =inf\nif i==num_v-1:\nbuf=dist[-1]\nif dist[-1]!=buf or dist[-1]==-inf:\nreturn -1\nreturn max(dist[-1],0)\n\nx=BellmanFord(A,n,1)\nprint(x)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p04030/s150390066.py",
  "f2_idx": "./Project_CodeNet_Python800/p02949/s151807272.py",
  "response": "No"
 },
 {
  "f1": "from sys import exit\nimport math\nimport collections\nii = lambda : int(input())\nmi = lambda : map(int,input().split())\nli = lambda : list(map(int,input().split()))\n\nn,m = mi()\nif n == m:\nprint('Yes')\nelse:\nprint('No')",
  "f2": "a,b,c,d = map(int,input().split())\nif b <= c or d <= a:\nprint(0)\nelif a <= c:\nprint(min(b,d)-c)\nelif a >= c:\nprint(min(b,d)-a)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02789/s525927729.py",
  "f2_idx": "./Project_CodeNet_Python800/p03632/s678268223.py",
  "response": "No"
 },
 {
  "f1": "N, M = map(int, input().split())\nV = [-1]*N\n\nif M == 0 and N == 1:\nprint(0)\nexit()\n\nfor i in range (0, M):\nA, B = map(int, input().split())\nif V[A-1] == -1 or V[A-1] == B:\nV[A-1] = B\nelse:\nprint(-1)\nexit()\n\nif V[0] == 0 and len(V) > 1:\nprint(-1)\nexit()\n\nfor i in range (0, N):\nif V[i] == -1:\nif i ==0:\nV[i] = 1\nelse:\nV[i] = 0\n\nprint(*V, sep=\"\")",
  "f2": "N=int(input())\nE=[[] for _ in range(N)]\nfor _ in range(N-1):\na,b=map(lambda x:int(x)-1, input().split())\nE[a].append(b)\nE[b].append(a)\nC=list(map(int, input().split()))\n\nC.sort(reverse=True)\n\nans=[0]*(N)\nstack=[0]\nans[0]=C[0]\nk=1\nwhile stack:\nn=stack.pop()\nfor to in E[n]:\nif ans[to]!=0: continue\nans[to]=C[k]\nk+=1\nstack.append(to)\n\nprint(sum(C[1:]))\nprint(' '.join(map(str,ans)))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02761/s476100261.py",
  "f2_idx": "./Project_CodeNet_Python800/p03026/s159688287.py",
  "response": "No"
 },
 {
  "f1": "sx,sy,tx,ty = ( int(x) for x in input().split() )\n\nrx = tx - sx\nry = ty - sy\n\nans = []\n# 'U' 'D' 'L' 'R'\n# 1\nfor i in range( ry ):\nans.append( 'U' )\nfor i in range( rx ):\nans.append( 'R' )\n# 2\nfor i in range( ry ):\nans.append( 'D' )\nfor i in range( rx ):\nans.append( 'L' )\n# 3\nans.append( 'L' )\nfor i in range( ry + 1 ):\nans.append( 'U' )\nfor i in range( rx + 1 ):\nans.append( 'R' )\nans.append( 'D' )\n# 4\nans.append( 'R' )\nfor i in range( ry + 1 ):\nans.append( 'D' )\nfor i in range( rx + 1 ):\nans.append( 'L' )\nans.append( 'U' )\n\nprint( ''.join(ans) )",
  "f2": "n, h, w = map(int, input().split())\nab = [map(int, input().split()) for _ in range(n)]\nprint(sum([1 if a >= h and b >= w else 0 for a, b in ab]))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03836/s576854041.py",
  "f2_idx": "./Project_CodeNet_Python800/p03193/s181799736.py",
  "response": "No"
 },
 {
  "f1": "exchange_cnt = 0\n\ndef insertion_sort(w_list, g):\n\"\"\"一般化した Insertion ソート\n\n通常の Insertion ソートは gap が 1 固定だが、ここでは、\ngap を引数 g で指定できる。\n\n当然、g < len(w_list) でないといけない。\n\"\"\"\nglobal exchange_cnt\nN = len(w_list)\nfor i in range(g, N):\nv = w_list[i]\nj = i - g\nwhile j >= 0 and w_list[j] > v:\nw_list[j+g] = w_list[j]\nj -= g\nexchange_cnt += 1\nw_list[j+g] = v\n\n\ndef make_gap_sequence(n):\n\"\"\"gap sequence を作成\n\nとりあえず、Wiki にのっていたやり方のひとつを採用。\nN ^ 1.5 のオーダーになるという。\n\"\"\"\nseq = []\nk = 1\nwhile True:\ngap = 2 ** k - 1\nif gap > n:\nbreak\nseq.append(gap)\nk += 1\nseq.reverse()   # in place なので効率が良い。\nreturn seq\n\ndef make_gap_sequence_2(n):\n\"\"\"もうひとつの gap sequence の作成方法\n\nWiki にのっていた Shell によるオリジナルの方法。\nこれだと最悪の場合、N ^ 2 のオーダーになってしまうようだ。\n\"\"\"\nseq = []\nk = 1\nwhile True:\ngap = n // (2 ** k)\nif gap <= 1:\nbreak\nseq.append(gap)\nk += 1\nseq.append(1)\nreturn seq\n\n\n\ndef shell_sort(w_list):\nN = len(w_list)\n\n# N から gap sequence を決める。\n# どう決めるかで効率が変わってくるのだが、どう決めるかは難問。\n# gap_sequence = make_gap_sequence(N)\ngap_sequence = make_gap_sequence_2(N)\n\nfor g in gap_sequence:\ninsertion_sort(w_list, g)\n\nreturn gap_sequence\n\n\nn = int(input())\nw_list = []\nfor _ in range(n):\nw_list.append(int(input()))\n\ngap_seq = shell_sort(w_list)\n\nprint(len(gap_seq))\nprint(*gap_seq)\nprint(exchange_cnt)\nfor i in w_list:\nprint(i)\n",
  "f2": "import math\n\na,b,x = map(int,input().split())\n\ntr = a*a*b/2\n\nif x <= tr:\nrlt = (180/math.pi)*math.atan2(a*b**2, 2*x)\nelse:\nrlt = (180/math.pi)*math.atan2(2*(a**2*b - x), a**3)\n\nprint(rlt)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02262/s314016886.py",
  "f2_idx": "./Project_CodeNet_Python800/p02882/s688503327.py",
  "response": "No"
 },
 {
  "f1": "from heapq import heapify, heappop, heappush\nfrom collections import deque\nN,M=map(int,input().split())\nA=[0]*N #ラグ\nB=[0]*N #報酬\nC=[0]*N\nfor i in range(N):\nA[i],B[i]= map(int,input().split())\nC[i]=[A[i],B[i]]\nC.sort()\nD=deque(C)\nreward=0\n#print(D)\n\nh=[]\nheapify(h)\n\nfor i in range(M-1,-1,-1):\nwhile D:\ne = D.popleft()\nif e[0]==M-i:\nheappush(h,-1*e[1])\nelse:\nD.appendleft(e)\nbreak\n#print(h)\nif h:\nreward += (-1)*heappop(h)\n\nprint(reward)",
  "f2": "def main():\nn,m=map(int, input().split())\nk = [0]*n\nfor i in range(m):\na,b=map(int, input().split())\nk[a-1]+=1\nk[b-1]+=1\nfor i in k:\nif i%2==1:\nprint(\"NO\")\nexit()\nprint(\"YES\")\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02948/s641257804.py",
  "f2_idx": "./Project_CodeNet_Python800/p03724/s922176503.py",
  "response": "No"
 },
 {
  "f1": "S=input()\nprint(len(S)//2-S.count(\"p\"))",
  "f2": "a=input()\nif 65<=ord(a)<=90:\nprint('A')\nelse:\nprint('a')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03967/s632465146.py",
  "f2_idx": "./Project_CodeNet_Python800/p02627/s160208152.py",
  "response": "No"
 },
 {
  "f1": "H = int(input())\ncount = 0\nans = 0\nwhile H>1:\nH = H//2\nans += 2**count\ncount += 1\nans += 2**count\nprint(ans)",
  "f2": "N=list(map(int,input().split()))\nif(N.count(1)==1 and N.count(9)==1 and N.count(7)==1 and N.count(4)==1):\nprint(\"YES\")\nelse:\nprint(\"NO\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02786/s042107696.py",
  "f2_idx": "./Project_CodeNet_Python800/p03149/s627355475.py",
  "response": "No"
 },
 {
  "f1": "n,k = map(int, input().split())\nans=(n//k)**3\nif k%2==0:\nans+=((n+k//2)//k)**3\nprint(ans)",
  "f2": "d = int(input())\nC = list(map(int, input().split()))\nS = []\nfor _ in range(d):\nS.append(list(map(int, input().split())))\nv = 0\nLDs = [0 for _ in range(26)]\nfor i in range(d):\nt = int(input()) - 1\nR = [(i + 1 - LDs[j]) * C[j] for j in range(26)]\ndel R[t]\nv += S[i][t] - sum(R)\nLDs[t] = i + 1\nprint(v)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03268/s607013450.py",
  "f2_idx": "./Project_CodeNet_Python800/p02619/s414489476.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\n\ndef input(): return sys.stdin.readline().strip()\n\n\ndef resolve():\ns1, s2, t1, t2 = map(int, input().split())\nl = []\nyoko = t1 - s1\ntate = t2 - s2\nif yoko>0:\na,c,f,h='R','L','L','R'\nelse:\nyoko=-yoko\na,c,f,h='L','R','R','L'\nif tate>0:\nb,d,e,g='U','D','D','U'\nelse:\ntate=-tate\nb,d,e,g='D','U','U','D'\nl.append(a*yoko+b*tate+c*yoko+d*tate)\nl.append(e+a*(yoko+1)+b*(tate+1)+f)\nl.append(g+c*(yoko+1)+d*(tate+1)+h)\nprint(''.join(l))\nresolve()",
  "f2": "A,B = input().split()\nA = int(A)\nB = int(B[0])*100 + int(B[2])*10 + int(B[3])\nans = A*B\nans //= 100\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03836/s322545347.py",
  "f2_idx": "./Project_CodeNet_Python800/p02659/s021365624.py",
  "response": "No"
 },
 {
  "f1": "def dfs(i, j, s):\nif j > 3:\nreturn\nif j == 3 and s == x:\nans.append(1)\n\nfor k in range(1, i):\nif s + k > x:\nbreak\ndfs(k, j + 1, s + k)\n\nwhile True:\nans = []\nn, x = map(int, input().split())\nif n == x == 0:\nbreak\n\nfor i in range(3, n + 1):\ndfs(i, 1, i)\n\nprint(sum(ans))",
  "f2": "n = int(input())\na = list(map(int,input().split()))\nm = [0] * (n+1)\nfor i in a:\nm[i] += 1\nfor i in m[1:]:\nprint(i)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02412/s215749679.py",
  "f2_idx": "./Project_CodeNet_Python800/p02707/s641271640.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nA = [int(input()) for i in range(N)]\na_sorted = sorted(A,reverse=True)\nfor i in range(N):\nif A[i] != a_sorted[0]:\nprint(a_sorted[0])\nelif A[i] == a_sorted[0]:\nprint(a_sorted[1])",
  "f2": "import math\nr = input()\ns = math.pi * r ** 2\nl = 2 * math.pi * r\nprint \"{0: 6f}\".format(s), round(l,8)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02971/s295366101.py",
  "f2_idx": "./Project_CodeNet_Python800/p02400/s571183292.py",
  "response": "No"
 },
 {
  "f1": "from itertools import product as p\n\nN = int(input())\n*V, = map(int, input().split())\n*C, = map(int, input().split())\n\nans = -10**12\nfor i in p(range(2), repeat=N):\nX, Y = 0, 0\nfor j, k in enumerate(i):\nif k==1:\nX += V[j]\nY += C[j]\nans = max(ans, X-Y)\nprint(ans)",
  "f2": "import itertools\nimport math\n\nN = int(input())\nxy = []\nfor _ in range(N):\nxi, yi = map(int, input().split())\nxy.append([xi, yi])\n\n# print(xy)\n\nsum_dist = 0\n\n# 第二引数を指定しなければ全ての要素の順列を返す\nfor perm in itertools.permutations(range(N)):\ndist = 0\nfor i in range(1, N):\ndist += math.sqrt((xy[perm[i]][0] - xy[perm[i - 1]][0]) **\n2 + (xy[perm[i]][1] - xy[perm[i - 1]][1])**2)\n# print(sum_dist)\nsum_dist += dist\n\nans = sum_dist / math.factorial(N)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03060/s384406396.py",
  "f2_idx": "./Project_CodeNet_Python800/p02861/s384857716.py",
  "response": "No"
 },
 {
  "f1": "N, K = map(int, input().split(\" \"))\nprint(N - K if K >= 2 else 0)",
  "f2": "k = int(input())\na = k // 2\nif k % 2 != 0:\nprint((a+1) * a)\nelse:\nprint(a ** 2)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03005/s416655238.py",
  "f2_idx": "./Project_CodeNet_Python800/p03264/s458239432.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\nA=tuple(map(int,input().split()))\nave=sum(A)/n\nd=float('inf')\nfor i,a in enumerate(A):\nif abs(a-ave)<d:\nd=abs(a-ave)\nans=i\nprint(ans)",
  "f2": "def to_fizzbuzz(number):\nif number % 15 == 0:\nreturn 'FizzBuzz'\n\nif number % 3 == 0:\nreturn 'Fizz'\n\nif number % 5 == 0:\nreturn 'Buzz'\n\nelse:\nreturn str(number)\n# return i\n\ndef main():\nN = int(input())\n# this list concludes \"FizzBuzz\", \"Fizz\" or \"Buzz\"\nfblist = []\nfor number in range(1, 10**6):\nresult = to_fizzbuzz(number)\nfblist.append(result)\n\n# the list up to N\nn_list = fblist[0:N]\n# this list contains only numbers and up to N\n\nn_numlist = []\n\nfor s in n_list:\nif s.isdigit() == True:\nn_numlist.append(int(s))\n\nprint(sum(n_numlist))\n\n\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03214/s427590607.py",
  "f2_idx": "./Project_CodeNet_Python800/p02712/s328907691.py",
  "response": "No"
 },
 {
  "f1": "def solve():\nN = int(input())\nA = [int(i) for i in input().split()]\nans = 0\ncur = 1\nfor i in range(N):\na = A[i]\nif a != cur:\nans += 1\nelse:\ncur += 1\nprint(ans if ans != N else -1)\n\nif __name__ == \"__main__\":\nsolve()",
  "f2": "#!/usr/bin/env python3\n\nimport math\nimport sys\nfrom collections import defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect\nfrom heapq import heappop, heappush\nfrom fractions import gcd\nimport copy\n\n\ndef next_line():\nreturn input()\n\n\ndef next_int():\nreturn int(input())\n\n\ndef int_ar():\nreturn list(map(int, input().split()))\n\n\ndef int_ar_mul(size):\nreturn [int(input()) for _ in range(size)]\n\n\ndef str_ar(size):\nreturn [input() for _ in range(size)]\n\n\ndef ints():\nreturn map(int, input().split())\n\n\ndef strs():\nreturn input().split()\n\n\ndef main():\nalp = \"zabcdefghijklmnopqrstuvwxy\"\nn = next_int()\nstr = \"\"\nwhile n > 0:\nstr = alp[n % 26] + str\nif n % 26 == 0:\nn -= 26\nn //= 26\nprint(str)\n\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02832/s959132076.py",
  "f2_idx": "./Project_CodeNet_Python800/p02629/s585244331.py",
  "response": "No"
 },
 {
  "f1": "S = input()\nn = 0\ni = 0\nwhile i < len(S):\n# print(S)\nif len(set(S[i:i+2])) == 2:\nS = S[:i]+S[i+2:]\nn += 2\nif i != 0:\ni -= 1\nelse:\ni += 1\nprint(n)",
  "f2": "# ビット全探索\nfrom itertools import product\n\nN = int(input())\nF = [list(map(int, input().split())) for _ in range(N)]\nP = [list(map(int, input().split())) for _ in range(N)]\n\nresult = -float('inf')\nfor i in product([True, False], repeat=10):\nif i.count(False) == 10:\ncontinue\nt = 0\nfor j in range(N):\nt += P[j][sum(1 & F[j][k] for k in range(10) if i[k])]\nresult = max(result, t)\nprint(result)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03107/s656093592.py",
  "f2_idx": "./Project_CodeNet_Python800/p03503/s692350862.py",
  "response": "No"
 },
 {
  "f1": "H = int(input())\ncnt = 0\nwhile H != 0:\nH //= 2\ncnt += 1\n\nprint(2**cnt-1)",
  "f2": "sd = input()\nt = input()\noks = []\nfor i in range(len(sd)-len(t)+1):\nsdd = sd[i:i+len(t)]\nf = True\nfor j,sddj in enumerate(sdd):\nif sddj == \"?\":\ncontinue\nelif sddj != t[j]:\nf = False\nbreak\nif f:\noks.append(i)\nif oks:\nk = oks[-1]\nprint((sd[:k]+t+sd[k+len(t):]).replace(\"?\",\"a\"))\nelse:\nprint(\"UNRESTORABLE\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02786/s106313257.py",
  "f2_idx": "./Project_CodeNet_Python800/p03565/s181942780.py",
  "response": "No"
 },
 {
  "f1": "from decimal import Decimal,getcontext\nfrom math import ceil\n\nN = int(input())\n\ntakahashi,aoki = 1,1\n\nfor _ in range(N):\na,b = map(int,input().split())\nc = max(ceil(takahashi/Decimal(a)),ceil(aoki/Decimal(b)))\ntakahashi = c*a\naoki = c*b\n\nprint(takahashi+aoki)",
  "f2": "import math\nA = int(input())\nB = int(input())\nC = int(input())\nD = int(input())\nE = int(input())\n\ndef roundup(n):\nreturn int(math.ceil(n /10)) * 10\ndef get_digit(number):\nreturn number % 10\ns = 0\nm = []\nli = [A, B, C, D, E]\nfor i in range(len(li)):\nif get_digit(li[i]) >= 1:\nm.append(get_digit(li[i]))\nf = False\nm.sort()\nfor l in range(len(li)):\nif len(m) > 0:\nif m[0] == get_digit(li[l]) and f == False:\ns += li[l]\nf = True\nelse:\ns += roundup(li[l])\n# print(roundup(li[l]))\nelse:\ns =sum(li)\nprint(s)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03964/s027463966.py",
  "f2_idx": "./Project_CodeNet_Python800/p03076/s088038547.py",
  "response": "No"
 },
 {
  "f1": "import math\nfrom decimal import *\nimport random\n\na,b,c,d = map(int, input().split())\nprint(max(a*c,\na*d,\nb*c,\nb*d))",
  "f2": "a,b,c=map(int,input().split())\nif a+b>=c:\nprint(b+c)\nelif a+b+1<=c:\nprint(a+2*b+1)\nelse:\nprint(a+b)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02553/s629563623.py",
  "f2_idx": "./Project_CodeNet_Python800/p03186/s557838772.py",
  "response": "No"
 },
 {
  "f1": "R,G,B=map(int,input().split())\nK=int(input())\n\n\nfor i in range (K+1):\nif R < G < B:\nprint ('Yes')\nexit()\nelse:\npass\n\nif G < B:\npass\nelse:\nB*=2\ncontinue\n\nif R < G:\npass\nelse:\nG*=2\ncontinue\n\nprint('No')",
  "f2": "from logging import *\nbasicConfig(level=DEBUG, format='%(levelname)s: %(message)s')\ndisable(CRITICAL)\n\ndef solve():\ncan_positive = False\nif len(P) > 0:\nif k < n: can_positive = True\nelse: can_positive = len(M)%2 == 0\nelse: can_positive = k%2 == 0\n\nif not can_positive: return sorted(P+M, key=lambda x:abs(x))[:k]\n\nP.sort()\nM.sort(reverse = True)\ndebug('k {} n {}'.format(k,n))\ndebug('P {}'.format(P))\ndebug('M {}'.format(M))\np, m = [], []\nwhile len(p) + len(m) < k:\nif len(P) > 0 and len(M) <= 0: p.append(P.pop())\nelif len(P) <= 0 and len(M) > 0: m.append(M.pop())\nelif P[-1] < -M[-1]: m.append(M.pop())\nelse: p.append(P.pop())\n\ndebug('p {}'.format(p))\ndebug('m {}'.format(m))\ndebug('P {}'.format(P))\ndebug('M {}'.format(M))\n\nif len(m)%2:\nMi = M.pop() if len(p)*len(M) else 1  #  1 is no data\nPi = P.pop() if len(m)*len(P) else -1 # -1 is no data\nif Mi < 0 and Pi >= 0:\nif abs(p[-1] * Pi) < abs(m[-1] * Mi):\np.pop()\nm.append(Mi)\nelse:\nm.pop()\np.append(Pi)\nelif Mi < 0:\np.pop()\nm.append(Mi)\nelif Pi >= 0:\nm.pop()\np.append(Pi)\nreturn p + m\n\nn, k = map(int, input().split())\nP, M = [], [] # plus, minus\nfor a in map(int, input().split()):\nif a < 0: M.append(a)\nelse: P.append(a)\nans, MOD = 1, 10**9 + 7\nfor a in solve(): ans *= a; ans %= MOD\nans += MOD; ans %= MOD\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02601/s317251727.py",
  "f2_idx": "./Project_CodeNet_Python800/p02616/s712871416.py",
  "response": "No"
 },
 {
  "f1": "n, m = map(int, input().split())\ns = []\nc = []\nfor i in range(n):\ns.append(list(map(int, input().split())))\n\nfor j in range(m):\nc.append(list(map(int, input().split())))\n\nfor k in range(n):\ncnt = []\nfor l in range(m):\nkyori = abs(s[k][0]-c[l][0])+abs(s[k][1]-c[l][1])\ncnt.append(kyori)\nprint(cnt.index(min(cnt))+1)",
  "f2": "N=int(input())\nwork=[0]*N\nfor i in range(N):\nwork[i]=list(map(int,input().split()))\nwork=sorted(work,key=lambda x: x[1])\ntime=0\nfor i in work:\ntime+=i[0]\nif time>i[1]:\nprint('No')\nexit()\nprint('Yes')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03774/s011008783.py",
  "f2_idx": "./Project_CodeNet_Python800/p02996/s054416569.py",
  "response": "No"
 },
 {
  "f1": "import re\ntext = input()\nb_length = len(re.sub('[^B]', '', text))\nfor _ in range(b_length):\ntext = re.sub('(0|1)??B', '', text, 1)\nprint(text)",
  "f2": "#def area###############################\ndef pr(s,a,b):\nprint s[int(a):int(b)+1]\n\ndef rv(s,a,b):\n#\ta=\"abcdefghijklmn\"len=14\n#\tra=\"nmlkjihgfedcba\"\n#\t\tedc=9,10,11\n#\tans=\"abedcfghijklmn\"\n#\treverse 2 4\n#\t14-b-1,14-a-1\n#\t\"\ntmp=s[::-1]\nnews=s[:int(a)]+tmp[len(tmp)-int(b)-1:len(tmp)-int(a)]+s[int(b)+1:]\nreturn news\ndef rp(s,a,b,p):\nnews=s[:int(a)]+p+s[int(b)+1:]\nreturn news\n########################################\n\n\nI=raw_input()\nn=int(input())\nfor i in range(n):\nk=raw_input().split(\" \")\nif k[0]==\"replace\":\nI=rp(I,k[1],k[2],k[3])\nelif k[0]==\"reverse\":\nI=rv(I,k[1],k[2])\nelif k[0]==\"print\":\npr(I,k[1],k[2])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p04030/s007318227.py",
  "f2_idx": "./Project_CodeNet_Python800/p02422/s437806222.py",
  "response": "No"
 },
 {
  "f1": "N=int(input())\nA=list(map(int,input().split()))\nans=20202020200\nsum_A=0\nsum_B=sum(A)\nfor i in range(N):\nsum_A+=A[i]\nsum_B-=A[i]\ntmp=abs(sum_A-sum_B)\nif tmp<ans:\nans=tmp\nprint(ans)",
  "f2": "N = int(input())\n\nA = []\nB = []\n\nfor _ in range(N):\na, b = map(int, input().split())\nA.append(a)\nB.append(b)\n\nA.reverse()\nB.reverse()\n\nans = 0\nbefore = 0\n\nfor i in range(N):\nmod = (A[i]+ans)%B[i]\nif mod != 0:\nans += B[i]-mod\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02854/s417888790.py",
  "f2_idx": "./Project_CodeNet_Python800/p03821/s645184908.py",
  "response": "No"
 },
 {
  "f1": "x,y=map(str,input().split())\nx=int(x,16)\ny=int(y,16)\nif x>y:\nprint(\">\")\nelif x<y:\nprint(\"<\")\nelif x==y:\nprint(\"=\")",
  "f2": "a,b,c = map(int,raw_input().split())\ni = 0\nfor x in range(a,b+1):\nif c % x==0:\ni += 1\nif a == b:\nif c % a == 0:\ni = 1\n\nprint i",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03547/s473997237.py",
  "f2_idx": "./Project_CodeNet_Python800/p02398/s218507860.py",
  "response": "No"
 },
 {
  "f1": "from collections import Counter\n\nn = int(input())\nans = Counter(input())\n\nfor i in range(n - 1):\n_ans = ans.copy()\nc = Counter(input())\ns = _ans.keys() & c.keys()\nans = {}\nfor k in s:\nans[k] = min(_ans[k], c[k])\n\nanstr = \"\".join(sorted([k * ans[k] for k in ans.keys()]))\n\nprint(anstr)",
  "f2": "n=int(input())\n\nl=list(map(float,input().split()))\nk=[0]*(n+1)\nk[0]=1\nfor p in l:\nfor j in range(n,-1,-1):\nk[j]*=(1-p)\nif j!=0:k[j]+=k[j-1]*p\n\nprint(sum(k[n//2+1:]))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03761/s854513909.py",
  "f2_idx": "./Project_CodeNet_Python800/p03168/s413396535.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\nsys.setrecursionlimit(10**5)\nn, u, v = map(int, input().split())\nu -= 1\nv -= 1\nm_mat = [[] for i in range(n)]\nfor _ in range(n-1):\na, b = map(int, input().split())\na -= 1\nb -= 1\nm_mat[a].append(b)\nm_mat[b].append(a)\nu_map = [-1]*n\nv_map = [-1]*n\nu_map[u] = 0\nv_map[v] = 0\n\n\ndef dfs(current, depth, ma):\nfor nex in m_mat[current]:\nif ma[nex] > -1:\ncontinue\nma[nex] = depth\ndfs(nex, depth+1, ma)\n\n\ndfs(u, 1, u_map)\ndfs(v, 1, v_map)\n\nans = -1\nfor i in range(n):\nif u_map[i] < v_map[i] and v_map[i] > ans:\nans = v_map[i]\n\nprint(ans-1)",
  "f2": "def output(X):\nfor x in X:\nprint(*x)\n\nN,K = map(int,input().split())\nALL = N*(N-1)//2\nMAX = ALL - (N-1)\nif K > MAX:\nprint(-1)\nexit()\nG = []\nreq = ALL-K\ncnt = 0\nfor i in range(1,N+1): #1-N\nfor j in range(i+1,N+1): #i+1-N\nif i == 1:\nG.append([i,j])\ncnt += 1\nelse:\nif cnt >= req:\nprint(req)\noutput(G)\nexit()\nelse:\nG.append([i,j])\ncnt += 1\nprint(req)\noutput(G)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02834/s348106778.py",
  "f2_idx": "./Project_CodeNet_Python800/p02997/s027873562.py",
  "response": "No"
 },
 {
  "f1": "from _collections import deque\nN = int(input())\nT = [[] for _ in range(N)]\nfor i in range(N-1):\nu,v,w = map(int,input().split())\nT[u-1].append([v-1,w%2])\nT[v-1].append([u-1,w%2])\n\nans = [0]*N\nused_1 = [0]*N\nused_2 = [0]*N\nfor i in range(N):\nif used_1[i] == 0:\nused_1[i] = 1\nu = i\nP = deque([])\nfor j in range(len(T[i])):\nv = T[u][j][0]\nw = T[u][j][1]\nP.append(v)\nif used_2[v] == 1:\nk = ans[v]\nif k == 1:\nif w == 1:\nans[u] = 0\nelse:\nans[u] = 1\nelse:\nif w == 1:\nans[u] = 1\nelse:\nans[u] = 0\nused_2[u] = 1\nelif used_2[u] == 1:\nk = ans[u]\nif k == 1:\nif w == 1:\nans[v] = 0\nelse:\nans[v] = 1\nelse:\nif w == 1:\nans[v] = 1\nelse:\nans[v] = 0\nused_2[v] = 1\nelse:\nif w == 1:\nans[v] = 1\nelse:\npass\nused_2[u] = 1\nused_2[v] = 1\nwhile(True):\ni = P.popleft()\nif used_1[i] == 0:\nused_1[i] = 1\nu = i\nfor j in range(len(T[i])):\nv = T[u][j][0]\nw = T[u][j][1]\nP.append(v)\nif used_2[v] == 1:\nk = ans[v]\nif k == 1:\nif w == 1:\nans[u] = 0\nelse:\nans[u] = 1\nelse:\nif w == 1:\nans[u] = 1\nelse:\nans[u] = 0\nused_2[u] = 1\nelif used_2[u] == 1:\nk = ans[u]\nif k == 1:\nif w == 1:\nans[v] = 0\nelse:\nans[v] = 1\nelse:\nif w == 1:\nans[v] = 1\nelse:\nans[v] = 0\nused_2[v] = 1\nelse:\nif w == 1:\nans[v] = 1\nelse:\npass\nused_2[u] = 1\nused_2[v] = 1\nif len(P) == 0:\nbreak\n\nfor i in ans:\nprint(i)",
  "f2": "import sys\n\ndef call(n):\ni = 1\nwhile i <= n:\nx = i\nif x % 3 == 0:\nprint(' ', i, sep='', end='')\nelse:\nwhile x:\nif x % 10 == 3:\nprint(' ', i, sep='', end='')\nbreak\n\nx //= 10\n\ni += 1\n\nprint('')\n\nif __name__ == '__main__':\nn = int(sys.stdin.readline().strip())\ncall(n)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03044/s137472670.py",
  "f2_idx": "./Project_CodeNet_Python800/p02406/s185369506.py",
  "response": "No"
 },
 {
  "f1": "def myAnswer(N:int,T:int,t:list) -> int:\ntotal = T*N\nsub = 0\nif(N == 1): return T\npre = t.pop(0)\nfor time in t:\nif(pre + T - time > 0):\nsub += pre+T - time\npre = time\nreturn total - sub\n\ndef modelAnswer():\nreturn\ndef main():\nN,T = map(int,input().split())\nt = list(map(int,input().split()))\nprint(myAnswer(N,T,t[:]))\nif __name__ == '__main__':\nmain()",
  "f2": "import re\n\nprint ('AC' if re.match(r'\\AA[a-z](?:[a-z]*C[a-z]*)[a-z]\\Z', input()) else 'WA')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03733/s542588528.py",
  "f2_idx": "./Project_CodeNet_Python800/p03289/s264284129.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nC = dict()\ni, cp, hist, ans = 0, 0, [0]*N, 0\nfor _ in range(N):\nc = int(input())\nif c != cp:\nif c in C.keys():\ntemp = hist[C[c]] + 1\nhist[i] = hist[i-1] + temp\nans += temp\nelse:\nhist[i] += hist[i-1]\nC[c], cp = i, c\ni += 1\nprint((ans+1) % (10**9+7))",
  "f2": "import sys\n# sys.setrecursionlimit(100000)\n\n\ndef input():\nreturn sys.stdin.readline().strip()\n\n\ndef input_int():\nreturn int(input())\n\n\ndef input_int_list():\nreturn [int(i) for i in input().split()]\n\n\ndef main():\nn = input_int()\narms = []\n# 区間スケジューリング\nfor _ in range(n):\nx, l = input_int_list()\narms.append((x - l, x + l))\narms = sorted(arms, key=lambda x: x[1])\nprev_r = -float(\"inf\")\ncnt = 0\nfor left, right in arms:\nif prev_r > left:\ncontinue\ncnt += 1\nprev_r = right\n\nprint(cnt)\n\nreturn\n\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03096/s423322414.py",
  "f2_idx": "./Project_CodeNet_Python800/p02796/s355910237.py",
  "response": "No"
 },
 {
  "f1": "def count_section_by_zero(data):\ncount = 0\nflg = False\nstart = 0\nfor i, d in enumerate(data):\nif flg is False and d != 0:\ncount += 1\nflg = True\n\nif d == 0:\nflg = False\nreturn count\n\ndef input_list():\nreturn list(map(int, input().split()))\n\ndef input_list_str():\nreturn map(str, input().split())\n\ndef lcm_base(x, y):\nreturn (x * y) // fractions.gcd(x, y)\n\ndef lcm_list(numbers):\nreturn reduce(lcm_base, numbers, 1)\n\ndef gcd(*numbers):\nreturn reduce(fractions.gcd, numbers)\n\ndef gcd_list(numbers):\nreturn reduce(fractions.gcd, numbers)\n\n# 2で割り切れる回数\ndef divide_two(arg):\nc = 0\nwhile True:\nif c >= 2:\nbreak\nif arg % 2 != 0:\nbreak\narg //= 2\nc += 1\nreturn c\n\n# 素因数分解\ndef prime_factorize(n):\na = []\nwhile n % 2 == 0:\na.append(2)\nn //= 2\nf = 3\nwhile f * f <= n:\nif n % f == 0:\na.append(f)\nn //= f\nelse:\nf += 2\nif n != 1:\na.append(n)\nreturn a\n\ndef main():\nk, a, b = input_list()\nans = 1\nlf = max(0, k - a+1)\nlf1 = lf//2\nif lf:\nans = a + lf1 * (b - a) + lf%2\nelse:\nans +k\nprint(max(ans, k+1))\n\n\nimport math\nimport fractions\nimport collections\nfrom functools import reduce\nmain()",
  "f2": "def modelAnswer(N:int) -> int:\nans = 1\nfor i in range(1,N+1):\nans = (ans*i) % (10**9 + 7)\nreturn ans\ndef main():\nN = int(input())\nprint(modelAnswer(N))\n\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03131/s084085095.py",
  "f2_idx": "./Project_CodeNet_Python800/p03796/s210395809.py",
  "response": "No"
 },
 {
  "f1": "X,A,B=map(int,input().split())\n\nif (A-B)>=0:\nprint('delicious')\nelif (A-B)<0 and (X-B+A)>=0:\nprint('safe')\nelse:\nprint('dangerous')",
  "f2": "def solve():\nn = int(input())\na = list(map(int, input().split()))\nave = sum(a) / n\na2 = [(abs(a[i] - ave), i) for i in range(n)]\na2 = sorted(a2)\nprint(a2[0][1])\n\n\nif __name__ == \"__main__\":\nsolve()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03679/s382932235.py",
  "f2_idx": "./Project_CodeNet_Python800/p03214/s029568326.py",
  "response": "No"
 },
 {
  "f1": "def gcd_(a, b):\nif a < b:  a, b = b, a\nif b == 0:  return a\nreturn gcd_(b, a % b)\n\ndef gcd_bl(A):\n\nleft = [0 for _ in range(N + 1)]\nright = [0 for _ in range(N + 1)]\nans = [0 for _ in range(N)]\n\nleft[1] = A[0]\nfor i in range(1, N):\nleft[i + 1] = gcd_(left[i], A[i])\nright[-1 - 1] = A[-1]\nfor i in range(1, N):\nright[-1 - i - 1] = gcd_(right[-1 - i], A[-1 - i])\nfor i in range(N):\nans[i] = gcd_(left[i], right[i + 1])\n\nreturn ans\n\ndef cin():\nin_ = list(map(int,input().split()))\nif len(in_) == 1:  return in_[0]\nelse:  return in_\n\nN = cin()\nA = cin()\nans = 0\ng = gcd_bl(A)\nprint(max(g))",
  "f2": "n = int(input())\n\ncnt = [[0] * 10 for _ in range(10)]\nfor i in range(1, n+1):\ncnt[int(str(i)[0])][int(str(i)[-1])] += 1\n\nres = 0\nfor i in range(1, 10):\nfor j in range(1, 10):\nres += cnt[i][j] * cnt[j][i]\n\nprint(res)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03061/s491895746.py",
  "f2_idx": "./Project_CodeNet_Python800/p02792/s141661207.py",
  "response": "No"
 },
 {
  "f1": "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees#, log2\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10**9 + 7\n#from decimal import *\n\nN = INT()\nL = [INT() for _ in range(5)]\n\nC = min(L)\nl = L.index(C)\nr = 4 - l\n\nprint(-(-N//C)+l+r)",
  "f2": "a,b=map(int,input().split())\n\ndef gcd(a,b):\nif b==0:\nreturn a\nelse:\nreturn gcd(b,a%b)\ndef lcm(a,b):\nreturn int(a*b/gcd(a,b))\n\ng=gcd(a,b)\ndef prime_factorization(n):\n#nを素因数分解して、昇順のリストを返す\nm=n\nans = []\np = 2\n\nwhile p<m**0.5:\nif n%p == 0:\nans.append(p)\nwhile n%p==0:\nn /= p\nelse:\np += 1\n\nif n!=1:\nans.append(int(n))\n\nreturn ans\n\nl=prime_factorization(g)\nprint(len(l)+1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03077/s912359164.py",
  "f2_idx": "./Project_CodeNet_Python800/p02900/s002297011.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\n\nfin = sys.stdin.readline\nn = int(fin())\nprice_list = [int(fin()) for _ in range(n)]\nmin_price_so_far = float('inf')\nmax_profit = float('-inf')\nfor price in price_list:\nprofit = price - min_price_so_far\nmax_profit = max(max_profit, profit)\nmin_price_so_far = min(min_price_so_far, price)\nprint(max_profit)\n",
  "f2": "H,W = map(int, input().split())\n\na = [list(input()) for _ in range(H)]\n\nfor i in a:\ni.insert(0,'#')\ni.append('#')\n\nprint('#'*(W+2))\nfor i in a:\nprint(''.join(i))\nprint('#'*(W+2))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02258/s904264857.py",
  "f2_idx": "./Project_CodeNet_Python800/p03712/s719315321.py",
  "response": "No"
 },
 {
  "f1": "A = list(map(int, input().split()))\n\nA = sorted(A)\nprint(A[1]-A[0] + A[2]-A[1])",
  "f2": "import sys\nimport heapq\nimport math\nimport fractions\nimport bisect\nimport itertools\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\ndef input(): return sys.stdin.readline().strip()\ndef mp(): return map(int,input().split())\ndef lmp(): return list(map(int,input().split()))\n\nn=int(input())\na=lmp()\nans=0\nfor i in range(n-1):\nfor j in range(i+1,n):\nans+=a[i]*a[j]\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03292/s981918502.py",
  "f2_idx": "./Project_CodeNet_Python800/p02886/s046296188.py",
  "response": "No"
 },
 {
  "f1": "import numpy as np\n\n\ndef main():\nS = np.array(list(input()))\nLS = len(S)\nT = np.array(list(input()))\nLT = len(T)\n# LCS\ndp = np.zeros((LS + 1, LT + 1))\nmatch = S.reshape(-1, 1) == T.reshape(1, -1)\nfor s in range(LS):\ndp[s + 1, 1:] = np.fmax(dp[s, :(-1)] + match[s], dp[s, 1:])\ndp[s + 1] = np.maximum.accumulate(dp[s + 1])\n# recover\ns, t = LS, LT\nans = ''\nwhile s > 0 and t > 0:\nif dp[s, t] == dp[s - 1, t]:\ns -= 1\nelif dp[s, t] == dp[s, t - 1]:\nt -= 1\nelse:\nans = S[s - 1] + ans\ns -= 1\nt -= 1\nprint(ans)\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "import itertools\n\nN, M, Q = map(int, input().split())\n\nseisu_list = []\n\nfor i in range(Q):\nseisu = list(map(int, input().split()))\nseisu_list.append(seisu)\n\nM_list = [i for i in range(1,M+1)]\nA_list = list(itertools.combinations_with_replacement(M_list,N))\n#print(A_list)\nans = 0\n\nfor i in range(len(A_list)):\nans_temp = 0\nfor j in range(Q):\nif A_list[i][seisu_list[j][1]-1] - A_list[i][seisu_list[j][0]-1] == seisu_list[j][2]:\nans_temp += seisu_list[j][3]\nans = max(ans, ans_temp)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03165/s389481558.py",
  "f2_idx": "./Project_CodeNet_Python800/p02695/s660797022.py",
  "response": "No"
 },
 {
  "f1": "import math\nA,B = input().split(' ')\nif int(A) *float(B) >=0:\nanswer = math.floor(int(A)*float(B))\nprint(answer)\nelse:\nanswer = math.ceil(int(A)*float(B))\nprint(answer)\n",
  "f2": "N,K=[int(x) for x in input().split()]\na=[int(x) for x in input().split()]\n\nfor x in range(K,N):\nif a[x]>a[x-K]:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02657/s098844984.py",
  "f2_idx": "./Project_CodeNet_Python800/p02602/s693786916.py",
  "response": "No"
 },
 {
  "f1": "def solve():\nx, a, b = map(int, input().split())\nif b <= a:\nprint('delicious')\nelif a < b <= a + x:\nprint('safe')\nelse:\nprint('dangerous')\n\n\nif __name__ == \"__main__\":\nsolve()",
  "f2": "mod = 10 ** 9 + 7\nn, k = map(int, input().split())\n\nfact = [1] * (2 * n + 1)\ninv = [1] * (2 * n + 1)\ninvf = [1] * (2 * n + 1)\nfor i in range(2, 2 * n + 1):\nfact[i] = fact[i-1] * i % mod\ninv[i] = -inv[mod % i] * (mod // i) % mod\ninvf[i] = invf[i-1] * inv[i] % mod\n\ncount = 0\nfor i in range(min(n, k+1)):\nc = fact[n] * invf[n-i] * invf[i] % mod\ncount += c * fact[n-1] * invf[n-i-1] * invf[i] % mod\ncount %= mod\nprint(count)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03679/s275802463.py",
  "f2_idx": "./Project_CodeNet_Python800/p02769/s218950680.py",
  "response": "No"
 },
 {
  "f1": "A,s,C = map(str, input().split())\n\nprint(A[0] + s[0] + C[0])",
  "f2": "a,b,c = map(int,input().split())\nnum = 0\n\nif b != 1:\n#if a == 1:\n#    a += 1\nfor i in range(a,b+1):\nif (c % i) == 0:\nnum += 1\nelse:\nnum = 1\nprint(num)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03860/s908203949.py",
  "f2_idx": "./Project_CodeNet_Python800/p02398/s552440025.py",
  "response": "No"
 },
 {
  "f1": "N, K = map(int, input().split())\na = list(map(int,input().split()))\n\na_dict = {}\n\nfor i in range(N):\nif a[i] not in a_dict.keys():\na_dict[a[i]] = 1\nelse:\na_dict[a[i]] += 1\n\nans = 0\nif len(a_dict) <= K:\nprint(ans)\nelse:\nsort_a_dict_list = sorted(a_dict.items(), key=lambda x:x[1])\n\nfor j in range(len(a_dict) - K):\nans += sort_a_dict_list[j][1]\nprint(ans)",
  "f2": "import sys\ndef rs(): return sys.stdin.readline().rstrip()\ndef ri(): return int(rs())\ndef rs_(): return [_ for _ in rs().split()]\ndef ri_(): return [int(_) for _ in rs().split()]\n\nN = ri()\nT = ri_()\nM = ri()\nwa = sum(T)\nfor _ in range(M):\nP, X = ri_()\nans = wa + X - T[P - 1]\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03495/s576681638.py",
  "f2_idx": "./Project_CodeNet_Python800/p03845/s774570916.py",
  "response": "No"
 },
 {
  "f1": "from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall\n\nH, W = map(int, input().split())\nc = [list(map(int, input().split())) for _ in range(10)]\nc = floyd_warshall(csgraph_from_dense(c))\n\nresult = 0\nfor _ in range(H):\nfor i in map(int, input().split()):\nif i == -1:\ncontinue\nresult += c[i][1]\nprint(int(result))",
  "f2": "print(1-int(input()))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03546/s736528001.py",
  "f2_idx": "./Project_CodeNet_Python800/p02552/s235621761.py",
  "response": "No"
 },
 {
  "f1": "N, T = map(int, input().split())\n\nans = float('inf')\n\nfor i in range(N):\nc, t = map(int, input().split())\nif t <= T:\nans = min(ans, c)\n\nif ans == float('inf'):\nprint('TLE')\nelse:\nprint(ans)",
  "f2": "import math\n\nA, B = map(int, input().split())\n\nx = math.ceil(100 / 8 * A)\ny = math.ceil(100 / 10 * B)\n\nif x == y:\nprint(x)\nelif x > y:\nif math.floor(x*0.1) == B:\nprint(x)\nelse:\nprint(-1)\nelse:\nif math.floor(y*0.08) == A:\nprint(y)\nelse:\nprint(-1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03239/s221915662.py",
  "f2_idx": "./Project_CodeNet_Python800/p02755/s727771746.py",
  "response": "No"
 },
 {
  "f1": "NUM = list(map(int,input().split()))\n\nif(NUM[0] > NUM[1]):\nprint(\"safe\")\nelif(NUM[0] <= NUM[1]):\nprint(\"unsafe\")",
  "f2": "N=int(input())\nls1=[]\nfor i in range(N):\nsi,pi=input().split()\npi2=int(pi)\nls2=[si,pi2,i+1]\nls1.append(ls2)\nls1.sort(key=lambda x:-x[1])\nls1.sort(key=lambda x:x[0])\nfor i in range(N):\nprint(ls1[i][2])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02699/s465146723.py",
  "f2_idx": "./Project_CodeNet_Python800/p03030/s043596994.py",
  "response": "No"
 },
 {
  "f1": "\n\ndef read_int():\nreturn int(input().strip())\n\n\ndef read_ints():\nreturn list(map(int, input().strip().split(' ')))\n\n\ndef solve():\na = read_int()\nb = read_int()\nh = read_int()\nreturn (a+b)*h//2\n\n\nif __name__ == '__main__':\nprint(solve())",
  "f2": "N = int(input())\n\nX = [int(input()) for _ in range(N)]\n\nsize_dict = {}\n\nfor x in X:\nsize_dict[x] = 1\n\nans = len(size_dict.keys())\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03997/s129503304.py",
  "f2_idx": "./Project_CodeNet_Python800/p03470/s767374680.py",
  "response": "No"
 },
 {
  "f1": "n,m=[int(_) for _ in input().split()]\n\nn=2*m+1\nif m%2==0:\nfor i in range(m//2):\nprint(i+1,m-i)\nfor i in range(m//2):\nprint(m+1+i,n-i)\nelse:\nfor i in range(m//2):\nprint(i+1,m-i)\nfor i in range(m//2+1):\nprint(m+1+i,n-i)",
  "f2": "\"\"\"\nDFS（深さ優先探索）\n\"\"\"\n\n\ndef main():\nS = input()\nN = len(S)\n\ndef dfs(i, s):\nif i == N - 1:\nreturn sum(map(int, s.split('+')))\nreturn dfs(i + 1, s + S[i + 1]) + dfs(i + 1, s + '+' + S[i + 1])\n\nprint(dfs(0, S[0]))\nreturn\n\n\nif __name__ == '__main__':\nmain()\n\n\n\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02697/s826850653.py",
  "f2_idx": "./Project_CodeNet_Python800/p04001/s118297576.py",
  "response": "No"
 },
 {
  "f1": "def solve():\nN, M, X, Y = map(int, input().split())\nx = list(map(int, input().split()))\nx.append(X)\ny = list(map(int, input().split()))\ny.append(Y)\n\nif max(x) < min(y):\nprint('No War')\nelse:\nprint('War')\n\n\nif __name__ == '__main__':\nsolve()",
  "f2": "def main() -> None:\ns = input()\nt = input()\n\nprint('Yes' if s == t[:-1] else 'No')\n\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03251/s195118751.py",
  "f2_idx": "./Project_CodeNet_Python800/p02681/s503081263.py",
  "response": "No"
 },
 {
  "f1": "import sys\nfrom math import log\n\nreadline = sys.stdin.readline\nreadall = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef modinv(x, mod):\na, b = x, mod\nu, v = 1, 0\nwhile b:\nt = a // b\na -= t * b; a, b = b, a\nu -= t * v; u, v = v, u\nreturn u % mod\n\n\ndef solve():\nmod = 10**9 + 7\nn, k = nm()\na = nl()\na.sort(key=abs, reverse=True)\n\nif max(a) <= 0 or n == k:\nif k & 1:\nb = a[-k:]\nelse:\nb = a[:k]\nd = 1\nfor x in b:\nd = d * x % mod\nprint(d)\nreturn\n\nd = 1\nfor x in a[:k]:\nd = d * x % mod\ng = [x < 0 for x in a]\n\nif sum(g[:k]) % 2 == 0:\nprint(d)\nreturn\n\nb = list(map(lambda x:-10000 if x == 0 else log(abs(x)), a))\nmpi = mmi = -1\nMpi = Mmi = -1\nfor i in range(k):\nif a[i] <= 0:\nmmi = i\nif a[i] >= 0:\nmpi = i\nfor i in range(n-1, k-1, -1):\nif a[i] <= 0:\nMmi = i\nif a[i] >= 0:\nMpi = i\nif (mpi == -1 or Mmi == -1) and (mmi == -1 or Mpi == -1):\nif 0 in a: d = 0\nelif (mpi == -1 or Mmi == -1):\nd = d * a[Mpi] * modinv(a[mmi], mod) % mod\nelif (mmi == -1 or Mpi == -1):\nd = d * a[Mmi] * modinv(a[mpi], mod) % mod\nelse:\nif a[Mpi] * a[mpi] >= a[Mmi] * a[mmi]:\nd = d * a[Mpi] * modinv(a[mmi], mod) % mod\nelse:\nd = d * a[Mmi] * modinv(a[mpi], mod) % mod\nprint(d)\n\nreturn\n\nsolve()",
  "f2": "a, b = map(int, input().split())\nans = 0\nfor _ in '__':\nif a > b:\nans += a\na -= 1\nelse:\nans += b\nb -= 1\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02616/s482907915.py",
  "f2_idx": "./Project_CodeNet_Python800/p03071/s519687261.py",
  "response": "No"
 },
 {
  "f1": "N,K,Q =map(int,input().split())\npts = [0]*N\n\nfor i in range(Q):\na = int(input())\npts[a-1] += 1\nfor i in range(N):\nprint('Yes' if K-Q+pts[i] >= 1 else 'No')",
  "f2": "h,w,d=map(int,input().split())\nn=h*w\na=[None for i in range(n)]\nfor i in range(h):\ninp=list(map(int,input().split()))\nfor j in range(w):\na[inp[j]-1]=(i,j)\n\ndst=[0 for i in range(d)]\nfor i in range(d,n):\ndst.append(abs(a[i-d][0]-a[i][0])+abs(a[i-d][1]-a[i][1]))\n\ns=[0 for i in range(d)]\nfor i in range(d,n):\ns.append(s[i-d]+dst[i])\n\n\n\nq=int(input())\nfor i in range(q):\nl,r=map(int,input().split())\nprint(s[r-1]-s[l-1])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02911/s682459159.py",
  "f2_idx": "./Project_CodeNet_Python800/p03426/s315565055.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nA = list(map(int, input().split()))\nAA = sorted(A)\nX = AA[N//2 - 1]\nY = AA[N//2]\nfor i in range(N):\nif A[i] < Y:\nprint(Y)\nif A[i] >= Y:\nprint(X)",
  "f2": "a, b = map(int, input().split())\ntotal = 0\nfor _ in range(2):\nif a >= b:\ntotal = total + a\na = a - 1\nelse:\ntotal = total + b\nb = b - 1\nprint(total)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03379/s733791104.py",
  "f2_idx": "./Project_CodeNet_Python800/p03071/s607518955.py",
  "response": "No"
 },
 {
  "f1": "a,b,t = map(int,input().split())\ncount=0\n\nfor i in range(1,t+1):\n#print(i)\nif a*i<t+0.5:\ncount+=b\nprint(count)",
  "f2": "n=int(input())\na=list(map(int,input().split()))\nnum=[\"0\"]*n\ncount=\"1\"\n\nfor i in a:\nnum[i-1]=count\ncount=int(count)\ncount+=1\ncount=str(count)\n\nprint(\" \".join(num))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03059/s135980303.py",
  "f2_idx": "./Project_CodeNet_Python800/p02899/s239411251.py",
  "response": "No"
 },
 {
  "f1": "n,k=map(int,input().split())\ns=input()\nans=0\nfor i in range(n-1):\nans+=1 if s[i]==s[i+1] else 0\nprint(min(ans+2*k,n-1))",
  "f2": "n,a,b,c = [input() for i in range(4)]\ncounter = 0\nfor i in range(int(n)):\nif a[i] == b[i] != c[i]:\ncounter += 1\nelif a[i] == c[i] != b[i]:\ncounter += 1\nelif a[i] != b[i] == c[i]:\ncounter += 1\nelif a[i] != b[i] != c[i]:\ncounter += 2\nprint(counter)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02918/s771366927.py",
  "f2_idx": "./Project_CodeNet_Python800/p03140/s347518590.py",
  "response": "No"
 },
 {
  "f1": "\ndef main():\nN = int(input())\nR = [-1] * (N+1)\nA = list(map(int,input().split()))\nfor idx, a in enumerate(A):\nR[a] = idx+1\n\nfor idx in range(1, len(R)):\nprint(R[idx], end=\" \")\nprint(\"\\n\")\n\n\nif __name__ == \"__main__\":\nmain()\n",
  "f2": "S = str(input())\nAC = 0\nfor i in range(len(S) - 1):\nif S[i] == 'A' and S[i+1] =='C':\nAC = 1\nif AC == 1:\nprint('Yes')\nelse:\nprint('No')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02899/s998100709.py",
  "f2_idx": "./Project_CodeNet_Python800/p03567/s446906266.py",
  "response": "No"
 },
 {
  "f1": "a,b,c = map(int, input().split())\nmax_value = a\nif b > max_value:\nmax_value = b\nif c > max_value:\nmax_value = c\n\nprint(a + b + c - max_value)",
  "f2": "def resolve():\nn, m, c = map(int, input().split())\nbn = list(map(int, input().split()))\nprint(sum([1 for _ in range(n) if sum([a * b for a, b in zip(list(map(int, input().split())), bn)]) + c > 0]))\n\n\nif __name__ == '__main__':\nresolve()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03671/s748737272.py",
  "f2_idx": "./Project_CodeNet_Python800/p03102/s245763519.py",
  "response": "No"
 },
 {
  "f1": "n,m = map(int,input().split())\ndef div(x,y):\nif x%y!=0:\nreturn 0\nelse:\nreturn 1+div(int(x/y),y)\n\np=[]\nq=[]\n\ndef fact(s):\nif len(p)!=0:\nk=p[-1]\nelse:\nk=2\nfor i in range(2,max(int(s**0.5) +2,2)):\na=div(s,i)\nif a==0:\n0\nelse:\np.append(a)\nq.append(i)\ns=int(s/i**a)\nif s!=1:\np.append(1)\n\nfact(m)\ndef comb(nn,rr):\nrr=min(rr,nn-rr)\nrt=1\nfor i in range(rr):\n#rt=rt*(nn-i)/(rr-i)\nrt*=(nn-i)\nfor i in range(rr):\nrt//=(rr-i)\nreturn int(rt)\n#print(p,q,m)\nmo=10**9 +7\nans=1\nif len(p)==0:\nans=1\nelse:\nfor i in p:\nans*=comb(i+n-1, i) % mo\nprint(ans % mo)",
  "f2": "while 1:\nm,f,r=map(int, raw_input().split())\nif m==f==r==-1: break\ns=m+f\nif m==-1 or f==-1 or s<30: R=\"F\"\nelif s>=80: R=\"A\"\nelif s>=65: R=\"B\"\nelif s>=50: R=\"C\"\nelif r>=50: R=\"C\"\nelse: R=\"D\"\nprint R",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03253/s743144934.py",
  "f2_idx": "./Project_CodeNet_Python800/p02411/s342124172.py",
  "response": "No"
 },
 {
  "f1": "a = input().split()\nN = int(a[0])\nM = int(a[1])\n\nkotae = int(N * (N - 1) / 2)\nkotae2 = int(M  * (M - 1) / 2)\n\nprint(kotae + kotae2)",
  "f2": "from functools import reduce\n\nN = int(input())\nS = input()\n\nans = [chr(ord(\"A\") + (ord(s) + N - ord(\"A\"))%26) for s in S]\n\nans = reduce(lambda x, y: x + y, ans)\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02729/s894022148.py",
  "f2_idx": "./Project_CodeNet_Python800/p02848/s051248773.py",
  "response": "No"
 },
 {
  "f1": "#! /usr/lib/python3\n\ndef gcd(a,b):\nif b == 0:\nreturn a\nelse:\nreturn gcd(b,a%b)\n\nwhile True:\ntry:\na, b=map(int, input().split())\ns=gcd(a,b)\nprint(\"{0} {1:.0f}\".format(s,a*b/s))\nexcept:\nbreak",
  "f2": "from collections import Counter\n\nS=input()\nn=len(S)\ndp=[[0]*n for _ in range(20)]\n\nfor i,s in enumerate(S):\ndp[0][i]=i-1 if s =='L' else i+1\n\nfor k in range(19):\nfor i in range(n):\ndp[k+1][i]=dp[k][dp[k][i]]\n\nC=Counter(dp[-1])\n\nprint(*[C[i] for i in range(n)])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p00005/s583376546.py",
  "f2_idx": "./Project_CodeNet_Python800/p02954/s699187222.py",
  "response": "No"
 },
 {
  "f1": "# -*- coding: utf-8 -*-\nimport sys\nsys.setrecursionlimit(10**9)\nINF=10**18\nMOD=10**9+7\ninput=lambda: sys.stdin.readline().rstrip()\nYesNo=lambda b: bool([print('Yes')] if b else print('No'))\nYESNO=lambda b: bool([print('YES')] if b else print('NO'))\nint1=lambda x:int(x)-1\n\nN,K=map(int,input().split())\nprint(-(-(N-1)//(K-1)))",
  "f2": "N = int(input())\n\nalp = \"abcdefghijklmnopqrstuvwxyzz\"\nans = \"\"\n\nwhile(N != 0):\na = (N % 26)\nans = alp[a-1] + ans\n\nif a != 0:\nN = int((N-a)/26)\nelse:\nif N == 26 : break\nN = int((N-26)/26)\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03317/s639028249.py",
  "f2_idx": "./Project_CodeNet_Python800/p02629/s767045746.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\ng = [set() for _ in range(n)]\nfor i in range(n-1):\na, b = map(int, input().split())\ng[a-1].add(b-1)\ng[b-1].add(a-1)\n\ndef dfs(s):\nvisited = [-1]*n\nvisited[s] = 0\ntemp = [s]\nlst = []\nwhile temp:\np = temp.pop()\nfor a in g[p]:\nif visited[a] != -1:continue\nvisited[a] = visited[p] + 1\ntemp.append(a)\nreturn visited\n\nlst0 = dfs(0)\nlstn = dfs(n-1)\ncnt = 0\nfor i in range(n):\nif lst0[i] <= lstn[i]: cnt += 1\n\nif cnt > n - cnt: print('Fennec')\nelse:print('Snuke')",
  "f2": "import sys\nINF = 1 << 60\nMOD = 10**9 + 7 # 998244353\nsys.setrecursionlimit(2147483647)\ninput = lambda:sys.stdin.readline().rstrip()\n\nclass modfact(object):\ndef __init__(self, n):\nfact, invfact = [1] * (n + 1), [1] * (n + 1)\nfor i in range(1, n + 1): fact[i] = i * fact[i - 1] % MOD\ninvfact[n] = pow(fact[n], MOD - 2, MOD)\nfor i in range(n - 1, -1, -1): invfact[i] = invfact[i + 1] * (i + 1) % MOD\nself._fact, self._invfact = fact, invfact\n\ndef fact(self, n):\nreturn self._fact[n]\n\ndef invfact(self, n):\nreturn self._invfact[n]\n\ndef comb(self, n, k):\nreturn self._fact[n] * self._invfact[k] % MOD * self._invfact[n - k] % MOD if 0 <= k <= n else 0\n\ndef perm(self, n, k):\nreturn self._fact[n] * self._invfact[n - k] % MOD if 0 <= k <= n else 0\n\ndef resolve():\nk = int(input())\nn = len(input())\nmf = modfact(n + k)\nans = 0\nfor i in range(n, n + k + 1):\nans += mf.comb(n + k, i) * pow(25, n + k - i, MOD)\nans %= MOD\nprint(ans)\nresolve()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03660/s183197797.py",
  "f2_idx": "./Project_CodeNet_Python800/p02632/s436226525.py",
  "response": "No"
 },
 {
  "f1": "import sys, math\nfrom collections import defaultdict, deque, Counter\nfrom bisect import bisect_left, bisect_right\nfrom itertools import combinations, permutations, product\nfrom heapq import heappush, heappop\nfrom functools import lru_cache\ninput = sys.stdin.readline\nrs = lambda: input().strip()\nri = lambda: int(input())\nrl = lambda: list(map(int, input().split()))\nmat = lambda x, y, v: [[v]*y for _ in range(x)]\nten = lambda x, y, z, v: [mat(y, z, v) for _ in range(x)]\nmod = 1000000007\nsys.setrecursionlimit(1000000)\n\nN, M = rl()\nQ = []\nfor i in range(M):\nx, y, z = rl()\nx, y = x-1, y-1\nQ.append((x, y, z))\n\nids = [i for i in range(N)]\ndef find(x):\nif x != ids[x]:\np = find(ids[x])\nids[x] = p\nreturn ids[x]\n\ndef unite(x, y):\nx = find(x)\ny = find(y)\nids[x] = y\n\nfor x, y, z in Q:\nunite(x,y)\nfor i in range(N):\nfind(i)\nprint(len(Counter(ids)))",
  "f2": "n = int(input())\ns = list(set(list(input().split())))\nprint(\"Three\" if len(s)==3 else \"Four\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03045/s847943495.py",
  "f2_idx": "./Project_CodeNet_Python800/p03424/s159143684.py",
  "response": "No"
 },
 {
  "f1": "from collections import Counter\n\nn = int(input())\na = list(map(int, input().split()))\n\nac = Counter(a)\nif len(ac) == n:\nprint(\"YES\")\nelse:\nprint(\"NO\")",
  "f2": "sec_in = int(input())\n\nhour = int(sec_in / 3600)\nminute = int((sec_in % 3600) / 60)\nsec = int(sec_in % 60)\n\nprint('{0}:{1}:{2}'.format(hour,minute,sec))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02779/s137656942.py",
  "f2_idx": "./Project_CodeNet_Python800/p02390/s577329243.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\nif n==1:print(\"Hello World\")\nelse:print(int(input())+int(input()))",
  "f2": "from sys import stdin\ninput = stdin.readline\n\n\ndef main():\nS = input()[:-1]\n\ncnt = 0\nnw = 0\nfor i, s in enumerate(S):\nif s == 'W':\ncnt += (i-nw)\nnw += 1\n\nprint(cnt)\n\n\nif(__name__ == '__main__'):\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03238/s410566637.py",
  "f2_idx": "./Project_CodeNet_Python800/p03200/s633268903.py",
  "response": "No"
 },
 {
  "f1": "import sys\ninput = sys.stdin.readline\nN, D = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(N)]\n\nD_2 =pow(D, 2)\ncount = 0\nfor i in range(N):\na = pow(points[i][0], 2) + pow(points[i][1], 2)\nif D_2 >= a:\ncount +=1\n\nprint(count)",
  "f2": "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)で最大の2個とりだせるお a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3回\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\n#\n#\n#\n# pythonで無理なときは、pypyでやると正解するかも！！\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# 四捨五入g\n#\n# インデックス系\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\nreturn list(map(int,readline().split()))\ndef readTuples():\nreturn tuple(map(int,readline().split()))\ndef I():\nreturn int(readline())\ns = input()\nl = len(s)\nans = [1] * l\nfor i in range(l):\nif s[i] == 'R' and s[i+1] == 'R':\nans[i+2] += ans[i]\nans[i] = 0\nfor i in range(l-1,0,-1):\nif s[i-1] == 'L' and s[i] == 'L':\nans[i-2] += ans[i]\nans[i] = 0\nprint(*ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02595/s214687513.py",
  "f2_idx": "./Project_CodeNet_Python800/p02954/s849381628.py",
  "response": "No"
 },
 {
  "f1": "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\nif a<= b:\nprint(a*c)\nelse:\nprint(c*b +(a-b)*d)",
  "f2": "tmp = input().split(\" \")\n\nN = int(tmp[0])\nR = int(tmp[1])\n\nif N >= 10:\nprint(R)\nelse:\nans = R + 100 * (10 - N)\nprint(int(ans))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p04011/s047238137.py",
  "f2_idx": "./Project_CodeNet_Python800/p02765/s386045641.py",
  "response": "No"
 },
 {
  "f1": "import bisect\nA, B, Q = map(int, input().split())\nS = [int(input()) for _ in range(A)]\nT = [int(input()) for _ in range(B)]\nX = [int(input()) for _ in range(Q)]\n\nR = []\nfor x in X:\nSL, SR, TL, TR = 10**20, 10**20, 10**20, 10**20\ni = bisect.bisect_left(S, x)\nif i != 0:\nSL = x-S[i-1]\nif i != A:\nSR = S[i]-x\n\nj = bisect.bisect_left(T, x)\nif j != 0:\nTL = x-T[j-1]\nif j != B:\nTR = T[j]-x\n\nans = min(max(SL, TL), min(2*SL+TR, SL+2*TR),\nmin(2*TL+SR, TL+2*SR), max(SR, TR))\nR.append(ans)\nprint(*R, sep='\\n')",
  "f2": "n,m,X,Y = map(int,input().split())\nx = list(map(int,input().split()))\ny = list(map(int,input().split()))\nx.sort()\ny.sort()\nfor i in range(X+1,Y+1,1):\nif i <= min(y) and i > max(x):\nprint(\"No War\")\nbreak\nelse:\nprint(\"War\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03112/s052938516.py",
  "f2_idx": "./Project_CodeNet_Python800/p03251/s333229721.py",
  "response": "No"
 },
 {
  "f1": "a, b = map(int, input().split())\nif a < b:\nprint(a)\nelse:\nprint(max(a-1,b))",
  "f2": "def main():\nn,x = list(map(int,input().split()))\nl = list(map(int,input().split()))\nbound=0\nans=1\nfor i in range(0,n):\nbound+=l[i]\nif bound <=x:\nans+=1\nprint(ans)\n\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03359/s464721803.py",
  "f2_idx": "./Project_CodeNet_Python800/p03000/s500550463.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\nA = input()\nB = input()\nC = input()\na = [0] * n\nfor i in range(n):\nif (A[i] == B[i] and A[i] != C[i]):\na[i] += 1\nelif (A[i] == C[i] and A[i] != B[i]):\na[i] += 1\nelif (B[i] == C[i] and A[i] != B[i]):\na[i] += 1\nelif (A[i] == B[i] and B[i] == C[i]):\na[i] += 0\nelse:\na[i] += 2\n\nprint(sum(a))",
  "f2": "w,h,x,y=map(int,input().split())\nans1=w*h/2\n\nif w/2==x and h/2==y:\nans2=1\nelse:\nans2=0\nprint('{} {}'.format(ans1,ans2))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03140/s689614581.py",
  "f2_idx": "./Project_CodeNet_Python800/p03001/s632590194.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\nimport numpy as np\nMOD = 10 ** 9 + 7\ndef cumprod(a, p):\nl = len(a); sql = int(np.sqrt(l) + 1)\na = np.resize(a, sql ** 2).reshape(sql, sql)\nfor i in range(sql - 1): a[:, i+1] *= a[:, i]; a[:, i+1] %= p\nfor i in range(sql - 1): a[i+1] *= a[i, -1]; a[i+1] %= p\nreturn np.ravel(a)[:l]\n\ndef make_tables(n=10 ** 9, r=10 ** 7, p=MOD):\nfac = np.arange(r + 1); fac[0] = 1; fac = cumprod(fac, p)\nifac = np.arange(r + 1, 0, -1); ifac[0] = pow(int(fac[-1]), p - 2, p)\nifac = cumprod(ifac, p)[n::-1]\nn_choose = np.arange(n + 1, n - r, -1); n_choose[0] = 1;\nn_choose[1:] = cumprod(n_choose[1:], p) * ifac[1:r+1] % p\nreturn fac, ifac, n_choose\n\nfac, ifac, n_choose = make_tables()\n\ndef choose(n, r, p=MOD):\nreturn fac[n] * ifac[r] % p * ifac[n-r] % p\n\nn, k = map(int, sys.stdin.readline().split())\na = np.array(sys.stdin.readline().split(), dtype=np.int64)\na.sort()\n\ndef main():\nres = (a[k-1:] * choose(np.arange(k-1, n), k - 1) % MOD).sum() % MOD\nres -= (a[:n-(k-1)] * choose(np.arange(n-1, k-2, -1), k-1) % MOD).sum() % MOD\nres %= MOD\nprint(res)\n\nif __name__ == '__main__':\nmain()",
  "f2": "n,k,s = map(int, input().split())\nif s < 10**9:\nans = [s+1] * n\nelse:\nans = [1]*n\nans[:k] = [s]*k\nprint(\" \".join(map(str,ans)))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02804/s911594480.py",
  "f2_idx": "./Project_CodeNet_Python800/p02797/s363723203.py",
  "response": "No"
 },
 {
  "f1": "mod=10**9+7\nh,w=map(int,input().split())\ngrid=[]\nfor  i in range(h):\na=input()\ngrid.append(list(a))\n\ngrid[0][0]=1\nfor i in range(1,h):\nif(grid[i-1][0]==0):\ngrid[i][0]=0\nelif(grid[i][0]=='#'):\ngrid[i][0]=0\nelse:\ngrid[i][0]=grid[i-1][0]\nfor i in range(1,w):\nif(grid[0][i-1]==0):\ngrid[0][i]=0\nelif(grid[0][i]=='#'):\ngrid[0][i]=0\nelse:\ngrid[0][i]=grid[0][i-1]\n\nfor i in range(1,h):\nfor j in range(1,w):\nif(grid[i][j]=='#'):\ngrid[i][j]=0\nelse:\ngrid[i][j]=(grid[i][j-1]+grid[i-1][j])%mod\nprint(grid[h-1][w-1])\n# import pprint\n# grid.insert(0,grid)\n# pprint.pprint(grid)",
  "f2": "# -*- coding: utf-8 -*-\nimport sys\nfrom collections import deque, defaultdict\nfrom math import sqrt, factorial, gcd, ceil, atan, pi\ndef input(): return sys.stdin.readline()[:-1] # warning not \\n\n# def input(): return sys.stdin.buffer.readline().strip() # warning bytes\n# def input(): return sys.stdin.buffer.readline().decode('utf-8')\nimport string\n# string.ascii_lowercase\nfrom bisect import bisect_left\nMOD = int(1e9)+7\nINF = float('inf')\n\n\ndef solve():\n# n, m = [int(x) for x in input().split()]\nn = int(input())\na = []\nfor _ in range(n):\nx, l = [int(x) for x in input().split()]\ns = x - l\ne = x + l\na.append((s, e))\na.sort(key=lambda x: x[1])\nans = 0\nl = float('-inf')\nfor s, e in a:\nif s >= l:\nl = e\nelse:\nans += 1\nprint(n-ans)\n\nt = 1\n# t = int(input())\nfor case in range(1,t+1):\nans = solve()\n\n\n\"\"\"\na b a\nd c d\na b a\n\"\"\"",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03167/s360248255.py",
  "f2_idx": "./Project_CodeNet_Python800/p02796/s763898938.py",
  "response": "No"
 },
 {
  "f1": "a, b = [int(i) for i in input().split()]\ns = a + b\nif s >= 10:\nprint(\"error\")\nelse:\nprint(s)",
  "f2": "N = int(input())\nA = tuple(map(int, input().split()))\nM = [-1] * N\nacc = 0\nfor i in range(1, N, 2):\nacc += A[i]\nacc *= 2\nM[0] = sum(A) - acc\nfor i in range(N-1):\nM[i+1] = 2*A[i] - M[i]\nprint(*M)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03697/s962620304.py",
  "f2_idx": "./Project_CodeNet_Python800/p02984/s559908500.py",
  "response": "No"
 },
 {
  "f1": "N=int(input())\nA=list(map(int,input().split()))\nS=0\nfor i in A:\nS+=i\nprint('YES' if S%2==0 else 'NO')",
  "f2": "def main():\ndef flatten_list(l):\nfor el in l:\nif isinstance(el, list):\nyield from flatten_list(el)\nelse:\nyield el\nH, W = list(map(int, input().split()))\nn = int(input())\nA = list(map(int, input().split()))\nans = []\nfor i, a in enumerate(A):\nans .append([str(i + 1)] * a)\nans = list(flatten_list(ans))\nans = [ans[i:i + W] if i // W % 2 == 0 else ans[i + W - 1:i - 1:-1] for i in range(0, len(ans), W)]\n[print(' '.join(a)) for a in ans]\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03807/s740542246.py",
  "f2_idx": "./Project_CodeNet_Python800/p03638/s301529337.py",
  "response": "No"
 },
 {
  "f1": "def MAP(): return map(int, input().split())\nx = sorted(MAP())\nif x[0] + x[1] == x[2]:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "f2": "\ns = input()\n\nq = int(input())\nx = []\ny = []\n\nflag = 0\n\nfor i in range(q):\nli = list(input().split())\nif flag%2 == 0:\nif li[0] == \"2\":\nif li[1] ==\"1\":\nx.append(li[2])\nelse:\ny.append(li[2])\nelse:\nflag += 1\n\nelse:\nif li[0] == \"2\":\nif li[1] ==\"1\":\ny.append(li[2])\nelse:\nx.append(li[2])\nelse:\nflag += 1\n\nif flag%2 == 0:\nx = x[::-1]\nprint(\"\".join(x)+s+\"\".join(y))\n\nelse:\ns = s[::-1]\ny = y[::-1]\nprint(\"\".join(y)+s+\"\".join(x))\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03943/s325675287.py",
  "f2_idx": "./Project_CodeNet_Python800/p02756/s902380027.py",
  "response": "No"
 },
 {
  "f1": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**7)\nimport bisect\nimport heapq\nimport itertools\nimport math\nfrom collections import Counter, defaultdict, deque\nfrom copy import deepcopy\nfrom decimal import Decimal\nfrom math import gcd\nfrom operator import add, itemgetter, mul, xor\ndef cmb(n,r,mod):\nbunshi=1\nbunbo=1\nfor i in range(r):\nbunbo = bunbo*(i+1)%mod\nbunshi = bunshi*(n-i)%mod\nreturn (bunshi*pow(bunbo,mod-2,mod))%mod\nmod = 10**9+7\ndef I(): return int(input())\ndef LI(): return list(map(int,input().split()))\ndef MI(): return map(int,input().split())\ndef LLI(n): return [list(map(int, input().split())) for _ in range(n)]\n\nn = I()\ngraph =[[]*(n+1) for i in range(n+1)]\nans = [0]*(n+1)\nfor i in range(n-1):\nu,v,w = map(int,input().split())\nw = w%2\ngraph[u].append([v,w])\ngraph[v].append([u,w])\n#vをcに塗る。pはvの親\ndef dfs(v,p,c,ans):\nans[v] = c\nfor i in graph[v]:\nif i[0] == p:\ncontinue\nif i[1] == 1:\ndfs(i[0],v,1-c,ans)\nif i[1] == 0:\ndfs(i[0],v,c,ans)\ndfs(1,0,0,ans)\nfor i in ans[1:]:\nprint(i)",
  "f2": "#comb_mod(n, r, mod) = nCr % mod\ndef comb_mod(n, r, mod):\nans = 1\nif r <= n/2:\nfor i in range(n-r+1, n+1):\nans *= i\nans %= mod\nfor i in range(1, r+1):\nans *= pow(i, mod-2, mod)\nans %= mod\nelse:\nfor i in range(r+1, n+1):\nans *= i\nans %= mod\nfor i in range(1, n-r+1):\nans *= pow(i, mod-2, mod)\nans %= mod\nreturn ans\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\nans = 0\npattern = comb_mod(n-1, k-1, 10**9+7)\nfor i in range(n-k+1):\nans += (a[-(i+1)] - a[i]) * pattern\npattern *= (n-k-i) * pow(n-1-i, 10**9+5, 10**9+7)\npattern %= 10**9 + 7\nprint(ans % (10**9+7))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03044/s823467815.py",
  "f2_idx": "./Project_CodeNet_Python800/p02804/s013652818.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\nA = list(map(int, input().split()))\n\na=0\nresult=0\n\nfor i in range(n-1):\nif A[i] > A[i+1]:\na = A[i] - A[i+1]\nA[i+1] += a\nresult += a\n\nprint(result)",
  "f2": "from heapq import heappush, heappop\nimport sys\ninput = sys.stdin.readline\n\nN = int(input())\nG = [[] for _ in range(N+1)]\ndegree = [0] * (N+1)\nfor _ in range(N-1):\na, b = map(int, input().split())\nG[a].append(b)\nG[b].append(a)\ndegree[a] += 1\ndegree[b] += 1\nc = list(map(int, input().split()))\nc.sort(reverse=True)\n\nheap = []\nfor i in range(1, N+1):\nheappush(heap, (degree[i], i))\n\nM = 0\nnum = [0] * (N+1)\nwhile heap:\nd, i = heappop(heap)\nif num[i] != 0:\ncontinue\nnum[i] = c.pop()\nfor j in G[i]:\nif num[j] == 0:\nM += num[i]\ndegree[i] -= 1\ndegree[j] -= 1\nheappush(heap, (degree[j], j))\nprint(M)\nprint(' '.join(map(str, num[1:])))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02578/s119727384.py",
  "f2_idx": "./Project_CodeNet_Python800/p03026/s632966212.py",
  "response": "No"
 },
 {
  "f1": "s=input()\nk=len(s)\na=0\nb=0\nfor i in range(k):\nif s[i]=='0':\na+=1\nelse:\nb+=1\nprint(min(a,b)*2)",
  "f2": "N = int(input())\nc = list(input())\nw = c.count(\"W\")\nr = c.count(\"R\")\nwr = c[len(c) - w:].count(\"W\")\n\nprint(min(r, w - wr))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03107/s997893228.py",
  "f2_idx": "./Project_CodeNet_Python800/p02597/s761482336.py",
  "response": "No"
 },
 {
  "f1": "n, k = map(int, input().split())\nA = list(map(int, input().split()))\nA = sorted(A)\n\nMOD= 10**9+7\n\nf = [1]*(n+1)\ninv = [1]*(n+1)\n\nfor i in range(1, n+1):\nf[i] = f[i-1]*i%MOD\n\ninv[n] = pow(f[n], MOD-2, MOD)\nfor i in range(n-1, 0, -1):\ninv[i] = inv[i+1]*(i+1)%MOD\n\ndef nCr(n, r):\nreturn f[n]*inv[n-r]%MOD*inv[r]%MOD\n\nans = 0\nfor i in range(n):\nif i+1<k:\ncontinue\ncnt = nCr(i, k-1)\nans += cnt*A[i]%MOD\nans %= MOD\n\nfor i in range(n-1, -1, -1):\nif n-i<k:\ncontinue\ncnt = nCr(n-i-1, k-1)\nans -= cnt*A[i]%MOD\nans %= MOD\n\nprint(ans)",
  "f2": "def resolve():\nA, B, C, X = [int(input()) for _ in range(4)]\nans = 0\nfor a in range(min(X // 500, A) + 1):\nfor b in range(min(X // 100, B) + 1):\nfor c in range(min(X // 50, C) + 1):\nif a * 500 + b * 100 + c * 50 == X:\nans += 1\nprint(ans)\n\n\nif __name__ == \"__main__\":\nresolve()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02804/s948309842.py",
  "f2_idx": "./Project_CodeNet_Python800/p03448/s660179758.py",
  "response": "No"
 },
 {
  "f1": "N=int(input())\nS=input()\nnagasa=len(S)\nD=[]\ngoukei=0\nfor i in range(nagasa-1):\nif S[i+1]==\"E\":\ngoukei+=1\nelse:\ngoukei+=0\n#print(goukei)\n\nD.append(goukei)\nfor i in range(nagasa-1):\nif S[i]==\"W\":\ngoukei+=1\nelse:\ngoukei+=0\nif S[i+1]== \"W\":\ngoukei+=0\nelse:\ngoukei-=1\n\nD.append(goukei)\n#print(D)\nprint(min(D))",
  "f2": "n = int(input())\ntmp = [int(input()) for _ in range(n)]\nprint(len(set(tmp)))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03339/s701571773.py",
  "f2_idx": "./Project_CodeNet_Python800/p03470/s328592329.py",
  "response": "No"
 },
 {
  "f1": "import sys\ninput = sys.stdin.readline\n\ndef main():\nN, M = map(int, input().split())\nc = list(map(int, input().split()))\n\ndp = [i+100 for i in range(N+1)]\ndp[0] = 0\n\nfor i in range(1, N+1):\nfor t in c:\nif i - t >= 0:\ndp[i] = min(dp[i], dp[i-t] + 1)\n# print(dp)\nprint(dp[N])\n\nif __name__ == \"__main__\":\nmain()",
  "f2": "from collections import defaultdict\n\n\ndef main():\n_, _, m = map(int, input().split())\n\nrow_dict = defaultdict(int)\ncol_dict = defaultdict(int)\nrow_col_dict = defaultdict(set)\nfor _ in range(m):\nrow, col = map(int, input().split())\nrow_dict[row] += 1\ncol_dict[col] += 1\nrow_col_dict[row].add(col)\n\nmax_row_val = max(row_dict.values())\nmax_col_val = max(col_dict.values())\n\nmax_rows = {k for k, v in row_dict.items() if v == max_row_val}\nmax_cols = {k for k, v in col_dict.items() if v == max_col_val}\nans = max_row_val + max_col_val - 1\nflg = False\nif ans < m:\nfor row in max_rows:\nfor col in max_cols:\nif not col in row_col_dict[row]:\nans += 1\nflg = True\nbreak\nif flg:\nbreak\n\nprint(ans)\n\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02314/s086274125.py",
  "f2_idx": "./Project_CodeNet_Python800/p02580/s349625629.py",
  "response": "no"
 },
 {
  "f1": "n, k = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\ncnt = 0\nfor hi in h:\nif hi >= k:\ncnt += 1\nprint(cnt)",
  "f2": "n = int(input())\na = [int(input()) for _ in range(n)]\na.sort()\nfront = a[n - 1]\nback = a[n - 1]\ni = 0\nj = n - 2\nans = 0\nwhile i <= j:\ndiff1 = abs(front - a[i])\ndiff2 = abs(back - a[i])\ndiff3 = abs(front - a[j])\ndiff4 = abs(back - a[j])\nmx = max(diff1, diff2, diff3, diff4)\nans += mx\nif mx == diff1:\nfront = a[i]\ni += 1\nelif mx == diff2:\nback = a[i]\ni += 1\nelif mx == diff3:\nfront = a[j]\nj -= 1\nelse:\nback = a[j]\nj -= 1\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02898/s594828870.py",
  "f2_idx": "./Project_CodeNet_Python800/p03229/s182952830.py",
  "response": "No"
 },
 {
  "f1": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 9)\nMOD = 10 ** 9 + 7\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nC = [1] * 50\nfor i in range(50 - 1):\nC[i + 1] = 2 * C[i]\n\ncount = [0] * 50\n\nfor i in range(N):\na = A[i]\nj = 0\nwhile a:\nif a % 2 == 1:\ncount[j] += 1\nj += 1\na //= 2\n\nB = [0] * 60\nk = K\nj = 0\nwhile k:\nif k % 2 == 1:\nB[j] = 1\nj += 1\nk //= 2\n\nunder = [-1] * (j + 1)\njust = [0] * (j + 1)\n# print (j)\n\ntmp = 0\nfor i in range(49, j - 1, -1):\ntmp += C[i] * count[i]\n\nfor i in range(j - 1, -1, -1):\ntmp1 = count[i] #1の数\ntmp0 = N - tmp1 #0の数\nif B[i] == 0:\njust[i] = just[i + 1] + C[i] * tmp1\nif under[i + 1] >= 0:\nunder[i] = under[i + 1] + C[i] * max(tmp1, tmp0)\nelse: #B[i] == 1\njust[i] = just[i + 1] + C[i] * tmp0\nif under[i + 1] == -1:\nunder[i] = just[i + 1] + C[i] * tmp1\nif under[i + 1] >= 0:\nunder[i] = under[i + 1] + C[i] * max(tmp1, tmp0)\nunder[i] = max(under[i], just[i + 1] + C[i] * tmp1)\n\n\nprint (max(under[0], just[0]) + tmp)\n\n# print ('count', count)\n# print ('B', B)\n# print (under)\n# print (just)\n# print (tmp)",
  "f2": "n, m = map(int, input().split())\nuv = [list(map(int, input().split())) for _ in range(m)]\ns, t = map(int, input().split())\n\nnext_dict = {}\n\nfor i in range(1,n*3 + 1):\nnext_dict[i] = []\n\nfor i in range(m):\nu,v = uv[i]\nfor j in range(3):\nnext_dict[u + (j * n)].append((v + ((j+1)%3 * n )))\n\nfrom collections import deque\nd = deque()\nd.append(s)\n\nlength = [-1] * (3*n + 1)\nlength[s] = 0\n\nwhile(True):\nif(len(d) == 0):\nbreak\n\nnum = d.popleft()\nfor i in next_dict[num]:\nif( length[i] == -1 ):\nd.append(i)\nlength[i] = length[num] + 1\n\nif(length[t] != -1):\nbreak\n\nprint(length[t] // 3)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03138/s396354345.py",
  "f2_idx": "./Project_CodeNet_Python800/p02991/s570137542.py",
  "response": "No"
 },
 {
  "f1": "S = input()\nK = int(input())\n\ncurr = S[0]\ntmp = \"\"\nT = []\nfor s in S:\nif s == curr:\ntmp += s\nelse:\nT.append(tmp)\ncurr = s\ntmp = s\nT.append(tmp)\n\nif len(T) == 1:\nres = (len(S) * K) // 2\nprint(res)\nexit(0)\n\nres = 0\nt_first = T[0]\nt_last = T[-1]\n\nif t_first[0] != t_last[0]:\nres += (len(t_first) // 2) * K\nres += (len(t_last) // 2) * K\nelse:\nres += len(t_first) // 2\nres += len(t_last) // 2\nres += (len(t_first + t_last) // 2) * (K - 1)\n\nfor t in T[1:-1]:\nres += (len(t) // 2) * K\n\nprint(res)",
  "f2": "s=input()\na=l=0\nr=len(s)-1\nwhile l<r:\nif s[l]==\"x\":\nif s[r]==\"x\":\nl+=1\nr-=1\nelse:\na+=1\nl+=1\nelse:\nif s[r]==\"x\":\na+=1\nr-=1\nelse:\nif s[l]==s[r]:\nl+=1\nr-=1\nelse:\nprint(-1)\nexit()\nprint(a)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02891/s504739910.py",
  "f2_idx": "./Project_CodeNet_Python800/p03569/s901197666.py",
  "response": "No"
 },
 {
  "f1": "from math import ceil,floor,factorial,gcd,sqrt,log2,cos,sin,tan,acos,asin,atan,degrees,radians,pi,inf,comb\nfrom itertools import accumulate,groupby,permutations,combinations,product,combinations_with_replacement\nfrom collections import deque,defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom operator import itemgetter\nfrom heapq import heapify,heappop,heappush\nfrom queue import Queue,LifoQueue,PriorityQueue\nfrom copy import deepcopy\nfrom time import time\nimport string\nimport sys\nsys.setrecursionlimit(10 ** 7)\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return map(int,input().split())\ndef LIST()  : return list(MAP())\n\nh, w, a, b = MAP()\n\nfor i in range(h+1):\nfor j in range(w+1):\nif a*i + (w-a)*(h-i) == b*j + (h-b)*(w-j):\naa = i\nbb = j\nbreak\nelse:\ncontinue\nbreak\n\ns = [[0]*w for i in range(h)]\nsum = [0]*w\n\nfor i in range(h):\ntmp = 0\nfor j in range(w):\nif ( i < aa and tmp < a ) or ( i >= aa and tmp < w-a ):\nif ( j < bb and sum[j] < b ) or ( j >= bb and sum[j] < h-b ):\ns[i][j] = 1\ntmp += 1\nsum[j] += 1\n\nfor i in range(h):\nprint(*s[i][:], sep=\"\")",
  "f2": "n,k=map(int,input().split())\ncandle=list(map(int,input().split()))\nans=2000000000\nfor i in range(n-k+1):\nif candle[i]<0 and candle[i+k-1]>0:\ntemp=min(abs(candle[i]), candle[i+k-1])*2+max(abs(candle[i]), candle[i+k-1])\nelif candle[i+k-1]<=0:\ntemp=abs(candle[i])\nelif candle[i]>=0:\ntemp=candle[i+k-1]\nans=min(temp, ans)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02903/s261153669.py",
  "f2_idx": "./Project_CodeNet_Python800/p03274/s427730717.py",
  "response": "No"
 },
 {
  "f1": "h = int(input())\nw = int(input())\nn = int(input())\n\nx = max(h, w)\nans = (n + x - 1) // x\nprint(ans)",
  "f2": "first = input()\n(n,m) = first.split()\nint_n = int(n)\nint_m = int(m)\nint_n -= 1\nint_m -= 1\nprint(int_n*int_m)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02795/s427323478.py",
  "f2_idx": "./Project_CodeNet_Python800/p03635/s542575686.py",
  "response": "No"
 },
 {
  "f1": "h,n=map(int,input().split())\nc=[list(map(int,input().split()))for _ in range(n)]\nd=[0]*20002\nfor i in range(h):d[i]=min(d[i-a]+b for a,b in c)\nprint(d[h-1])",
  "f2": "#素数関連\ndef prime_numbers(x):\nif x < 2:\nreturn []\nprime_numbers = [i for i in range(x)]\nprime_numbers[1] = 0\nfor prime_number in prime_numbers:\nif prime_number > math.sqrt(x):\nbreak\nif prime_number == 0:\ncontinue\nfor composite_number in range(2 * prime_number, x, prime_number):\nprime_numbers[composite_number] = 0\nreturn [prime_number for prime_number in prime_numbers if prime_number != 0]\ndef is_prime(x):\nif x < 2:\nreturn False\nif x == 2 or x == 3 or x == 5:\nreturn True\nif x % 2 == 0 or x % 3 == 0 or x % 5 == 0:\nreturn False\nprime_number = 7\ndifference = 4\nwhile prime_number <= math.sqrt(x):\nif x % prime_number == 0:\nreturn False\nprime_number += difference\ndifference = 6 - difference\nreturn True\nfrom collections import deque\nn, d, a = map(int, input().split())\nxh = [list(map(int, input().split())) for i in range(n)]\nxh.sort()\nqueue = deque()\nans = 0\ncur = 0\nfor i in range(n):\nx, h = xh[i]\nwhile queue != deque() and queue[0][0] < x:\ncur -= queue.popleft()[1]\nh -= cur\nif h > 0:\ncur += a * ((h - 1) // a + 1)\nans += (h - 1) // a + 1\nqueue.append([x + 2 * d, a * ((h - 1) // a + 1)])\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02787/s183764092.py",
  "f2_idx": "./Project_CodeNet_Python800/p02788/s452491651.py",
  "response": "No"
 },
 {
  "f1": "from fractions import gcd\ndef lcm(x,y):\nreturn x*y//gcd(x,y)\nn,m = map(int,input().split())\ns=input()\nt=input()\n\nl=lcm(n,m)\nx=dict()\n\nfor i in range(n):\nx[i*(l//n)]=s[i]\n\nfor i in range(m):\nj=i*(l//m)\nif j in x and x[j]!=t[i]:\nprint(-1)\nexit()\nprint(l)",
  "f2": "import math\nN, A, B = map(int, input().split())\nH = [int(input()) for _ in range(N)]\n\nOK = max(H)//B+1\nNG = 0\n\nans = OK\nwhile OK-NG > 1:\nmid = (OK+NG)//2  # 試行する値\ncnt = 0\n\nfor h in H:\nif h > mid*B:\ncnt += math.ceil((h-mid*B)/(A-B))\n\nif cnt <= mid:\nOK = mid\nelse:\nNG = mid\n\nprint(OK)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03231/s146845191.py",
  "f2_idx": "./Project_CodeNet_Python800/p03700/s916742920.py",
  "response": "No"
 },
 {
  "f1": "HP, n = map(int, input().split())\nAB = [list(map(int,input().split())) for _ in range(n)]\n\n# DP\n## DP[i]は、モンスターにダメージ量iを与えるのに必要な魔力の最小コスト\n## DPの初期化\nDP = [float('inf')] * (HP+1); DP[0] = 0\n## HP分だけDPを回す.\nfor now_hp in range(HP):\n## 全ての魔法について以下を試す.\nfor damage, cost in AB:\n### 与えるダメージは、現在のダメージ量＋魔法のダメージか体力の小さい方\nnext_hp = min(now_hp+damage, HP)\n### 今の魔法で与えるダメージ量に必要な最小コストは、->\n####->現在わかっている値か今のHPまでの最小コスト＋今の魔法コストの小さい方\nDP[next_hp] = min(DP[next_hp], DP[now_hp]+cost)\nprint(DP[-1])",
  "f2": "input()\na = list(map(int, input().split()))\nprint(1 / sum(1 / ai for ai in a))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02787/s240075577.py",
  "f2_idx": "./Project_CodeNet_Python800/p02934/s213887705.py",
  "response": "No"
 },
 {
  "f1": "# -*- coding: utf-8 -*-\na = list(map(int, input().split()))\n\nans = 0\nfor i in a:\nif i == 1:\nans += 300000\nelif i == 2:\nans += 200000\nelif i == 3:\nans += 100000\n\nif a[0] == a[1] == 1:\nans += 400000\n\nprint(ans)",
  "f2": "a,b,t=map(int,input().split())\nprint(min(a*b,t))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02853/s091174814.py",
  "f2_idx": "./Project_CodeNet_Python800/p03501/s312577370.py",
  "response": "No"
 },
 {
  "f1": "from collections import defaultdict\nN,K=map(int,input().split())\nalist=list(map(int,input().split()))\n#print(alist)\n\nslist=[0]\nfor i in range(N):\nslist.append(slist[-1]+alist[i])\n#print(slist)\n\nsslist=[]\nfor i in range(N+1):\nsslist.append((slist[i]-i)%K)\n#print(sslist)\n\nanswer=0\nsi_dic=defaultdict(int)\nfor i in range(N+1):\nif i-K>=0:\nsi_dic[sslist[i-K]]-=1\n\nanswer+=si_dic[sslist[i]]\nsi_dic[sslist[i]]+=1\n\nprint(answer)",
  "f2": "n,k = map(int, input().split())\ns = input()\nans = [s[:k-1],s[k-1].lower(),s[k:]]\nprint(''.join(ans))\n\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02851/s246448021.py",
  "f2_idx": "./Project_CodeNet_Python800/p03041/s789963896.py",
  "response": "No"
 },
 {
  "f1": "s = int(input())\na = set()\nwhile not s in a:\na.add(s)\nif s&1 is 0: s //= 2\nelse: s = 3*s+1\nprint(len(a)+1)",
  "f2": "#!/usr/bin/env python3\n\nfrom copy import deepcopy\nMOD = 10 ** 9 + 7\n\ndef main():\nh, w, k = map(int, input().split())\nways = []\nfor way in range(2 ** (w - 1)):\nif isvalid(way):\nways.append(way)\ndp = [0 for i in range(w)]\ndp[0] = 1\nfor i in range(h):\ndppre = deepcopy(dp)\ndp = [0 for i in range(w)]\nfor j in range(w):\nfor way in ways:\ndp[j] += dppre[apply(way, j)]\ndp[j] %= MOD\nprint(dp[k - 1])\n\ndef apply(way, fr):\nlogic = [False]\nfor d in range(8):\nlogic.append(bool(way & 1))\nway >>= 1\nif logic[fr]:\nto = fr - 1\nelif logic[fr + 1]:\nto = fr + 1\nelse:\nto = fr\nreturn to\n\ndef isvalid(way):\nlogic = []\nfor d in range(7):\nlogic.append(bool(way & 1))\nway >>= 1\nfor d in range(6):\nif logic[d] & logic[d + 1]:\nreturn False\nreturn True\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03146/s498077569.py",
  "f2_idx": "./Project_CodeNet_Python800/p03222/s826901298.py",
  "response": "No"
 },
 {
  "f1": "x= list(map(int, input().split()))\nsum = 0\nfor i in x:\nsum = sum + i\ny = 15 - int(sum)\nprint(int(y))",
  "f2": "import math\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# num is numerator\n# den is denominator\nnum, den = A[0], 0\n\nfor i in A:\nnum = (num * i) // math.gcd(num, i)\n\nfor i in A:\nden += num // i\n\nans = num / den\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02639/s195102306.py",
  "f2_idx": "./Project_CodeNet_Python800/p02934/s715776887.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * n\nans = 0\n\nfor i in range(1, n+1):\nb[i-1] = a[i-1] - i\n\nsort_b = sorted(b)\nnum = sort_b[n // 2]\n\nfor i in range(n):\nans += abs(b[i] - num)\n\nprint(ans)",
  "f2": "a,b,c=map(int,input().split())\nnum1=0\nnum2=0\nnum3=0\nif a==b and b==c and a%2==0:\nprint(-1)\nelse:\nfor i in range(a*b*c):\nif a%2==1 or b%2==1 or c%2==1:\nbreak\nnum1=a//2\nnum2=b//2\nnum3=c//2\na=num2+num3\nb=num3+num1\nc=num1+num2\nprint(i)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03311/s791557548.py",
  "f2_idx": "./Project_CodeNet_Python800/p03723/s294220422.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\ns=0\nok=0\nfor i in range(n):\nlis=input().split()\nif lis[0]==lis[1]:\ns+=1\nif s>=3:\nok=1\nelse:\ns=0\nif ok==1:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "f2": "N,Q = map(int,input().split())\n\nadj = [list() for _ in range(N)]\nfor _ in range(N-1):\na,b = map(int,input().split())\nadj[a-1].append(b-1)\nadj[b-1].append(a-1)\n\nmemo = [0]*N\nfor _ in range(Q):\np,x = map(int,input().split())\nmemo[p-1] += x\n\nstack = [(None,0)]\nwhile stack:\np,v = stack.pop()\nfor u in adj[v]:\nif u != p:\nmemo[u] += memo[v]\nstack.append((v,u))\n\nprint(*memo)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02547/s455130680.py",
  "f2_idx": "./Project_CodeNet_Python800/p02936/s925766687.py",
  "response": "No"
 },
 {
  "f1": "#!/usr/bin/env python3\n\nn = int(input())\n\nsup = n % 2\nodd_num = n//2+sup\neven_num = n//2\n\nprint(odd_num/(even_num+odd_num))",
  "f2": "import math\nimport numpy as np\n\nN = int(input())\n\nN_half = math.floor(N/2)\n\ncounts = 0\nfor i in np.arange(1, N):\nj = N-i\nif(i != j ):\ncounts += 1\n\nprint(int(counts/2))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02897/s599449776.py",
  "f2_idx": "./Project_CodeNet_Python800/p02865/s142368600.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\n\n# 入力データ受取り時に、辞書に追加していくやり方\ns_dict = {}\nfor i in range(n):\ns = input()\nif s not in s_dict:\ns_dict[s] = 1\ns_dict[s] += 1\n\nmax_value = max(s_dict.values())\nans = []\nfor key, value in s_dict.items():\nif value == max_value:\nans.append(key)\n\nans.sort()\nfor i in ans:\nprint(i)",
  "f2": "A,B,H,M=map(int,input().split())\n\ndef degh(H,M):\nbdeg=30\nreturn bdeg*(H+M/60)\n\nimport math\ntheta=math.radians(degh(H,M)-M*360/60)\n\n# print(degh(H,M),M*360/60)\n\nprint((A**2+B**2-2*A*B*math.cos(theta))**0.5)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02773/s279571859.py",
  "f2_idx": "./Project_CodeNet_Python800/p02677/s825184207.py",
  "response": "No"
 },
 {
  "f1": "import sys\nsys.setrecursionlimit(200000)\n\nn = int(input())\n\nG = {}\nfor i in range(n):\nG.update({i: []})\n\nfor i in range(n - 1):\nu, v, w = map(int, input().split())\nG[u - 1].append([v - 1, w % 2])\nG[v - 1].append([u - 1, w % 2])\n\ncolor = [-1 for i in range(n)]\n\ndef dfs(graph, v, c):\ncolor[v] = c\n\nfor next_v in graph[v]:\ndis = next_v[1]\nif color[next_v[0]] != -1:\ncontinue\n\nif dis == 0:\nn_c = c\nelif dis == 1:\nn_c = 1 - c\n\ndfs(graph, next_v[0], n_c)\n\ndfs(G, 0, 0)\n[print(i) for i in color]",
  "f2": "import math\n#import numpy as np\nimport queue\nimport bisect\nfrom collections import deque,defaultdict\nimport heapq as hpq\nfrom sys import stdin,setrecursionlimit\n#from scipy.sparse.csgraph import dijkstra\n#from scipy.sparse import csr_matrix\nipt = stdin.readline\nsetrecursionlimit(10**7)\n\ndef main():\na,b,x = map(int,ipt().split())\nprint(b//x-(a-1)//x)\n\nreturn None\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03044/s301221238.py",
  "f2_idx": "./Project_CodeNet_Python800/p03861/s505953913.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nA = list(map(int,input().split()))\nfor i in range(N):\nA[i]-= i+1\nA.sort()\ntotal = sum(A)\nmean1 = total//N\nmean2 = total//N + 1\nmed1 = A[N//2]\n#med2 = A[N//2+1]\nans1 = 0\nans2 = 0\nans3 = 0\nans4 = 0\nfor a in A:\nans1+=abs(a-mean1)\nans2+=abs(a-mean2)\nans3+=abs(a-med1)\n#ans4+=abs(a-med2)\nprint(min([ans1,ans2,ans3]))",
  "f2": "import sys\nread = sys.stdin.buffer.read\nk, n, *A = read().split()\nfar = int(k) + int(A[0]) - int(A[-1])\nfor x, y in zip(A[1:], A):\nif far < int(x) - int(y):\nfar = int(x) - int(y)\nprint(int(k)-far)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03311/s382296514.py",
  "f2_idx": "./Project_CodeNet_Python800/p02725/s094819943.py",
  "response": "No"
 },
 {
  "f1": "# AtCoder Beginner Contest 086\n# C - Traveling\n\nN=int(input())\n\nT=0\nX,Y=0,0\n\nfor i in range (N):\nt, x, y =map(int,input().split())\ntime =t-T\ndistance=abs((x+y)-(X+Y))\nif time >= distance and time%2==distance%2:\nT=t\nX,Y=x,y\nelse :\nprint(\"No\")\nexit()\n\nprint(\"Yes\")",
  "f2": "import math\n\nk = int(input())\ns = 0\n\ndef gcd3(a, b, c):\nd = math.gcd(a, b)\ne = math.gcd(d, c)\nreturn e\n\n\nfor a in range(1, k+1):\nfor b in range(a, k+1):\nfor c in range(b, k+1):\nd = gcd3(a, b, c)\nif a == b and b == c:\ns += d\nelif a == b or b == c:\ns += d * 3\nelse:\ns += d * 6\n\nprint(s)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03457/s891600278.py",
  "f2_idx": "./Project_CodeNet_Python800/p02713/s465946387.py",
  "response": "No"
 },
 {
  "f1": "# coding: utf-8\n\n# https://atcoder.jp/contests/abc110\n\n\ndef main():\nN, M, X, Y = map(int, input().split())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nx = sorted(x)\ny = sorted(y)\n\nx_max = max(x)\ny_min = min(y)\n\nfor z in range(X+1, Y+1):\nif x_max < z <= y_min:\nreturn \"No War\"\n\nreturn \"War\"\n\n\nprint(main())",
  "f2": "from collections import Counter\nimport math\n\nN = int(input())\nc = Counter()\n\nfor i in range(2, math.ceil(math.sqrt(N)+1)+1):\nwhile N%i == 0:\nc.update([i])\nN = N // i\nif N!=1: c.update([N])\n\ndef R(n):\nret = 0\nfor i in range(1, n+1):\nif n>=i:\nret += 1\nn -= i\nelse:\nbreak\nreturn ret\n\nans = 0\nfor n in c:\nans += R(c[n])\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03251/s543124295.py",
  "f2_idx": "./Project_CodeNet_Python800/p02660/s537150920.py",
  "response": "No"
 },
 {
  "f1": "def main():\ns = int(input())\ne = set([s])\ni = 1\nwhile True:\ni += 1\ns = f(s)\nif s in e:\nprint(i)\nreturn\ne.add(s)\n\ndef f(n):\nif n % 2 == 0:\nreturn n // 2\nelse:\nreturn 3*n + 1\n\nif __name__ == \"__main__\":\nmain()",
  "f2": "a, b, h, m = map(int, input().split())\nimport math\n\ns = abs(360*((h/12)+(m/720)) - 360*(m/60))\nprint(math.sqrt(a**2+b**2-2*a*b*math.cos(math.radians(s))))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03146/s934903998.py",
  "f2_idx": "./Project_CodeNet_Python800/p02677/s102144537.py",
  "response": "No"
 },
 {
  "f1": "h,w,a,b = map(int,input().split())\nans = [[0]*w for i in range(h)]\nfl = True\n\nfor i in range(a):\nfor j in range(b):\nans[j][i] = 1\n\nfor i in range(w-a):\nfor j in range(h-b):\nans[b+j][a+i] = 1\n\nfor i in range(h):\nprint(*ans[i],sep = \"\")",
  "f2": "A,B = map(int, input().split())\n\nnow = 1\nfor i in range(100):\nif now >= B:\nprint(i)\nbreak\nnow -= 1\nnow += A",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02903/s825519320.py",
  "f2_idx": "./Project_CodeNet_Python800/p02922/s866043760.py",
  "response": "No"
 },
 {
  "f1": "import bisect,collections,copy,heapq,itertools,math,string\nimport sys\ndef S(): return sys.stdin.readline().rstrip()\ndef M(): return map(int,sys.stdin.readline().rstrip().split())\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef LS(): return list(sys.stdin.readline().rstrip().split())\nb = S()\nans = ''\nif b == 'A':\nans = 'T'\nif b == 'C':\nans = 'G'\nif b == 'G':\nans = 'C'\nif b == 'T':\nans = 'A'\nprint(ans)",
  "f2": "A, op, B = input().split()\nif op == '-':\nprint(int(A) - int(B))\nelse:\nprint(int(A) + int(B))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03085/s513099039.py",
  "f2_idx": "./Project_CodeNet_Python800/p03844/s351834395.py",
  "response": "No"
 },
 {
  "f1": "x,n = map(int,input().split())\nif n>0:\np = list(map(int,input().split()))\nelse:\nprint(x)\nexit()\ndx = 0\nwhile True:\nif x-dx not in p:\nprint(x-dx)\nexit()\nelif x+dx not in p:\nprint(x+dx)\nexit()\ndx+=1",
  "f2": "n,x,m = map(int, input().split())\n\nchk = [0 for i in range(m)]\na = x\ns = x\nc = 0\nary = [x]\nflg = False\nwhile True:\nif c == n:\nbreak\nx = (x**2)%m\ns += x\nc += 1\nif chk[x]:\nflg = True\nbreak\nary.append(x)\nchk[x] = c\nif flg == False:\nprint (sum(ary[:-1]))\nexit()\ncyc = ary[chk[x]:]\nl1 = len(cyc)\nss = ary[:chk[x]]\nl2 = len(ss)\ntot = sum(ss) + sum(cyc)*((n-l2)//l1) + sum(cyc[:((n-l2)%l1)])\nprint (tot)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02641/s735919961.py",
  "f2_idx": "./Project_CodeNet_Python800/p02550/s741161253.py",
  "response": "No"
 },
 {
  "f1": "#Nは頂点数, Mは辺数(2 <= N <= 1000, 1 <= M <= min(N(N-1, 2000)))\n#頂点1から頂点Nに移動して、移動スコアを最大にする\n#->移動スコアを正負反転させれば最短経路問題\n#->負閉路を考慮してベルマンフォード法を利用\nINF = 1 << 50\n\nN,M = map(int,input().split())\n\n#辺を登録\nSides = []\nfor i in range (M):\nSide = list(map(int,input().split()))\nSides.append(Side)\n#コストを反転\nSides[i][2] = Sides[i][2] * (-1)\n\n#各頂点の最短距離を初期化\nVertexes = [INF]*(N+1)\nVertexes[1] = 0\n\n#負閉路のチェック用\nnegative = [False] * (N+1)\n\n#ベルマンフォード法による最短距離探索\nfor count in range(N):\nfor i in range(M):\nfrom_v = Sides[i][0]\nto_v = Sides[i][1]\ncost = Sides[i][2]\nif (Vertexes[to_v] > Vertexes[from_v]+cost):\nif(count==N-1):\nnegative[to_v] = True\nelse:\nVertexes[to_v] = Vertexes[from_v]+cost\n\n#負閉路の確認\nfor count in range(N-1):\nflag = 0\nfor i in range(M):\nfrom_v = Sides[i][0]\nto_v = Sides[i][1]\nif negative[from_v] :\nnegative[to_v] = True\nflag = 1\n#if flag ==0:\n#   break\n\nif negative[N]:\nprint('inf')\nelse:\nprint(-Vertexes[N])",
  "f2": "N = int(input()) - 1\n\ndef solve():\nans = ''\nres = N\nq = 26\nwhile q > 0:\nq, r = divmod(res, 26)\nres = q-1\nans = chr(ord('a') + r) + ans\nreturn ans\n\nif __name__ == \"__main__\":\nprint(solve())",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03722/s770499970.py",
  "f2_idx": "./Project_CodeNet_Python800/p02629/s671050758.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\nA=list(map(int,input().split()))\n\nC=[0]*n\nfor i in range(n):\ncnt=0\nwhile A[i]%2==0:\ncnt+=1\nA[i]//=2\nC[i]=cnt\nprint(sum(C))",
  "f2": "def solve():\nH, W = map(int, input().split())\nA = [[i for i in input()] for _ in range(H)]\n\nx, y = 0, 0\nA[y][x] = '.'\nwhile True:\nif 0 <= x+1 < W and 0 <= y < H and A[y][x+1] == '#':\nx=x+1\nA[y][x] = '.'\nelif 0 <= x < W and 0 <= y+1 < H and A[y+1][x] == '#':\ny=y+1\nA[y][x] = '.'\nelse:\nbreak\n\nfor row in A:\nif '#' in row:\nreturn 'Impossible'\n\nreturn 'Possible' if x == W-1 and y == H-1 else 'Impossible'\n\nprint(solve())",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03325/s442571751.py",
  "f2_idx": "./Project_CodeNet_Python800/p03937/s481784090.py",
  "response": "No"
 },
 {
  "f1": "\n\nimport numpy as np\n\nn=int(input())\nans=0\nfor a_ in range(n):\nl,r=map(int,input().split())\nans+=r-l+1\nprint(ans)",
  "f2": "import numpy as np\n\nN, D = map(int, input().split())\nX = []\nfor i in range(N):\nX.append(list(map(int, input().split())))\n\nans = 0\nfor i in range(N):\nfor j in range(i + 1, N):\ndist = 0\nfor k in range(D):\ndist += abs(X[i][k] - X[j][k])**2\ndist = np.sqrt(dist)\nif dist % 1 == 0:\nans += 1\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03606/s953377480.py",
  "f2_idx": "./Project_CodeNet_Python800/p02982/s585681180.py",
  "response": "No"
 },
 {
  "f1": "S_list = [int(input()) for i in range(4)]\na,b,c,d = S_list\nprint(min(a,b)+min(c,d))",
  "f2": "S = input()\ncheck = []\nflg = 0\nans = []\nfor i in range(len(S)):\ncheck.append(S[i])\nif S[i] == \"L\":\nflg = 1\nif S[i] == \"R\" and flg == 1:\ncheck.pop()\nfor j in range(len(check)):\nif check[j] == \"L\":\no = j\nbreak\nanswer = [0 for p in range(len(check))]\nif len(check)%2 == 0:\nanswer[o] = int(len(check)/2)\nanswer[o-1] = int(len(check)/2)\nelse:\nif o%2 == 0:\nanswer[o] = len(check)//2+1\nanswer[o-1] = len(check)//2\nelse:\nanswer[o] = len(check)//2\nanswer[o-1] = len(check)//2 + 1\nfor z in answer:\nans.append(z)\ncheck = [\"R\"]\nflg = 0\nfor j in range(len(check)):\nif check[j] == \"L\":\no = j\nbreak\nanswer = [0 for p in range(len(check))]\nif len(check)%2 == 0:\nanswer[o] = int(len(check)/2)\nanswer[o-1] = int(len(check)/2)\nelse:\nif o%2 == 0:\nanswer[o] = len(check)//2+1\nanswer[o-1] = len(check)//2\nelse:\nanswer[o] = len(check)//2\nanswer[o-1] = len(check)//2 + 1\nfor z in answer:\nans.append(z)\nfor m in ans:\nprint(m,end=\" \")\nprint()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03399/s726256821.py",
  "f2_idx": "./Project_CodeNet_Python800/p02954/s195113362.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\ns = input()\ncheck = s.count(\"R\")\nq = s[:check]\nprint(q.count(\"W\"))",
  "f2": "def kcity(n , m):\n\nreturn (n - 1) * (m - 1)\n\ndef main():\nn , m = map(int , input().split())\nprint(kcity(n , m))\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02597/s893560839.py",
  "f2_idx": "./Project_CodeNet_Python800/p03635/s143565192.py",
  "response": "No"
 },
 {
  "f1": "N, A, B = map(int, input().split())\nmin_val = A * (N - 1) + B\nmax_val = A + B * (N - 1)\nprint(max(0, max_val - min_val + 1))",
  "f2": "a,b,c,d,e,f=map(int,input().split())\n\nrmax=0\nfor a100 in range(0,f+1,100*a):\nfor b100 in range(0,f-a100+1,100*b):\n#   for b100 in range(0,f+1,100*b):\nif a100+b100>0:\nfcd=f-a100-b100\nfor ci in range(0,fcd+1,c):\nfor di in range(0,fcd+1,d):\nif a100+b100+ci+di <=f:\nif (a100+b100)/100*e>=ci+di:\nif rmax<(ci+di)/(a100+b100):\nrmax=(ci+di)/(a100+b100)\nrab=a100+b100+ci+di\nrcd=ci+di\nif rmax>0:\nprint(rab,rcd)\nelse:\nprint(100*a,0)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03705/s055510057.py",
  "f2_idx": "./Project_CodeNet_Python800/p03599/s421182165.py",
  "response": "No"
 },
 {
  "f1": "s = input()\n\nn = int(s)\n\nanswer = 0\n\nfor i in range(n):\np = input().split()\nx = int(p[0])\ny = int(p[1])\nanswer += (y - x) + 1\n\nprint(answer)",
  "f2": "x = input()\nn = len(x)\nans = []\nfor i in range(n):\nif x[i] == 'S':\nans.append(x[i])\nelse:\nif len(ans) > 0:\nif ans[-1] == 'S':\nans.pop()\nelse:\nans.append(x[i])\nelse:\nans.append(x[i])\n# print(ans)\n\nprint(len(ans))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03606/s644256367.py",
  "f2_idx": "./Project_CodeNet_Python800/p03986/s528785579.py",
  "response": "No"
 },
 {
  "f1": "n, m = map(int, input().split())\nalst = [input() for _ in range(n)]\nblst = [input() for _ in range(m)]\n\nfor i in range(n - m + 1):\nfor j in range(n - m + 1):\nfor k, row in enumerate(blst):\nif alst[i + k][j:j + m] == blst[k]:\ncontinue\nbreak\nelse:\nprint(\"Yes\")\nexit()\nprint(\"No\")",
  "f2": "import sys\na1 = []\nfor l in sys.stdin:\na1.append(int(l))\na, b , c ,d = tuple(a1)\nprint( min([a , b]) + min([c , d ]))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03804/s880354305.py",
  "f2_idx": "./Project_CodeNet_Python800/p03399/s241116653.py",
  "response": "No"
 },
 {
  "f1": "def insertionSort(A, n, g, cnt):\nfor i in range(g, n):\nv = A[i]\nj = i - g\nwhile j >= 0 and A[j] > v:\nA[j+g] = A[j]\nj = j - g\ncnt += 1\nA[j+g] = v\n\nreturn cnt\n\n\ndef shellSort(A, n):\ncnt = 0\n\nG = []\nG.append(1)\nfor i in range(n):\ntmp = 3 * G[-1] + 1\nif tmp > n:\nbreak\nelse:\nG.append(tmp)\nG.reverse()\nm = len(G)\n\nprint(m)\nprint(*G)\n\nfor i in range(m):\ncnt = insertionSort(A, n, G[i], cnt)\n\nprint(cnt)\n\n\ndef main():\nn = int(input())\na = []\nfor i in range(n):\na.append(int(input()))\n\nshellSort(a, n)\n\nfor i in range(n):\nprint(a[i])\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "w,h,x,y = map(int,input().split())\nxx = w-x\nyy = h-y\nif x == xx and y == yy:\na = 1\nelse:\na = 0\nprint(w*h/2,a)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02262/s791160282.py",
  "f2_idx": "./Project_CodeNet_Python800/p03001/s258710528.py",
  "response": "No"
 },
 {
  "f1": "#coding:utf-8\n#3????????°???????????????\n\nn = input()\n\nprint \"\",\nfor i in xrange(1, n+1):\nif i % 3 == 0:\nprint i,\nelif \"3\" in str(i):\nprint i,",
  "f2": "numbers = []\nn = raw_input()\n\nnumbers = n.split(\" \")\n\nfor i in range(2):\nnumbers[i] = int(numbers[i])\n\nif numbers[0] > numbers[1]:\nprint \"a > b\"\nelif numbers[0] < numbers[1]:\nprint \"a < b\"\nelif numbers[0] == numbers[1]:\nprint \"a == b\"",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02406/s344398094.py",
  "f2_idx": "./Project_CodeNet_Python800/p02391/s338116296.py",
  "response": "No"
 },
 {
  "f1": "N, M = list(map(lambda x: int(x), input().split(\" \")))\nA = list(map(lambda y: int(y), input().split(\" \")))\nA.sort(reverse=True)\n\nprint(\"Yes\") if 0.25 * sum(A) / M <= A[M - 1] else print(\"No\")",
  "f2": "import numpy as np\nN = int(input())\n\nm = {}\nfor i in range(1, N + 1):\nx = str(i)\nif '0' in [x[0], x[-1]]:\ncontinue\nkey = str([x[0], x[-1]])\nadd = 1\n\nif key not in m:\nm[key] = add\nelse:\nm[key] += add\n\nans = 0\nfor i in range(1, 10):\nfor j in range(1, 10):\nkey = str([str(i), str(j)])\nif key in m:\nd = m[key]\nif i == j:\nans += d ** 2\nelif str([str(j),str(i)]) in m:\nans += d * m[str([str(j),str(i)])]\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02718/s935223920.py",
  "f2_idx": "./Project_CodeNet_Python800/p02792/s452408733.py",
  "response": "No"
 },
 {
  "f1": "def main():\nN = int(input())\nB = [float('inf')] + list(map(int, input().split())) + [float('inf')]\nA = []\nfor i in range(N):\nA.append(min(B[i], B[i+1]))\nprint(sum(A))\n\nif __name__ == \"__main__\":\nmain()",
  "f2": "import sys\nimport os\n\nii = lambda: int(sys.stdin.buffer.readline().rstrip())\nil = lambda: list(map(int, sys.stdin.buffer.readline().split()))\n\niss = lambda: sys.stdin.buffer.readline().decode().rstrip()\nisn = lambda n: [sys.stdin.buffer.readline().decode().rstrip() for _ in range(n)]\n\n\ndef main():\nif os.getenv(\"LOCAL\"):\nsys.stdin = open(\"input.txt\", \"r\")\n\nN = iss()\nprint('YES' if N in '753' else 'NO')\n\n\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02917/s689796284.py",
  "f2_idx": "./Project_CodeNet_Python800/p03210/s652937027.py",
  "response": "No"
 },
 {
  "f1": "from collections import Counter\na = Counter(input()).most_common()\nif len(a)==2:\nif a[1][1]==2:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "f2": "import itertools\n\nS = input()[::-1]\n\nm = [0]*len(S)\ntmp = 1\nfor i in range(len(S)):\nm[i] = int(S[i])*tmp%2019\ntmp = tmp*10%2019\n\ncum = [0]+[0]*len(S)\nfor i in range(1,len(S)+1):\ncum[i] = (cum[i-1]+m[i-1])%2019\n\nd = {}\nans = 0\nfor i in range(len(cum)):\nif cum[i] not in d:\nd[cum[i]] = 1\nelse:\nans += d[cum[i]]\nd[cum[i]] += 1\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02987/s226876907.py",
  "f2_idx": "./Project_CodeNet_Python800/p02702/s404346757.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\n\ntimes_ls = [0] * (n+1)\nfor base in range(1,n+1):\nfor j in range(1,n+1):\nif base * j <= n:\ntimes_ls[base * j] += 1\nelse:\nbreak\nans = 0\nfor i in range(1,n+1):\nans += i * times_ls[i]\nprint(ans)\n\n\n",
  "f2": "a,b,c,d=map(int,input().split())\na_b=set(range(a,b+1))\nc_d=set(range(c,d+1))\nprint(len(a_b&c_d)-1 if len(a_b&c_d)!=0  else 0)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02624/s057366484.py",
  "f2_idx": "./Project_CodeNet_Python800/p03632/s927744218.py",
  "response": "No"
 },
 {
  "f1": "x,y=map(int,input().split())\nx0=x\ny0=y\nX=[1,1,-1,-1]\nY=[1,-1,1,-1]\nl=[]\nfor i in range(4):\nx=x*X[i]\ny=y*Y[i]\nq=10**10\nif y-x>=0:\nq=y-x\nif X[i]==-1:\nq+=1\nif Y[i]==-1:\nq+=1\nl.append(q)\nx=x0\ny=y0\n\nprint(min(l))",
  "f2": "r=input().split()\nN=int(r[0])\nX=int(r[1])\nd=[int(s) for s in input().split()]\nans=1\nle=0\nfor i in range(N):\nle+=d[i]\nif le>X:\nprint(ans)\nbreak\nelif i==N-1:\nprint(N+1)\nelse:\nans+=1",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03838/s325991750.py",
  "f2_idx": "./Project_CodeNet_Python800/p03000/s448599790.py",
  "response": "No"
 },
 {
  "f1": "d, n = map(int, input().split())\nans = 0\nif n != 100:\nans = 100 ** d * n\nelse:\nans = 100 ** d * (n + 1)\nprint(ans)",
  "f2": "import sys\nN=int(input())\nA=[[*map(int,ln.split())] for ln in sys.stdin]\n\nans=0\na=0\nfor i in range(N):\na+=A[0][i]\nb=a\nfor j in range(i,N):\nb+=A[1][j]\nans=max(ans,b)\n\n#print(A)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03324/s710008809.py",
  "f2_idx": "./Project_CodeNet_Python800/p03449/s240831601.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\na = list(map(int,input().split()))\n\nb = []\nfor i in range(n):\nb.append(a[i]-i-1)\nb = sorted(b)\n\nans = 0\nk = b[n//2]\nfor i in range(n):\nans += abs(b[i]-k)\nprint(ans)",
  "f2": "s=int(input())\n\nmod=10**9+7\n\ndef c(a,p):\nx=1\nfor y in range(p+1,a+1):\nx=(x*y)%mod\nz=1\nfor y in range(1,a-p+1):\nz=(z*y)%mod\n#    print(\"x:\",x,\"z:\",z,(x* pow(z, mod-2,mod))%mod)\nreturn (x* pow(z, mod-2,mod))%mod\n\nss=s//3\nicnt=0\nfor sss in range(1,ss+1):\nr=s-3*sss\n#    print(\"icnt:\",icnt,\"sss:\",sss-1,\"r:\",r,c(sss-1+r,sss))\nicnt=(icnt+c(sss+r-1,sss-1))%mod\n\nprint(icnt)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03311/s757482783.py",
  "f2_idx": "./Project_CodeNet_Python800/p02555/s542734592.py",
  "response": "No"
 },
 {
  "f1": "a,b=[int(x) for x in input().split()]\nc=0\nfor i in range(1,12501):\nif int(0.08*i)==a and int(0.1*i)==b:\nans=i\nc=1\nbreak\nif c==1:\nprint(ans)\nelse:\nprint(-1)",
  "f2": "n,k = map(int,input().split())\nans = 0\nnum = n+1\nfor i in range(1,n+2):\n#i個選ぶとき\nif i>=k:\nans += num\nnum += n-(2*i)\nprint(ans%(10**9+7))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02755/s110684225.py",
  "f2_idx": "./Project_CodeNet_Python800/p02708/s671704606.py",
  "response": "No"
 },
 {
  "f1": "s=list(input().split(','))\nprint(s[0],s[1],s[2])",
  "f2": "a=input()\nb=input()\nc=input()\nfrom collections import deque\nda=deque(list(a))\ndb=deque(list(b))\ndc=deque(list(c))\nnow=da.popleft()\nwhile (1):\nif now==\"a\":\nif da:\nnow=da.popleft()\nelse:\nbreak\nelif now==\"b\":\nif db:\nnow=db.popleft()\nelse:\nbreak\nelif now==\"c\":\nif dc:\nnow=dc.popleft()\nelse:\nbreak\nprint(now.upper())",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03834/s519969902.py",
  "f2_idx": "./Project_CodeNet_Python800/p03998/s748322444.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\n\nt_0 = 0\nx_0 = 0\ny_0 = 0\nflag = True\n\nfor _ in range(N):\nt,x,y = map(int,input().split())\n\nif not (abs(x-x_0) + abs(y-y_0) <= abs(t-t_0) and (abs(x-x_0)+abs(y-y_0))%2 == abs(t-t_0)%2):\nflag = False\nx_0 = x\ny_0 = y\nt_0 = t\n\nprint(\"Yes\" if flag else \"No\")",
  "f2": "h,w = map(int,input().split())\nc = [0]*h\nfor i in range(h):\nc[i] = list(map(int,input().split()))\n\nL = []\nfor i in range(h):\nfor j in range(w):\nif c[i][j]%2 == 1:\n\nif j != w-1:\nc[i][j] -= 1\nc[i][j+1] += 1\nL.append([str(i+1),str(j+1),str(i+1),str(j+2)])\n\nelse:\nif i != h-1:\nc[i][j] -=1\nc[i+1][j] += 1\nL.append([str(i+1),str(j+1),str(i+2),str(j+1)])\n\nprint(len(L))\nfor x in L:\nprint(\" \".join(x))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03457/s699517686.py",
  "f2_idx": "./Project_CodeNet_Python800/p03263/s558712442.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nP = [int(input()) for _ in range(N)]\n\nans = sum(P) - max(P) // 2\nprint(ans)",
  "f2": "n = int(input())\nac = 0\nwa = 0\ntle = 0\nre = 0\nfor i in range(n):\nk = input().upper()\nif k == 'AC':\nac +=1\nelif k == 'WA':\nwa +=1\nelif k == 'TLE':\ntle +=1\nelif k == 'RE':\nre +=1\n\nprint('{} x {}'.format('AC',ac))\nprint('{} x {}'.format('WA',wa))\nprint('{} x {}'.format('TLE',tle))\nprint('{} x {}'.format('RE',re))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03207/s711094785.py",
  "f2_idx": "./Project_CodeNet_Python800/p02613/s863749362.py",
  "response": "No"
 },
 {
  "f1": "cards = [[False for i in range(13)] for j in range(4)]\npattern = [\"S\", \"H\", \"C\", \"D\"]\ncnt = int(input())\nfor i in range(cnt):\nch,rank = input().split()\nrank = int(rank)\ncards[pattern.index(ch)][rank-1] = True\n\nfor i in range(4):\nfor j in range(13):\nif cards[i][j] == False:\nprint(pattern[i], j+1)\n",
  "f2": "N = int(input())\nA, B = map(int, input().split())\nP = list(map(int, input().split()))\n\nQ1 = len([x for x in P if x <= A])\nQ2 = len([x for x in P if A+1 <= x <= B])\nQ3 = len([x for x in P if x >= B+1])\n\nprint(min(Q1, Q2, Q3))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02408/s364006408.py",
  "f2_idx": "./Project_CodeNet_Python800/p03156/s218876667.py",
  "response": "No"
 },
 {
  "f1": "def solve(hajime, ima, wa):\nfor i in range(10):\n#print(\"hajime : \"+str(hajime))\n#print(\"ima : \"+str(ima))\n#print(\"wa : \" + str(wa))\nif i == 1 and wa + c[ima][i] < toone[hajime]:\ntoone[hajime] = wa + c[ima][i]\nelif wa + c[ima][i] < toone[hajime] and i != ima:\nsolve(hajime, i, wa+c[ima][i])\nreturn\n\n\n\n\nh,w = list(map(int, input().split()))\nc = [list(map(int, input().split())) for i in range(10)]\na = [list(map(int, input().split())) for i in range(h)]\ntoone=[10**4]*10\ntoone[1]=0\n\nfor i in range(10):\nif i != 1:\nsolve(i, i, 0)\n\n#print(toone)\nans = 0\nfor i in range(h):\nfor j in range(w):\nif a[i][j] != -1:\nans += toone[a[i][j]]\nprint(ans)",
  "f2": "a, b = map(int, input().split())\nif a >= b + 1:\nprint(a + a-1)\nif b >= a+1:\nprint(b + b-1)\nif a == b:\nprint(a+a)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03546/s537166048.py",
  "f2_idx": "./Project_CodeNet_Python800/p03071/s309599329.py",
  "response": "No"
 },
 {
  "f1": "dbg = False\n\na, b = list(map(int, input().split()))\n\nif a > b:\nx, y = a, b\nelse:\nx, y = b, a\n\ndivs = [1]\nfor i in range(1, int((y+1)/2)+1):\ngcd_tmp = int(y / i)\nif dbg: print('%d, %d' % (i, gcd_tmp))\nif i > gcd_tmp:\nbreak\nif y % i == 0:\nif x % gcd_tmp == 0:\nprint(gcd_tmp)\nexit()\nelif x % i == 0:\ndivs.append(i)\n\nprint(max(divs))",
  "f2": "# coding: utf-8\n# Your code here!\nA,B,C=map(int,input().split())\n\nif (A+B)>C-1:\nprint(B+C)\nelse:\nprint(B+(A+B)+1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02256/s237170618.py",
  "f2_idx": "./Project_CodeNet_Python800/p03186/s089353934.py",
  "response": "No"
 },
 {
  "f1": "I=input;n=int(I());s=I();j=1;r=[]\nfor i in range(n):\nwhile (j<n)and(s[i:j] in s[j:]):j+=1\nr.append(j-i-1)\nprint(max(r))",
  "f2": "a,b,c=input().split()\nls=[a,b,c]\nls.sort()\nif ls[0]==ls[1]==ls[2]:\nprint(\"1\")\nelse:\nif ls[0]==ls[1]:\nprint(\"2\")\nelse:\nif ls[1]==ls[2]:\nprint(\"2\")\nelse:\nprint(\"3\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02913/s540904038.py",
  "f2_idx": "./Project_CodeNet_Python800/p03962/s702223187.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nA = map(lambda x: x - 1, map(int, input().split()))\nB = [0] * N\nfor a in A:\nB[a] += 1\nprint('\\n'.join(map(str, B)))",
  "f2": "a = []\nnum = 1\n\nwhile True:\nn = input()\nif n == 0:\nbreak\nprint (\"Case {}: {}\".format(num,n))\nnum +=1",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02707/s932816687.py",
  "f2_idx": "./Project_CodeNet_Python800/p02396/s610062385.py",
  "response": "No"
 },
 {
  "f1": "#float型を許すな\n#numpyはpythonで\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import Counter, deque\nfrom collections import defaultdict\nfrom itertools import combinations, permutations, accumulate, groupby, product\nfrom bisect import bisect_left,bisect_right\nfrom heapq import heapify, heappop, heappush\nfrom math import floor, ceil,pi,factorial\nfrom operator import itemgetter\nimport copy\ndef I(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\ndef LI2(): return [int(input()) for i in range(n)]\ndef MXI(): return [[LI()]for i in range(n)]\ndef SI(): return input().rstrip()\ndef printns(x): print('\\n'.join(x))\ndef printni(x): print('\\n'.join(list(map(str,x))))\ninf = 10**17\nmod = 10**9 + 7\nn,k=MI()\nlis=LI()\nfor i in range(min(k,100)):\nlis2=[0 for i in range(n)]\nfor i in range(n):\nlis2[max(0,i-lis[i])]+=1\nif i+lis[i]+1<n:\nlis2[i+lis[i]+1]+=-1\nlis=list(accumulate(lis2))\n#print(lis)\nprint(*lis)\n\n\n",
  "f2": "N=int(input())\ntrans=min([int(input()) for _ in range(5)])\nans=(N+(trans-1))//trans+4\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02647/s593267868.py",
  "f2_idx": "./Project_CodeNet_Python800/p03077/s427231967.py",
  "response": "No"
 },
 {
  "f1": "X,N = map(int, input().split())\nP = list(map(int, input().split()))\n\nif len(P) == 0:\nprint(X)\nelse:\nfor i in range(0,10000):\nif P.count(X-i) == 0:\nprint(X-i)\nbreak\nelif P.count(X+i) == 0:\nprint(X+i)\nbreak\nelse:\ncontinue",
  "f2": "import itertools\nimport sys\ninput = sys.stdin.readline\n\ndef prime_boolean_table(n):\nprimes = [True] * (n + 1)\nprimes[0] = False\nprimes[1] = False\nfor i in range(2, n + 1):\nif primes[i]:\nfor j in range(i + i, n + 1, i):\nprimes[j] = False\nreturn primes\n\ndef main():\npl = prime_boolean_table(10**5)\nql = [0]*(10**5+1)\nfor i in range(1,10**5+1):\nif pl[i] and pl[(i+1)//2]:\nql[i] += 1\nql = list(itertools.accumulate(ql))\nq = int(input())\nfor _ in range(q):\nl,r = map(int,input().split())\nprint(ql[r]-ql[l-1])\n\nif __name__=='__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02641/s267839336.py",
  "f2_idx": "./Project_CodeNet_Python800/p03476/s676566249.py",
  "response": "No"
 },
 {
  "f1": "# coding: utf-8\n# Your code here!\n\nS = input()\nT = input()\n\nans = 10000000\nfor i in range(len(T), len(S)+1):\nsub_S = S[i-len(T):i]\n\ncount = 0\nfor j in range(len(sub_S)):\nif T[j] != sub_S[j]:\ncount += 1\nans = min(ans, count)\n\nprint(ans)",
  "f2": "K = int(input())\nS = input()\n\nif len(S) <= K:\nprint (S)\nelse:\nprint (f'{S[:K]}...')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02571/s434248599.py",
  "f2_idx": "./Project_CodeNet_Python800/p02676/s359882613.py",
  "response": "No"
 },
 {
  "f1": "AB=[list(map(int,input().split())) for _ in range(3)]\n\ntmp=[]\nfor a,b in AB:\ntmp.append(a)\ntmp.append(b)\nfor i in set(tmp):\nif tmp.count(i)==3:\nprint('NO')\nexit()\nprint('YES')",
  "f2": "# AtCoder Beginner Contest 134\n# B - Golden Apple\n\nN,D= map(int,input().split())\n\nd=2*D+1\nn=N/d\n\nif n>N//d:\nprint(int(n)+1)\nelse:\nprint(int(n))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03130/s114689755.py",
  "f2_idx": "./Project_CodeNet_Python800/p02970/s715644260.py",
  "response": "No"
 },
 {
  "f1": "import sys\nsys.setrecursionlimit(4100000)\nimport math\nimport itertools\nINF = 10**9\n\ndef main():\nS = input()\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\nS_set = set(S)\nalphabet_set = set(alphabet)\n\narray = list(alphabet_set - S_set)\narray.sort()\nif len(array) == 0:\nprint('None')\nelse:\nprint(array[0])\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "n = int(input())\nsm = 0\nb_first = 0\na_end = 0\nb_a = 0\n\nfor i in range(n):\ns = input()\nfor j in range(len(s)-1):\nif s[j]==\"A\" and s[j+1]==\"B\":\nsm += 1\nif s[0]==\"B\" and s[-1]==\"A\": b_a += 1\nelif s[0]==\"B\": b_first += 1\nelif s[-1]==\"A\": a_end += 1\n\nans = sm\n\nif b_a == 0:\nans += min(b_first,a_end)\nelif b_first+a_end==0:\nans += b_a-1\nelse:\nans += b_a + min(b_first, a_end)\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03624/s226871408.py",
  "f2_idx": "./Project_CodeNet_Python800/p03049/s250922183.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\n\nprint(N*(N-1)//2-N//2)\nfor i in range(1, N):\nfor j in range(i+1, N+1):\nif N % 2 == 0:\nif i+j != N+1:\nprint(i, j)\nelse:\nif i+j != N:\nprint(i, j)",
  "f2": "import sys\n\nif sys.platform =='ios':\nsys.stdin=open('input_file.txt')\n\n\nS=input()\n\nprint(\"ABC\"+S)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03090/s599203223.py",
  "f2_idx": "./Project_CodeNet_Python800/p03643/s966350531.py",
  "response": "No"
 },
 {
  "f1": "s = input()\n\nna = nb = nc = 0\nfor c in s:\nif c == 'a':\nna += 1\nif c == 'b':\nnb += 1\nif c == 'c':\nnc += 1\n\nif abs(na - nb) < 2 and abs(na - nc) < 2 and abs(nb - nc) < 2:\nprint(\"YES\")\nelse:\nprint(\"NO\")",
  "f2": "s=list(input())\nl=len(s)\nans=0\n\nif len(set(s))==1:\nfor i in range(1,l+1):\nans+=i\nprint(ans)\nexit()\n\nfor i in range(l-1):\nif s[i]==\"<\" and s[i+1]==\">\":\nleft=1\nright=1\nfor j in range(i):\nif s[i-j-1]==\"<\":\nleft+=1\nelse:\nbreak\nfor j in range(l-i-2):\nif s[i+j+2]==\">\":\nright+=1\nelse:\nbreak\np=max(left,right)\nq=min(left,right)\nfor j in range(p):\nans+=(j+1)\nfor j in range(q-1):\nans+=(j+1)\nif s[0]==\">\":\nans+=1\nfor i in range(1,l):\nif s[i]==\">\":\nans+=(i+1)\nelse:\nbreak\nif s[-1]==\"<\":\nans+=1\nfor i in range(2,l+1):\nif s[-i]==\"<\":\nans+=i\nelse:\nbreak\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03524/s509982767.py",
  "f2_idx": "./Project_CodeNet_Python800/p02873/s389913124.py",
  "response": "No"
 },
 {
  "f1": "def main():\nimport collections\nK = int(input())\nN = len(input())\nmod = 10**9 + 7\n\ndef cmb(n, r, mod):\nif (r < 0 or r > n):\nreturn 0\nr = min(r, n-r)\nreturn g1[n] * g2[r] * g2[n-r] % mod\n\nn = N + K\ng1 = [1, 1]  # 元テーブル\ng2 = [1, 1]  # 逆元テーブル\ninverse = [0, 1]  # 逆元テーブル計算用テーブル\n\nfor i in range(2, n + 1):\ng1.append((g1[-1] * i) % mod)\ninverse.append((-inverse[mod % i] * (mod//i)) % mod)\ng2.append((g2[-1] * inverse[-1]) % mod)\n\nd = [0]*(K+1)\nd[0] = 1\nd2 = [0]*(K+1)\nd2[0] = 1\n\nfor i in range(K):\nd[i+1] = d[i]*26\nd[i+1] %= mod\n\nd2[i+1] = d2[i]*25\nd2[i+1] %= mod\n\nans = 0\nfor i in range(K+1):\nans += d2[K-i] * d[i] * cmb(N+K-i-1, N-1, mod)\nans %= mod\nprint(ans)\n\n\nmain()",
  "f2": "def fibonacci(n):\nif n == 0 or n == 1:\nF[n] = 1\nreturn F[n]\nif F[n] is not None:\nreturn F[n]\nF[n] = fibonacci(n - 1) + fibonacci(n - 2)\nreturn F[n]\n\n\nn = int(input())\nF = [None]*(n + 1)\nprint(fibonacci(n))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02632/s984743553.py",
  "f2_idx": "./Project_CodeNet_Python800/p02233/s450201579.py",
  "response": "No"
 },
 {
  "f1": "h,w=map(int,input().split())\nc=[[0]*10 for _ in range(10)]\nfor i in range(10):\nc[i]=list(map(int, input().split()))\n\na=[[0]*w for _ in range(h)]\nfor i in range(h):\na[i]=list(map(int, input().split()))\n\n\ndef warshall_floyd(d):\n#d[i][j]: iからjへの最短距離\nfor k in range(10):\nfor i in range(10):\nfor j in range(10):\nd[i][j] = min(d[i][j],d[i][k]+d[k][j])\nreturn d\n\n\nans=0\nfor i in range(h):\nfor j in range(w):\nif a[i][j]>-1:\nans+=warshall_floyd(c)[a[i][j]][1]\nprint(ans)",
  "f2": "s=input();print('GBoaodd'[s[0]==s[1] or s[1]==s[2] or s[2]==s[3]::2])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03546/s804982087.py",
  "f2_idx": "./Project_CodeNet_Python800/p02993/s728712387.py",
  "response": "No"
 },
 {
  "f1": "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\nN = I()\np = LI()\n\ncnt = len([j for i, j in zip(p, sorted(p)) if i != j])\nif cnt <= 2:\nprint('YES')\nelse:\nprint('NO')\n\nif __name__ == '__main__':\nresolve()",
  "f2": "print(1<<int(input()).bit_length()-1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02958/s186739520.py",
  "f2_idx": "./Project_CodeNet_Python800/p03644/s992699770.py",
  "response": "No"
 },
 {
  "f1": "n,m,k=map(int,input().split())\n\ndef black(x,y):\nreturn x*y+(n-x)*(m-y)\n\nfor i in range(n+1):\nfor j in range(m+1):\nif black(i,j)==k:\nprint(\"Yes\")\nexit()\n\nprint(\"No\")",
  "f2": "n = int(input())\nw = list(map(int, input().split()))\nans = float('inf')\n\nfor t in range(1, n):\ns1 = sum(w[:t])\ns2 = sum(w[t:])\nans = min(abs(s1-s2), ans)\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03592/s431056379.py",
  "f2_idx": "./Project_CodeNet_Python800/p03012/s989394486.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\nl=list(map(int,input().split()))\nm=n//2\nt=n%2+2\ndp=[0]*t\nfor i in range(m):\nfor j in range(t):\ndp[j]+=l[2*i+j]\nfor j in range(1,t):\ndp[j]=max(dp[j],dp[j-1])\nprint(dp[-1])",
  "f2": "s = input()\n\nj1 = s[0] == 'A'\nj2 = s[2:-1].count('C') == 1\nj3 = True\n\ns3 = set(s) - set('AC')\nfor i in s3:\nif i != i.lower():\nj3 = False\nbreak\n\nprint('AC') if j1 and j2 and j3 else print('WA')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02716/s347390848.py",
  "f2_idx": "./Project_CodeNet_Python800/p03289/s476531854.py",
  "response": "No"
 },
 {
  "f1": "s = input().rstrip()\nt = input().rstrip()\nn = 0\nfor i in range(len(s)):\nif s[i] == t[i]:\nn += 1\nprint(n)",
  "f2": "from collections import deque\n\nD = set()\nN = int(input())\n\nfor i in range(N):\nc, s = input().split()\nif c == \"insert\":\nD.add(s)\nelif c == \"find\":\nif (s in D):\nprint(\"yes\")\nelse:\nprint(\"no\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02921/s298344110.py",
  "f2_idx": "./Project_CodeNet_Python800/p02269/s346122460.py",
  "response": "No"
 },
 {
  "f1": "ls = []\nfor i in range(3):\nls.append(list(input().split(' ')))\n\nN = int(input())\nfor i in range(N):\nX = input()\nfor i in range(3):\nif X in ls[i]:\nls[i][ls[i].index(X)] = 0\n\nresult = False\nfor i in range(3):\nif ls[i].count(0) == 3:\nresult = True\nbreak\n\nif not result:\nfor i in range(3):\ncnt = 0\nfor j in range(3):\nif ls[j][i] == 0:\ncnt += 1\nif cnt == 3:\nresult = True\nbreak\n\nif not result:\ncnt = 0\nfor i in range(3):\nif ls[i][i] == 0:\ncnt += 1\nif cnt == 3:\nresult = True\n\nif not result:\ncnt = 0\nfor i in range(3):\nif ls[i][3-i-1] == 0:\ncnt += 1\nif cnt == 3:\nresult = True\n\nif result:\nprint('Yes')\nelse:\nprint('No')",
  "f2": "n,m=map(int,input().split())\nd=[0]*(n+1)\nfor i in range(m):\na,b=map(int,input().split())\nd[a]=(d[a]+1)%2\nd[b]=(d[b]+1)%2\nprint(\"NO\" if any(d) else \"YES\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02760/s864739888.py",
  "f2_idx": "./Project_CodeNet_Python800/p03724/s459817320.py",
  "response": "No"
 },
 {
  "f1": "def actual(n, P):\ncount = 0\n\nfor i in range(1, n - 1):\na, b, c = P[i - 1], P[i], P[i + 1]\n\nif (a < b < c) or (a > b > c):\ncount += 1\n\nreturn count\n\nn = int(input())\nP = list(map(int, input().split()))\n\nprint(actual(n, P))",
  "f2": "import math\nimport itertools\n\ndef main():\nN = int(input())\ntowns = []\nfor _ in range(N):\nx, y = map(int, input().split())\ntowns.append([x, y])\n\nans = 0\nfor order in itertools.permutations(list(range(N)), N):\nd = 0\nfor i in range(N-1):\ns, e = order[i], order[i+1]\nd += math.sqrt((towns[s][0] - towns[e][0]) ** 2 + (towns[s][1] - towns[e][1]) ** 2)\nans += d / math.factorial(N)\nprint(ans)\n\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02988/s454367847.py",
  "f2_idx": "./Project_CodeNet_Python800/p02861/s761178218.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\n\ndef input():\nreturn sys.stdin.readline()[:-1]\n\n# N = int(input())\n# A = [int(x) for x in input().split()]\n# a, b, c = map(int, input().split())\n# name1 = str(input())\n# alph = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5}\n\n\na, b= map(int, input().split())\nprint(max(a+b,a-b,a*b))",
  "f2": "N,Y=map(int,input().split())\nfor i in range(N+1):\nfor j in range(N+1):\nA,B,C=i*10000,j*5000,(N-i-j)*1000\nif A+B+C==Y and i+j+(N-i-j) and -1<N-i-j:\nprint(i,j,N-i-j)\nexit()\nprint(-1,-1,-1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03337/s211899043.py",
  "f2_idx": "./Project_CodeNet_Python800/p03471/s078819713.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\np=list(map(int,input().split()))\nans=0\nfor i in range(1,n-1):\nif p[i-1]<p[i]<p[i+1] or p[i+1]<p[i]<p[i-1]:\nans+=1\nelse :\nans+=0\nprint(ans)",
  "f2": "N,M = map(int,input().split())\nXYZ = [tuple(map(int,input().split())) for _ in range(N)]\nans = 0\nfor b in range(8):\narr = []\nfor x,y,z in XYZ:\nif b&1: x *= -1\nif b&2: y *= -1\nif b&4: z *= -1\narr.append(x+y+z)\narr.sort(reverse=True)\nans = max(ans, sum(arr[:M]))\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02988/s188204602.py",
  "f2_idx": "./Project_CodeNet_Python800/p03326/s851192962.py",
  "response": "No"
 },
 {
  "f1": "# -*- coding: utf-8 -*-\nimport sys\n\n\ndef main():\nN,K = list(map(int, sys.stdin.readline().split()))\nA_list = list(map(int, sys.stdin.readline().split()))\n\n\nfor i in range(K, len(A_list)):\nif A_list[i] > A_list[i-K]:\nprint(\"Yes\")\nelse:\nprint(\"No\")\n\n\n\nif __name__ == \"__main__\":\nmain()",
  "f2": "l = list(map(int, input().split()))\n\nwhile(l != []):\ntry:\nlength = len(str(l[0]+l[1]))\nprint(length)\nl = list(map(int, input().split()))\nexcept:\nbreak",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02602/s044819193.py",
  "f2_idx": "./Project_CodeNet_Python800/p00002/s301809292.py",
  "response": "No"
 },
 {
  "f1": "from bisect import bisect_right\nn = int(input())\na = int(input())\nx = [a * (-1)]\nfor _ in range(n-1):\na = int(input()) * (-1)\nif a >= x[-1]:\nx.append(a)\nelse:\nindex = bisect_right(x, a)\nx[index] = a\nprint(len(x))",
  "f2": "def out(bnum):\nprint(' '+str(bnum['1f']).replace(',','')[1:10*2])\nprint(' '+str(bnum['2f']).replace(',','')[1:10*2])\nprint(' '+str(bnum['3f']).replace(',','')[1:10*2])\n\nn = int(input())\nb1 = {'1f': [0]*10, '2f': [0]*10, '3f': [0]*10}\nb2 = {'1f': [0]*10, '2f': [0]*10, '3f': [0]*10}\nb3 = {'1f': [0]*10, '2f': [0]*10, '3f': [0]*10}\nb4 = {'1f': [0]*10, '2f': [0]*10, '3f': [0]*10}\nfor i in range(n):\nb, f, r, v = map(int,input().split())\nr -= 1\nif b == 1:\nb1[repr(f)+'f'][r] += v\nelif b == 2:\nb2[repr(f)+'f'][r] += v\nelif b == 3:\nb3[repr(f)+'f'][r] += v\nelif b == 4:\nb4[repr(f)+'f'][r] += v\nout(b1)\nprint('#'*20)\nout(b2)\nprint('#'*20)\nout(b3)\nprint('#'*20)\nout(b4)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02973/s199411270.py",
  "f2_idx": "./Project_CodeNet_Python800/p02409/s836824404.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\nN = int(input())\n#Bs = list(map(int, input().split()))\nBs = [B - 1 for B in map(int, input().split())]\n\nanss = []\nfor _ in range(N):\niNow = -1\nfor i in reversed(range(len(Bs))):\nif Bs[i] == i:\niNow = i\nbreak\nelse:\nprint(-1)\nsys.exit()\n\nanss.append(iNow)\n\nBs = Bs[:iNow] + Bs[iNow+1:]\n\nprint('\\n'.join(map(str, [ans+1 for ans in anss[::-1]])))",
  "f2": "x,y=map(int, input().split())\ncount=0\nfor i in range(x,y+1):\nif str(i)==str(i)[::-1]:count+=1\nprint(count)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03089/s802889009.py",
  "f2_idx": "./Project_CodeNet_Python800/p03416/s875057557.py",
  "response": "No"
 },
 {
  "f1": "a = [input() for i in range(2)]\n\nsp = \"\".join(sorted(list(a[0])))\ntmp = list(a[1])\ntmp.sort()\ntmp.reverse()\ntp = \"\".join(tmp)\n\nif sp < tp:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "f2": "import math\n\nK = int(input())\n\nA = input().split()\n\nfor i in range(K):\nA[i] = int(A[i])\n\nmaxlst = [0 for i in range(K)]\nminlst = [0 for i in range(K)]\n\nif A[K-1] != 2:\nprint(-1)\nquit()\n\nmaxlst[K-1] = 3\nminlst[K-1] = 2\n\nfor i in reversed(range(K-1)):\nif maxlst[i+1] < A[i] or (maxlst[i+1] % A[i] != 0 and minlst[i+1] % A[i] != 0 and int(maxlst[i+1]/A[i]) == int(minlst[i+1]/A[i])):\nprint(-1)\nquit()\nmaxlst[i] = int(A[i] - 1 + A[i] * math.floor(maxlst[i+1] / A[i]))\nminlst[i] = int(math.ceil(minlst[i+1] / A[i]) * A[i])\n\nprint(minlst[0], maxlst[0])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03486/s796613788.py",
  "f2_idx": "./Project_CodeNet_Python800/p03464/s738771276.py",
  "response": "No"
 },
 {
  "f1": "r, g, b = map(int, input().split())\nN = 10*g + b\n\nif N % 4 == 0:\nprint('YES')\nelse:\nprint('NO')",
  "f2": "N, M = map(int,input().split())\nred = [0] * N\nred[0] = 1\nboal = [1] * N\n\nfor i in range(M):\nx, y = map(int,input().split())\nx -= 1\ny -= 1\nif red[x] == 1 and boal[x] == 1:\nred[x] = 0\nboal[x] -= 1\nred[y] = 1\nboal[y] += 1\nelif red[x] == 1 and boal[x] > 1:\nboal[x] -= 1\nred[y] = 1\nboal[y] += 1\nelse:\nboal[x] -= 1\nboal[y] += 1\nprint(sum(red))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03693/s151941829.py",
  "f2_idx": "./Project_CodeNet_Python800/p04034/s919479743.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\nl=sorted(list(map(int, input().split())))\n\nans=0\nfor i in range(len(l)):\nfor j in range(i+1, len(l)):\nfor k in range(j+1, len(l)):\nif l[i]==l[j] or l[j]==l[k] or l[k]==l[i]:\ncontinue\nif l[i]+l[j]>l[k]:\nans+=1\nprint(ans)",
  "f2": "import sys\nsys.setrecursionlimit(10**6)\nfrom math import floor,ceil,sqrt,factorial,log\nfrom heapq import heappop, heappush, heappushpop\nfrom collections import Counter,defaultdict,deque\nfrom itertools import accumulate,permutations,combinations,product,combinations_with_replacement\nfrom bisect import bisect_left,bisect_right\nfrom copy import deepcopy\nfrom operator import itemgetter\nfrom fractions import gcd\nmod = 10 ** 9 + 7\ninf = float('inf')\nninf = -float('inf')\n\n#整数input\ndef ii(): return int(sys.stdin.readline().rstrip()) #int(input())\ndef mii(): return map(int,sys.stdin.readline().rstrip().split())\ndef limii(): return list(mii()) #list(map(int,input().split()))\ndef lin(n:int): return [ii() for _ in range(n)]\ndef llint(n: int): return [limii() for _ in range(n)]\n#文字列input\ndef ss(): return sys.stdin.readline().rstrip() #input()\ndef mss(): return sys.stdin.readline().rstrip().split()\ndef limss(): return list(mss()) #list(input().split())\ndef lst(n:int): return [ss() for _ in range(n)]\ndef llstr(n: int): return [limss() for _ in range(n)]\n\n#本当に貪欲法か？ DP法では？？\n#本当に貪欲法か？ DP法では？？\n#本当に貪欲法か？ DP法では？？\n\nn=ii()\narr=lin(n)+[0]\ncnt=0\nfor i in range(n):\nif arr[i]//2 >=1:\ncnt+=arr[i]//2\nif arr[i]%2==1 and arr[i+1]>0:\ncnt+=1\narr[i+1]-=1\nprint(cnt)\n\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02583/s415948797.py",
  "f2_idx": "./Project_CodeNet_Python800/p04020/s621926915.py",
  "response": "No"
 },
 {
  "f1": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\nn,m = map(int, input().split())\n\ndef factor(n, m=None):\n# mを与えると、高々その素因数まで見て、残りは分解せずにそのまま出力する\narr = {}\ntemp = n\nM = int(-(-n**0.5//1))+1\nif m is not None:\nM = min(m+1, M)\nfor i in range(2, M):\nif temp%i==0:\ncnt=0\nwhile temp%i==0:\ncnt+=1\ntemp //= i\narr[i] = cnt\n\nif temp!=1:\narr[temp] = 1\n\nif not arr:\narr[n] = 1\n\nreturn arr\n\nd = factor(m)\n\nM = 10**9+7 # 出力の制限\nN = max(d.values())+10+n # 必要なテーブルサイズ\n\ng1 = [None] * (N+1) # 元テーブル\ng2 = [None] * (N+1) #逆元テーブル\ninverse = [None] * (N+1) #逆元テーブル計算用テーブル\ng1[0] = g1[1] = g2[0] = g2[1] = 1\ninverse[0], inverse[1] = [0, 1]\n\nfor i in range( 2, N + 1 ):\ng1[i] = ( g1[i-1] * i ) % M\ninverse[i] = ( -inverse[M % i] * (M//i) ) % M # ai+b==0 mod M <=> i==-b*a^(-1) <=> i^(-1)==-b^(-1)*aより\ng2[i] = (g2[i-1] * inverse[i]) % M\n\ndef cmb(n, r, M):\nif ( r<0 or r>n ):\nreturn 0\nr = min(r, n-r)\nreturn (g1[n] * g2[r] * g2[n-r]) % M\n\nif m!=1:\nans = 1\nfor v in d.values():\nans *= cmb(v+n-1, n-1, M)\nans %= M\nelse:\nans = 1\nprint(ans%M)",
  "f2": "from collections import defaultdict\nn, W = map(int, input().split())\ndd = defaultdict(list)\nfor i in range(n):\nweight, value = map(int, input().split())\ndd[weight].append(value)\n\nfor k in dd.keys():\ndd[k].sort(reverse=True)\n\na = min(dd.keys())\nb, c, d = a+1, a+2, a+3\nans = 0\nfor w in range(len(dd[a])+1):\nfor x in range(len(dd[b])+1):\nfor y in range(len(dd[c])+1):\nfor z in range(len(dd[d])+1):\nif W < a*w+b*x+c*y+d*z:\ncontinue\nval = sum(dd[a][:w])+sum(dd[b][:x]) + \\\nsum(dd[c][:y])+sum(dd[d][:z])\nans = max(ans, val)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03253/s515183035.py",
  "f2_idx": "./Project_CodeNet_Python800/p03732/s102845343.py",
  "response": "No"
 },
 {
  "f1": "import collections\nn = int(input())\na = list(map(int,input().split()))\nc = collections.Counter(a)\nc_value = list(c.values())\nc_key = list(c.keys())\ncnt = 0\n\nfor i in range(len(c_key)):\nif c_key[i] > c_value[i]:\ncnt += c_value[i]\nelif c_value[i] > c_key[i]:\ncnt += c_value[i]- c_key[i]\nprint(cnt)",
  "f2": "from collections import deque\n\nH, W = map(int, input().split())\nA = [list(input()) for _ in range(H)]\n\nblack_idx = []\nfor h in range(H):\nfor w in range(W):\nif A[h][w] == \"#\":\nblack_idx.append([h,w])\n\ndistance = [[float(\"inf\")]*W for _ in range(H)]\nfor b in black_idx:\ndistance[b[0]][b[1]] = 0\n\nd = deque(black_idx)\nans = 0\n\nwhile d:\ny, x = d.popleft()\nfor new_y, new_x in ([int(y)+1, int(x)], [int(y), int(x)+1], [int(y)-1, int(x)], [int(y), int(x)-1]):\nif 0 <= new_y <= H-1 and 0 <= new_x <= W-1 and distance[y][x] + 1 < distance[new_y][new_x]:\ndistance[new_y][new_x] = distance[y][x] + 1\nans = max(ans, distance[y][x] + 1)\nd.append([new_y, new_x])\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03487/s463871022.py",
  "f2_idx": "./Project_CodeNet_Python800/p03053/s945596435.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nans = 0\nif N % 2 == 1:\npass\nelse:\ntwo = 0\nfive = 0\ntmp = 2\nwhile tmp <= N:\ntwo += N // tmp\ntmp *= 2\ntmp = 10\nwhile tmp <= N:\nfive += N // tmp\ntmp *= 5\nans = min(two, five)\nprint(ans)",
  "f2": "n,m=map(int,input().split())\np = 10**9+7\na=[1] * (n+1)\nfor i in range(m):\na[int(input())] =0\n\ndp = [0] * (n+1)\ndp[0]=1\ndp[1]=1 if a[1] else 0\nfor i in range(2,n+1):\ndp[i] = a[i] * (dp[i-2]*a[i-2] + dp[i-1]*a[i-1]) % p\nprint(dp[n]%p)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02833/s264450785.py",
  "f2_idx": "./Project_CodeNet_Python800/p03013/s537175208.py",
  "response": "No"
 },
 {
  "f1": "import math\nfrom functools import reduce\n\nN, X = map(int, input().split())\nx = list(map(int, input().split()))\nx.append(X)\nx.sort()\nans = x[1] - x[0]\nfor i in range(1, N):\nans = math.gcd(ans, x[i+1] - x[i])\n\nprint(ans)",
  "f2": "class UnionFind:\ndef __init__(self, n):\nself.p = [-1]*n\n# union by rank\nself.r = [1]*n\n\ndef find(self, x):\nif self.p[x] < 0:\nreturn x\nelse:\nself.p[x] = self.find(self.p[x])\nreturn self.p[x]\n\ndef union(self, x, y):\nrx, ry = self.find(x), self.find(y)\n\nif rx != ry:\nif self.r[rx] > self.r[ry]:\nrx, ry = ry, rx\nif self.r[rx] == self.r[ry]:\nself.r[ry] += 1\nself.p[ry] += self.p[rx]\nself.p[rx] = ry\n\ndef same(self, x, y):\nreturn self.find(x) == self.find(y)\n\ndef count_member(self, x):\nreturn -self.p[self.find(x)]\n\nn,m=map(int,input().split())\nuf=UnionFind(n+1)\nans=n\n\nfor i in range(m):\nx,y,z=map(int,input().split())\nif not(uf.same(x,y)):\nuf.union(x,y)\nans-=1\nuf.union(x,y)\n\nprint(ans)\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03262/s798021965.py",
  "f2_idx": "./Project_CodeNet_Python800/p03045/s750711803.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\na = [int(i) for i in input().split()]\n\nif n // 2 == 1:\nprint(max(a))\nexit()\nif n < 20:\nd = a.copy()\n\nfor i in range(1, n // 2):\nb = [0] * n\nc = -10 ** 24\nans = -10 ** 24\nfor j in range(i * 2, n):\nc = max(c, a[j - 2])\nb[j] = c + d[j]\nans = max(ans, c + d[j])\n\na = b.copy()\nprint(ans)\nexit()\n\nb = a[:10]\ne = [True]*10\n\nfor i in range(1, n // 2):\nc = [0] * 10\nf = [False]*10\nd = -10**24\nfor j in range(10):\nif 2 * i + j >= n:\ncontinue\nif not e[j]:\ncontinue\nd = max(d, b[j])\nc[j] = d + a[2 * i + j]\nf[j] = True\ne = f.copy()\nb = c.copy()\nans = -10 ** 24\nfor i in range(10):\nif e[i]:\nans = max(ans, b[i])\nprint(ans)",
  "f2": "import sys\ninput = sys.stdin.readline\n\ndef unite(node_a, node_b):\nroot_a = node_a.root()\nroot_b = node_b.root()\nif root_a == root_b:\nreturn False\nif root_b.depth > root_a.depth:\nroot_a, root_b = root_b, root_a\nroot_b.is_root = False\nroot_b.parent = root_a\nroot_a.depth = max(root_a.depth, root_b.depth+1)\nreturn True\n\nclass Node:\ndef __init__(self, id):\nself.id = id\nself.is_root = True\nself.parent = None\nself.depth = 1\n\ndef root(self):\nif self.is_root:\nreturn self\nelif self.parent.is_root:\nreturn self.parent\nelse:\nself.parent = self.parent.root()\nreturn self.parent\n\ndef main():\nN, K, L = map(int, input().split())\n\ntrains = [Node(i) for i in range(N)]\nstreets = [Node(i) for i in range(N)]\n\nfor i in range(K):\np, q = map(int, input().split())\np -= 1; q -= 1\nunite(trains[p], trains[q])\nfor i in range(L):\nr, s = map(int, input().split())\nr -= 1; s -= 1\nunite(streets[r], streets[s])\ndic = {}\nroots = []\nfor i in range(N):\ntmp = (trains[i].root().id, streets[i].root().id)\nroots.append(tmp)\nif tmp in dic:\ndic[tmp] += 1\nelse:\ndic[tmp] = 1\n\nfor i in range(N-1):\nprint(dic[roots[i]], end=\" \")\nprint(dic[roots[N-1]])\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02716/s031327888.py",
  "f2_idx": "./Project_CodeNet_Python800/p03855/s992096204.py",
  "response": "No"
 },
 {
  "f1": "import sys\nINF = 1 << 60\nMOD = 10**9 + 7 # 998244353\nsys.setrecursionlimit(2147483647)\ninput = lambda:sys.stdin.readline().rstrip()\nimport networkx as nx\ndef resolve():\nn = int(input())\nA = [tuple(map(int, input().split())) for _ in range(n)]\nB = [tuple(map(int, input().split())) for _ in range(n)]\nG = nx.Graph()\nG.add_nodes_from(range(n))\nG.add_nodes_from(range(n, 2 * n))\nfor i in range(n):\nax, ay = A[i]\nfor j in range(n):\nbx, by = B[j]\nif ax < bx and ay < by:\nG.add_edge(i, n + j)\n\nA = nx.algorithms.bipartite.maximum_matching(G, top_nodes = range(n))\nprint(len(A) // 2)\nresolve()",
  "f2": "import math\nimport sys\nN, A, B = map(int, input().split())\n\nv = list(map(int, input().split()))\nv.sort()\n\ndef reduce(x):\na = x[0]\nb = x[1]\nc = math.gcd(a,b)\nreturn (a//c, b//c)\n\ndef add_dict(dic, a, s):\nif a in dic:\ndic[a] += s\nelse:\ndic[a] = s\n\ndef comb(a, b):\nb = min(b, a-b)\nans = 1\nfor i in range(a,a-b,-1):\nans *= i\nfor j in range(1,b+1):\nans //= j\nreturn ans\n\nct = {}\nv.reverse()\nsm = 0 #価値の和\ni_prv = -1 #前回のvの値がでてくる最後の項数を示す\ni_nxt = 0\nsearch = True\ndict_keys_list = []\nfor i in range(B):\nif search: # i_nxtを探す\nj = i\nwhile j < N-1 and v[j] == v[j+1]:\nj += 1\ni_nxt = j\nsearch = False\n\nsm += v[i]\nif A-1 <= i <= B-1: #品物はA個以上B個以下選ぶ\nadd_dict(ct, reduce((sm, i+1)), comb(i_nxt-i_prv, i-i_prv))\ndict_keys_list.append(reduce((sm, i+1)))\n\nif i == i_nxt: #値が次に減る時は、i_prvを更新\ni_prv = i_nxt\nsearch = True\n\n\ndict_keys_list.sort(key = lambda x: x[0]/x[1])\nprint(dict_keys_list[-1][0] / dict_keys_list[-1][1])\n#print(dict_keys_list)\n#print(ct)\nprint(ct[dict_keys_list[-1]])\n\n\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03409/s963281601.py",
  "f2_idx": "./Project_CodeNet_Python800/p03776/s532249266.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\na = list(map(int, input().split()))\n\nif n == 3:\nif a[0] == a[1]^a[2]:\nprint(\"Yes\")\nelse:\nprint(\"No\")\nelif sum(a) == 0:\nprint(\"Yes\")\nelse:\nvals = []\ncnts = []\n\nfor i in range(n):\nif a[i] in vals:\ncnts[vals.index(a[i])] += 1\nelse:\nif len(vals) == 3:\nprint(\"No\")\nexit()\n\nvals.append(a[i])\ncnts.append(1)\n\nif len(vals) == 3 and (vals[0] == vals[1]^vals[2]) and (cnts[0] == cnts[1] and cnts[1] == cnts[2]):\nprint(\"Yes\")\nelif len(vals) == 2 and (vals[0] == 0 or vals[1] == 0):\nif vals[0] == 0 and  2*cnts[0] == cnts[1]:\nprint(\"Yes\")\nelif vals[1] == 0 and cnts[0] == 2*cnts[1]:\nprint(\"Yes\")\nelse:\nprint(\"No\")\nelse:\nprint(\"No\")",
  "f2": "def main():\nfrom sys import stdin, setrecursionlimit\nsetrecursionlimit(10**6)\n#r = stdin.readline()[:-1]\n#n = int(stdin.readline()[:-1])\n#r = [stdin.readline() for i in range(n)]\n#t = [int(stdin.readline()) for i in range(n)]\nt = [int(stdin.readline()) for i in range(4)]\n\n#res = 0\n#a, b, c = map(int, r.split())\nprint(min(t[0],t[1])+min(t[2],t[3]))\n\nif __name__ == '__main__':\nmain()\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02975/s097194547.py",
  "f2_idx": "./Project_CodeNet_Python800/p03399/s384775308.py",
  "response": "No"
 },
 {
  "f1": "n,k=map(int,input().split())\nl=sorted([int(s) for s in input().split()])\nprint(sum(l[k*(-1):]))",
  "f2": "def main():\na,b = map(int, input().split())\nif a >= b:\nprint(10)\nelse:\nprint(0)\n\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03658/s185213495.py",
  "f2_idx": "./Project_CodeNet_Python800/p02999/s933306842.py",
  "response": "no"
 },
 {
  "f1": "A,B,K = map(int,input().split())\n\nls_1 = [i for i in range(A,min(A+K,B+1))]\nls_2 = [j for j in range(max(A,B-K+1),B+1) if j not in ls_1]\nls = ls_1 + ls_2\n\nfor ans in ls:\nprint(ans)",
  "f2": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools\nimport time,random\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\nmod2 = 998244353\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(): return [list(map(int, l.split())) for l in sys.stdin.readlines()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\ndef pe(s): return print(str(s), file=sys.stderr)\ndef JA(a, sep): return sep.join(map(str, a))\ndef JAA(a, s, t): return s.join(t.join(map(str, b)) for b in a)\n\n\ndef main():\nn,k = LI()\na = LI()\ns = sum(a)\ndv = set([1,s])\nfor i in range(2,int(s**0.5)+5):\nif s%i == 0:\ndv.add(i)\ndv.add(s//i)\n\ndef f(i):\npm = []\nfor c in a:\nt = c % i\nif t == 0:\ncontinue\npm.append((i-t, t))\npm.sort()\np = pi = m = 0\nmi = len(pm) - 1\nwhile pi <= mi:\nif p < m:\np += pm[pi][0]\npi += 1\nelse:\nm += pm[mi][1]\nmi -= 1\nreturn max(p,m) <= k\n\nr = 1\nfor c in dv:\nif f(c):\nif r < c:\nr = c\n\nreturn r\n\n\nprint(main())\n\n\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03386/s185988729.py",
  "f2_idx": "./Project_CodeNet_Python800/p02955/s388856072.py",
  "response": "No"
 },
 {
  "f1": "H = int(input())\ncount = 1\nenemy = 1\nwhile H>1:\nH = H//2\nenemy = enemy * 2\ncount = count + enemy\nprint(count)",
  "f2": "N, M, C = map(int, input().split())\nB = list(map(int, input().split()))\n\ncnt = 0\nfor _ in range(N):\nA = list(map(int, input().split()))\ntemp = C\nfor i in range(M):\ntemp += A[i]*B[i]\nif temp > 0:\ncnt += 1\n\nprint(cnt)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02786/s939202241.py",
  "f2_idx": "./Project_CodeNet_Python800/p03102/s607056731.py",
  "response": "No"
 },
 {
  "f1": "r, g, b = map(int, input().split())\nN = 10*g + b\n\nif N % 4 == 0:\nprint('YES')\nelse:\nprint('NO')",
  "f2": "A,B,C =map(int,input().split())\ncon = 0\nif A % 2 == 1 or B % 2 == 1 or C % 1 == 1:\nprint(0)\nexit()\nif A == B and B == C:\nprint(-1)\nexit()\nwhile A % 2 == 0 and B % 2 == 0 and C % 2 == 0:\ncon += 1\nD = A / 2\nE = B / 2\nF = C / 2\nA = E + F\nB = D + F\nC = D + E\nprint(con)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03693/s151941829.py",
  "f2_idx": "./Project_CodeNet_Python800/p03723/s582964885.py",
  "response": "No"
 },
 {
  "f1": "def main():\nn=int(input())\nans=0\nfor i in range(1,10):\nfor j in range(1,10):\nif n==i*j:\nans=1\nbreak\nif ans==1:\nbreak\nif ans==1:\nprint(\"Yes\")\nelse:\nprint(\"No\")\n\nmain()",
  "f2": "a,b=map(int,input().split())\nans=str()\nif a<b:\nfor i in range(b):\nans+=str(a)\nelif a>b:\nfor i in range(a):\nans+=str(b)\nelse:\nfor i in range(a):\nans+=str(a)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02880/s605623509.py",
  "f2_idx": "./Project_CodeNet_Python800/p02790/s466510555.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nA = list(map(int, input().split()))\nQ = int(input())\nB = []\nC = []\nfor q in range(Q):\nb, c = map(int, input().split())\nB.append(b)\nC.append(c)\n\nsam = sum(A)\nbaketu = [0]*(100001)\nfor a in A:\nbaketu[a] += 1\n\nfor q in range(Q):\nsam = sam + baketu[B[q]] * (C[q] - B[q])\nbaketu[C[q]] += baketu[B[q]]\nbaketu[B[q]] = 0\n#print(baketu)\nprint(sam)",
  "f2": "import sys\ninput = sys.stdin.readline\n\nN = int(input())\n\nv = [[] for _ in range(N)]\nfor _ in range(N-1) :\na, b = map(int, input().split())\nv[a-1].append(b-1)\nv[b-1].append(a-1)\n\nqa, qb = [0], [N-1]\nsa, sb = 0, 0\nvisited = [False] * N\nvisited[0] = visited[N-1] = True\n\nwhile qa or qb :\nqa_ = []\nwhile qa :\ncur = qa.pop()\nfor nex in v[cur] :\nif not visited[nex] :\nvisited[nex] = True\nqa_.append(nex)\nsa += 1\nqa = qa_\n\nqb_ = []\nwhile qb :\ncur = qb.pop()\nfor nex in v[cur] :\nif not visited[nex] :\nvisited[nex] = True\nqb_.append(nex)\nsb += 1\nqb = qb_\n\nif sa > sb :\nprint('Fennec')\nelse :\nprint('Snuke')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02630/s408871464.py",
  "f2_idx": "./Project_CodeNet_Python800/p03660/s863031145.py",
  "response": "No"
 },
 {
  "f1": "from collections import Counter\ndef solve():\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nC = Counter(A)\nans = sum(sorted(C.values())[:len(C)-K])\nreturn ans\nprint(solve())",
  "f2": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri May 29 21:29:28 2020\n\n@author: naoki\n\"\"\"\nimport fractions\n\nN = int(input()) # 時計の個数\nT = [int(input()) for i in range(N)] # 時計の針が一周する時間\nT.sort() # 小さい順番にソートする\nlcm = T[0]\n\nfor i in range(1,N):\nlcm = lcm*T[i]// fractions.gcd(lcm,T[i])\nprint(lcm)\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03495/s919839939.py",
  "f2_idx": "./Project_CodeNet_Python800/p03633/s576634126.py",
  "response": "No"
 },
 {
  "f1": "n,m=map(int,input().split())\nl=[list(map(int,input().split())) for i in range(n)]\na=[0]*m\nfor i in range(n):\nfor j in range(l[i][0]):\na[l[i][j+1]-1]+=1\nans=0\nfor i in range(m):\nif a[i]==n:\nans+=1\nprint(ans)",
  "f2": "n = int(input())\nc = n-1\nfor i in range(1,int(n**0.5)+1):\nif (n/i).is_integer():\nj = n//i\nc = min(c, i+j-2)\nprint(c)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03126/s375072699.py",
  "f2_idx": "./Project_CodeNet_Python800/p02881/s420052130.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nA = [int(s) for s in input().split()]\nma = A[0]\ntotal = 0\nfor a in A:\nif a < ma:\ntotal += ma - a\nma = max(ma, a)\nprint(total)",
  "f2": "n, m = map(int, input().split())\nAB = [list(map(int, input().split())) for _ in range(n)]\nAB.sort()\n\nans = 0\nfor ab in AB:\nt = min(m, ab[1])\nans += ab[0]*t\nm -= t\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02578/s712500580.py",
  "f2_idx": "./Project_CodeNet_Python800/p03103/s265438766.py",
  "response": "No"
 },
 {
  "f1": "N,M=map(int,input().split())\nA=list(map(int,input().split()))\nA.sort()\nB=[list(map(int,input().split())) for _ in range(M)]\nB.sort(key=lambda x:-x[1])\ni,j=0,0\nwhile i<=N-1:\nfor l in range(B[j][0]):\nif A[i]>=B[j][1]:\nprint(sum(A))\nexit()\nA[i]=B[j][1]\ni+=1\nif i==N:\nprint(sum(A))\nexit()\nj+=1\nif j==M:\nprint(sum(A))\nexit()\nprint(sum(A))",
  "f2": "print(\"ABC\" + input().zfill(3))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03038/s356133951.py",
  "f2_idx": "./Project_CodeNet_Python800/p03643/s300245497.py",
  "response": "No"
 },
 {
  "f1": "a,b=(int(x) for x in input().split())\nprint(a*b)",
  "f2": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, random, itertools, math\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LI_(): return list(map(lambda x: int(x)-1, input().split()))\ndef II(): return int(input())\ndef IF(): return float(input())\ndef S(): return input().rstrip()\ndef LS(): return S().split()\ndef IR(n): return [II() for _ in range(n)]\ndef LIR(n): return [LI() for _ in range(n)]\ndef FR(n): return [IF() for _ in range(n)]\ndef LFR(n): return [LI() for _ in range(n)]\ndef LIR_(n): return [LI_() for _ in range(n)]\ndef SR(n): return [S() for _ in range(n)]\ndef LSR(n): return [LS() for _ in range(n)]\nmod = 1000000007\ninf = 1e10\n\n#solve\ndef solve():\na, b, k = LI()\nfor i in range(k):\nif i & 1:\nb = b // 2\na += b\nelse:\na = a // 2\nb += a\nprint(a,b)\nreturn\n\n\n#main\nif __name__ == '__main__':\nsolve()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02657/s131048544.py",
  "f2_idx": "./Project_CodeNet_Python800/p03228/s317877945.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nans = 0\n\nl, m = [], []\n\nfor _ in range(N):\ns, t = input().split()\nt = int(t)\nl.append(s)\nm.append(t)\n\nX = input()\n\nidx = l.index(X)\nfor i in range(idx+1, N):\nans += m[i]\n\nprint(ans)",
  "f2": "N, T = map(int, input().split())\nt = list(map(int, input().split()))\n\nans = 0\nt.append(t[-1] + 2 * T)\n\nfor i in range(N):\nans += min(T, t[i + 1] - t[i])\n\nprint (ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02806/s673258765.py",
  "f2_idx": "./Project_CodeNet_Python800/p03733/s839860895.py",
  "response": "No"
 },
 {
  "f1": "while True:\ncards=input()\nif cards=='-': break\nfor _ in range(int(input())):\nh = int(input())\ncards=cards[h:]+cards[:h]\nprint(cards)",
  "f2": "n = int(input())\ns = list(input())\nr = 0\ng = 0\nb = 0\n\nfor c in s:\nif c == \"R\":\nr += 1\nif c == \"G\":\ng += 1\nif c == \"B\":\nb += 1\nans = r*g*b\n\nfor i in range(n):\nfor j in range(i+1,n):\nk = 2*j - i\nif k > n-1:\ncontinue\nx = s[i]\ny = s[j]\nz = s[k]\nif x!= y and y != z and z != x:\nans -= 1\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02420/s241914763.py",
  "f2_idx": "./Project_CodeNet_Python800/p02714/s269630360.py",
  "response": "No"
 },
 {
  "f1": "def main():\nimport sys\ninput = sys.stdin.readline\nH, W, D = [int(x) for x in input().strip().split()]\nM = [0] * H\nC = {}\nrevM = {}\nfor h in range(H):\nM[h] = [int(x) for x in input().strip().split()]\nfor i, w in enumerate(M[h]):\nrevM[w] = (h, i)\nQ = int(input())\nHW = H * W\nans = [0] * (HW + 1)\nfor i in range(1, D+1):\ncur = i\nwhile cur + D <= HW:\nans[cur+D] += ans[cur] + abs(revM[cur][0] - revM[cur+D][0]) + abs(revM[cur][1] - revM[cur+D][1])\ncur += D\n\nfor q in range(Q):\nl, r = [int(x) for x in input().strip().split()]\nprint(ans[r]-ans[l])\n\nif __name__ == '__main__':\nmain()",
  "f2": "N = map(int, input().split())\nA = list(map(int, input().split()))\nreverse = 0\n\nfor a in A:\nreverse += 1 / a\n\nprint(reverse**-1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03426/s332658347.py",
  "f2_idx": "./Project_CodeNet_Python800/p02934/s724994980.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\nlist = []\nans = 0\nfor i in range(n):\nx,u=input().split()\nlist.append((float(x), u))\nif list[i][1]=='JPY':\nans += list[i][0]\nelse:\nans += list[i][0] * 380000\nprint(ans)",
  "f2": "X = int(input())\nif X > 2100:\nprint('1')\nelse:\nif X <= 105*(X//100):\nprint('1')\nelse:\nprint('0')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03110/s634255764.py",
  "f2_idx": "./Project_CodeNet_Python800/p02843/s920935615.py",
  "response": "No"
 },
 {
  "f1": "import sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\ndef main():\ns = input()\nif 'RRR' in s:\nprint(3)\nelif 'RR' in s:\nprint(2)\nelif 'R' in s:\nprint(1)\nelse:\nprint(0)\n\nif __name__ == '__main__':\nmain()",
  "f2": "n,m = map(int, input().split())\nx = sorted(list(map(int, input().split())))\n\nif n >= m: print(0)\nelse:\nnums = [0]*(m-1)\nfor i in range(m-1): nums[i] = x[i+1] - x[i]\nnums.sort()\nprint(sum(nums[:m-n]))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02582/s481555354.py",
  "f2_idx": "./Project_CodeNet_Python800/p03137/s168826915.py",
  "response": "No"
 },
 {
  "f1": "import sys\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\ndef resolve():\nH, W, K = lr()\nS = []\nfor i in range(H):\nS.append([int(s) for s in sr()])\nans = 2000\nidx = [0]*H\nfor div in range(1<<(H-1)):\ng = 0\nfor i in range(H):\nidx[i] = g\nif div>>i&1:\ng += 1\ng += 1\nc = [[0]*W for i in range(g)]\nfor i in range(H):\nfor j in range(W):\nc[idx[i]][j] += S[i][j]\nok = True\nfor i in range(g):\nfor j in range(W):\nif c[i][j] > K:\nok = False\nif not ok:\ncontinue\nnum = g-1\nnow = [0]*g\ndef add(j):\nfor i in range(g):\nnow[i] += c[i][j]\nfor i in range(g):\nif now[i] > K:\nreturn False\nreturn True\nfor j in range(W):\nif not add(j):\nnum += 1\nnow = [0]*g\nadd(j)\nans = min(ans, num)\nprint(ans)\nresolve()",
  "f2": "n=int(input())\na=list(map(int,input().split()))\nx=sum(a)\ny=0\nfor i in range(0,n-1):\ny+=a[i]\nif i==0:\nans=abs(y-(x-y))\nelse:\nif ans>abs(y-(x-y)):\nans=abs(y-(x-y))\n#print(ans,y)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02733/s392191921.py",
  "f2_idx": "./Project_CodeNet_Python800/p03659/s344219940.py",
  "response": "No"
 },
 {
  "f1": "N, M = map(int,input().split())\nA = list(map(int,input().split()))\nB = sorted(A,reverse=True)\njudge = sum(A) / (4*M)\nif B[M-1] < judge:\nprint('No')\nelse:\nprint('Yes')",
  "f2": "def main(v1, v2, t1, t2):\nif v1 * v2 >= 0:  # どんどん離れる\nreturn 0\n# v1>0, v2<0とする\nd1 = abs(v1) * t1\nd2 = abs(v2) * t2\n\nif d1 > d2:  # 追いつけない\nreturn 0\nif d1 == d2:  # 毎回ちょうど追いつく\nreturn \"infinity\"\n\ndL = d2 - d1\npeak = (d1 + dL - 1) // dL\nif d1 % dL == 0:\nreturn peak * 2\nelse:\nreturn peak * 2 - 1\n\n\nt1, t2 = map(int, input().split())\na1, a2 = map(int, input().split())\nb1, b2 = map(int, input().split())\nprint(main(a1-b1, a2-b2, t1, t2))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02718/s392514060.py",
  "f2_idx": "./Project_CodeNet_Python800/p02846/s607784964.py",
  "response": "No"
 },
 {
  "f1": "from collections import defaultdict\n\"\"\"\nN 以下の全ての整数に対して, (先頭, 末尾) を数える.\n(先頭, 末尾), (末尾, 先頭)の組は, 独立しているので掛け算で求められる.\n\"\"\"\nn = int(input())\nansl = defaultdict(lambda: 0)\nfor i in range(1,n+1):\nsentou = int(str(i)[0])\nushiro = int(str(i)[-1])\nansl[(sentou, ushiro)] += 1\nans = 0\nfor i in range(1, 10):\nfor j in range(1, 10):\nans += ansl[(i, j)]*ansl[(j, i)]\nprint(ans)",
  "f2": "n, k = map(int, input().split())\nx = list(map(int, input().split()))\n\nans = 10**9\n\nfor i in range(n - k + 1):\nif x[i] < 0:\nif x[i + k - 1] < 0:\nref = -x[i]\nelse:\nref = min(x[i]*-2 + x[i + k - 1], -x[i] + x[i + k - 1]*2)\nelse:\nref = x[i + k - 1]\nans = min(ans, ref)\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02792/s252053398.py",
  "f2_idx": "./Project_CodeNet_Python800/p03274/s513295972.py",
  "response": "No"
 },
 {
  "f1": "import sys\ninput = sys.stdin.readline\n\n\ndef read():\nS = input().strip()\nT = input().strip()\nreturn S, T\n\n\ndef solve(S, T):\nN = len(S)\nfor i in range(N):\nis_matched = True\nfor j1 in range(N):\nj2 = (i + j1) % N\nif S[j1] != T[j2]:\nis_matched = False\nbreak\nif is_matched:\nreturn \"Yes\"\nreturn \"No\"\n\n\nif __name__ == '__main__':\ninputs = read()\noutputs = solve(*inputs)\nif outputs is not None:\nprint(\"%s\" % str(outputs))",
  "f2": "import sys\n## io ##\ndef IS(): return sys.stdin.readline().rstrip()\ndef II(): return int(IS())\ndef MII(): return list(map(int, IS().split()))\nfrom itertools import accumulate\nfrom collections import Counter\n#======================================================#\ndef main():\nn = II()\ncum = list(accumulate([0]+MII()))\ncnt = [n for n in Counter(cum).values() if n > 1]\nans = sum([(n*(n-1))//2 for n in cnt])\nprint(ans)\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03293/s988628545.py",
  "f2_idx": "./Project_CodeNet_Python800/p03363/s447102869.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\nl = [[0, 0, 0]] + list(list(map(int, input().split())) for i in range(n))\n\nfor i in range(1, n+1):\ndt = l[i][0] - l[i-1][0]\ndx = abs(l[i][1] - l[i-1][1])\ndy = abs(l[i][2] - l[i-1][2])\n\ntmp = dt - dx - dy\nif tmp < 0 or tmp % 2 == 1:\nprint('No')\nbreak\nelse:\nprint('Yes')",
  "f2": "n = list(map(int,(input().split())))\ns = n.index(0)\nprint(s+1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03457/s443734490.py",
  "f2_idx": "./Project_CodeNet_Python800/p02639/s461737858.py",
  "response": "No"
 },
 {
  "f1": "h, w, k = map(int, input().split())\nc = []\nfor i in range(h):\nc.append(list(input()))\n\nans = 0\n\nfor row in range((1 << h) - 1): #2^h - 1\nfor col in range((1 << w) - 1): #2^w -1\nblack = 0\nfor i in range(h):\nfor j in range(w):\nif (row >> i) & 1 == 0 and (col >> j) & 1 == 0 and c[i][j] =='#':\nblack += 1\nif black == k:\nans += 1\n\nprint(ans)",
  "f2": "n = int(input())\ncard =[i+\" \"+str(j) for i in [\"S\",\"H\",\"C\",\"D\"] for j in range(1,14)]\nfor i in range(n):\ncard.remove(input())\nfor i in card:\nprint(i)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02614/s756270903.py",
  "f2_idx": "./Project_CodeNet_Python800/p02408/s272545513.py",
  "response": "No"
 },
 {
  "f1": "T = [0]\n\ndef curserch(N,k,T,P,n):\nT[0] = T[0]+1\nP[k][\"d\"] = T[0]\nfor i in range(1,n+1):\nif N[k][i]==1 and P[i][\"d\"]==0:\ncurserch(N,i,T,P,n)\nT[0] = T[0]+1\nP[i][\"f\"]=T[0]\n\n\nn = int(input())\nA = [[0 for j in range(n+1)] for i in range(n+1)]\n\n\nfor i in range(n):\nvec = input().split()\nu = int(vec[0])\nk = int(vec[1])\nnodes = vec[2:]\nfor i in range(int(k)):\nv = int(nodes[i])\nA[u][v] = 1\n\nP=[{\"d\":0} for i in range(n+1)]\nfor i in range(1,n+1):\nif P[i][\"d\"]==0:\ncurserch(A,i,T,P,n)\nT[0] = T[0]+1\nP[i][\"f\"]=T[0]\nfor i in range(1,n+1):\nprint(i,P[i][\"d\"],P[i][\"f\"])",
  "f2": "a, b, c = input().split()\nLIST = [a, b, c]\nfive = LIST.count(\"5\")\nseven = LIST.count(\"7\")\nif five == 2 and seven == 1:\nprint(\"YES\")\nelse:\nprint(\"NO\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02238/s278017070.py",
  "f2_idx": "./Project_CodeNet_Python800/p04043/s878810182.py",
  "response": "No"
 },
 {
  "f1": "x1, y1, x2, y2 = list(map(int, input().split()))\nx3 = x2 - (y2 - y1)\ny3 = y2 + (x2 - x1)\nx4 = x3 - (x2 - x1)\ny4 = y3 - (y2 - y1)\nprint(\"{} {} {} {}\".format(x3, y3, x4, y4))",
  "f2": "# -*- coding: utf-8 -*-\n# モジュールのインポート\nimport math\nimport itertools\n\n# 標準入力を取得\nN = int(input())\nx, y = [], []\nfor n in range(N):\nx_n, y_n = list(map(int, input().split()))\nx.append(x_n)\ny.append(y_n)\n\n# 求解処理\ndef get_distance(i: int, j: int) -> float:\nreturn math.sqrt(math.pow(x[i] - x[j], 2) + math.pow(y[i] - y[j], 2))\n\nans = 0\nfor path in itertools.permutations(range(N), N):\ndistance = 0\nfor i in range(N - 1):\ndistance += get_distance(path[i], path[i + 1])\nans += distance\nans /= math.factorial(N)\n\n# 結果出力\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03265/s903339598.py",
  "f2_idx": "./Project_CodeNet_Python800/p02861/s027333278.py",
  "response": "No"
 },
 {
  "f1": "n, m = map(int, input().split())\nh = list(map(int, input().split()))\nab = [True] * n\nfor _ in range(m):\na, b = map(int, input().split())\nif h[a-1] > h[b-1]:\nab[b-1] = False\nelif h[b-1] > h[a-1]:\nab[a-1] = False\nelse:\nab[a-1] = False\nab[b-1] = False\n\nprint(ab.count(True))",
  "f2": "import bisect,collections,copy,itertools,math,string\nimport sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip.split())\ndef main():\nlst = [1 for i in range(10**5+5)]\ns = 1\nfor i in range(3,10**5+5):\ns += lst[i-2]\nlst[i] = s\nn,m = LI()\nkaidan = [1 for _ in range(n+1)]\nfor _ in range(m):\na = I()\nkaidan[a] = 0\nitr = itertools.groupby(kaidan)\nspan = []\nans = 1\n\nfor key, group in itr:\nlenth = len(list(group))\nif key == 0 and lenth >= 2:\nans = 0\nelif key == 1:\nspan.append(lenth)\n\nfor i in span:\nans *= lst[i]%1000000007\nans %= 1000000007\n\nprint(ans)\n\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02689/s427206257.py",
  "f2_idx": "./Project_CodeNet_Python800/p03013/s065153795.py",
  "response": "No"
 },
 {
  "f1": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nINF = 10**10\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\nn, k = LI()\nQ = [I() for _ in range(n)]\n\ndef can_stack(p):\ns = 0\ntruck_num = 1\nfor i in Q:\nif s+i<=p:\ns += i\nelse:\ntruck_num += 1\ns = i\nreturn truck_num<=k\n\nng = max(Q)-1\nok = sum(Q)\nwhile abs(ok-ng)>1:\nm = (ng+ok)//2\nif can_stack(m):\nok = m\nelse:\nng = m\nprint(ok)\n\n# for i in range(20):\n#     print(i, can_stack(i))\n\nif __name__ == '__main__':\nresolve()",
  "f2": "from collections import Counter\n\nn = int(input())\na = list(map(int, input().split()))\nre = 0\n\nc = Counter(a)\nnew = c.values()\n\nfor i in new:\nif i > 1:\nre += 1\n\nif re > 0:\nprint(\"NO\")\nelse:\nprint(\"YES\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02270/s260733256.py",
  "f2_idx": "./Project_CodeNet_Python800/p02779/s205053691.py",
  "response": "No"
 },
 {
  "f1": "# -*- coding: utf-8 -*-\n\nN = int(input().strip())\nK = int(input().strip())\n#-----\n\nnum=1\nfor i in range(N):\nif num*2 <= (num + K):\nnum *= 2\nelse:\nnum += K\n\nprint( num )",
  "f2": "N, L = map(int, input().split())\nS_i = [input() for i in range(N)]\nm = \"\"\nfor x in sorted(S_i):\nm += x\nelse:\nprint(m)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03564/s221355982.py",
  "f2_idx": "./Project_CodeNet_Python800/p04044/s801833831.py",
  "response": "No"
 },
 {
  "f1": "from math import ceil\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nans = ceil((N-1)/(K-1))\nprint(ans)",
  "f2": "S = input().rstrip()\nD = [[-1] for _ in range(26)]\nE = [[0] for _ in range(26)]\nfor i, s in enumerate(S):\nE[ord(s)-ord(\"a\")].append(i-D[ord(s)-ord(\"a\")][-1]-1)\nD[ord(s)-ord(\"a\")].append(i)\nfor i in range(26):\nE[i].append(len(S)-1-D[i][-1])\nres = []\nfor i in range(26):\nres.append(max(E[i]))\nprint(min(res))\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03317/s483151711.py",
  "f2_idx": "./Project_CodeNet_Python800/p03687/s047329299.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nans = 0\nb = 380000.0\nfor i in range(N):\ns = list(input().split())\nif s[1] == \"JPY\":\nans += int(s[0])\nelse:\nans += float(s[0]) * b\nprint(ans)",
  "f2": "s = input()\nans = \"\"\nfor i,x in enumerate(s):\nif i%2 == 0:\nans += x\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03110/s370789283.py",
  "f2_idx": "./Project_CodeNet_Python800/p03610/s670310789.py",
  "response": "No"
 },
 {
  "f1": "from sys import setrecursionlimit, exit\nsetrecursionlimit(1000000000)\n\nfrom collections import Counter\n\ndef main():\nn, m = map(int, input().split())\npar = [i for i in range(n)]\nsize = [1] * n\n\ndef root(x):\nif par[x] == x:\nreturn x\nelse:\npar[x] = root(par[x])\nreturn par[x]\n\ndef same(x, y):\nreturn root(x) == root(y)\n\ndef unite(x, y):\nx = root(x)\ny = root(y)\nif x == y:\nreturn\npar[x] = y\nsize[y] += size[x]\n\nfor _ in range(m):\nx, y, z = map(int, input().split())\nunite(x - 1, y - 1)\nfor i in range(n):\nroot(i)\nprint(len(Counter(par)))\n\nmain()",
  "f2": "N = int(input())\n\ncity = []\nfor i in range(N):\ns, p = input().split()\ncity.append([s, int(p), i+1])\ncity.sort(key=lambda city: (city[0], -city[1]))\n\nfor i in city:\nprint(i[2])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03045/s188258300.py",
  "f2_idx": "./Project_CodeNet_Python800/p03030/s440604798.py",
  "response": "No"
 },
 {
  "f1": "#!/usr/bin/env python3\nimport sys\ntry:\nfrom typing import List\nexcept ImportError:\npass\n\n\nsys.setrecursionlimit(1000000)\n\n\ndef solve(N: int, M: int, X: \"List[int]\", Y: \"List[int]\", Z: \"List[int]\"):\npar = list(range(N))\n\ndef getpar(n: int):\nif par[n] == n:\nreturn n\npar[n] = getpar(par[n])\nreturn par[n]\n\ndef union(a: int, b: int):\npar[getpar(b)] = getpar(a)\n\nfor Xi, Yi in zip(X, Y):\nXi -= 1\nYi -= 1\nunion(Xi, Yi)\n\nprint(len({getpar(i) for i in range(N)}))\n\n\ndef main():\ndef iterate_tokens():\nfor line in sys.stdin:\nfor word in line.split():\nyield word\ntokens = iterate_tokens()\nN = int(next(tokens))  # type: int\nM = int(next(tokens))  # type: int\nX = [int()] * (M)  # type: \"List[int]\"\nY = [int()] * (M)  # type: \"List[int]\"\nZ = [int()] * (M)  # type: \"List[int]\"\nfor i in range(M):\nX[i] = int(next(tokens))\nY[i] = int(next(tokens))\nZ[i] = int(next(tokens))\nsolve(N, M, X, Y, Z)\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "n, a, b = list(map(int, input().split(' ')))\n\nif (b - a + 1) % 2 == 1:\nprint('Alice')\nelse:\nprint('Borys')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03045/s948190897.py",
  "f2_idx": "./Project_CodeNet_Python800/p03463/s030782355.py",
  "response": "No"
 },
 {
  "f1": "H, W, A, B = map(int, input().split())\np = 10 ** 9 + 7\nF = [1 for i in range(H + W + 1)]\nfor i in range(1, H + W + 1):\nF[i] = F[i - 1] * i % p\nFi = [pow(f, p - 2, p) for f in F]\ndef fac(a, b):\na = F[a + b] * Fi[a] * Fi[b]\nreturn a % p\nif H - A < B:\nans = 0\nfor h in range(H - A):\nans += fac(h, B - 1) * fac(H - h - 1, W - B - 1) % p\nelse:\nans = fac(H - 1, W- 1)\nfor w in range(B):\nans -= fac(H - A - 1, w) * fac(A - 1, W - w - 1) % p\nprint(ans % p)",
  "f2": "import bisect\n\nwhile 1:\nn, x = map(int, input().split())\nif n == x == 0:\nbreak\nL = list(range(1, n + 1))\ncount = 0\nfor i in range(n - 2):\nfor j in range(i + 1, n - 1):\na = x - L[i] - L[j]\nidx = bisect.bisect_left(L, a, lo=j + 1)\nif idx < n and L[idx] == a:\ncount += 1\nprint(count)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p04046/s927199611.py",
  "f2_idx": "./Project_CodeNet_Python800/p02412/s575013548.py",
  "response": "No"
 },
 {
  "f1": "N=input()\nK=int(input())\n\nl=len(N)\n\ndp=[[[0]*(K+2) for _ in range(2)] for _ in range(l+1)]\n\ndp[0][1][0]=1\n\nfor i,c in enumerate(N):\nx=int(c)\n\nfor j in range(2):\nfor d in range(x+1 if j==1 else 10):\nfor k in range(K+1):\ndp[i+1][x==d if j==1 else 0][k+1 if 0<d else k]+=dp[i][j][k]\n\nprint(dp[l][0][K]+dp[l][1][K])",
  "f2": "A, B, C = map(int, input().split())\nif A <= C <= B or A >= C >= B:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02781/s186198945.py",
  "f2_idx": "./Project_CodeNet_Python800/p03067/s409617620.py",
  "response": "No"
 },
 {
  "f1": "\ndef findnumberofTriangles(arr):\nn = len(arr)\narr.sort()\ncount = 0\nfor i in range(0, n-2):\nk = i + 2\nfor j in range(i + 1, n):\nwhile (k < n and arr[i] + arr[j] > arr[k]):\nk += 1\nif(k>j):\ncount += k - j - 1\n\nreturn count\n\nn = int(input())\narr=[int(x) for x in input().split()]\nprint(findnumberofTriangles(arr))\n",
  "f2": "import sys\nimport itertools\n# import numpy as np\nimport time\nimport math\n\nsys.setrecursionlimit(10 ** 7)\n\nfrom collections import defaultdict\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nx, y, z, t = map(int, readline().split())\na = sorted(map(int, readline().split()), reverse=True)\nb = sorted(map(int, readline().split()), reverse=True)\nc = sorted(map(int, readline().split()), reverse=True)\n\nans = []\n\nfor i in range(len(a)):\nfor j in range(len(b)):\nans.append(a[i] + b[j])\n\nans = sorted(ans, reverse=True)\nfin_ans = []\nfor j in range(len(c)):\nfor i in range(min(len(ans), t)):\nfin_ans.append(ans[i] + c[j])\n\nfin_ans = sorted(fin_ans, reverse=True)\n\nfor i in fin_ans[:t]:\nprint(i)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02888/s300125712.py",
  "f2_idx": "./Project_CodeNet_Python800/p03078/s459567159.py",
  "response": "No"
 },
 {
  "f1": "import math\n\nH, N = map(int, input().split())\nA = list(map(int, input().split()))\nans = sum(A)\nif ans >= H:\nprint('Yes')\nelse:\nprint('No')",
  "f2": "weather = \"Sunny\"\"Cloudy\"\"Rainy\"\nS = input()\n\nif S == \"Sunny\":\nprint(\"Cloudy\")\nelif S == \"Cloudy\":\nprint(\"Rainy\")\nelse:\nprint(\"Sunny\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02784/s772364062.py",
  "f2_idx": "./Project_CodeNet_Python800/p02909/s410166615.py",
  "response": "No"
 },
 {
  "f1": "while True:\nn = input()\nif n == 0:\nbreak\ns = map(float, raw_input().split())\nv = sum(map(lambda x: x**2, s)) / n - (sum(s) / n)**2\nprint v**0.5",
  "f2": "from Queue import Queue\nn, q = map(int, raw_input().split())\nP = []\nfor i in xrange(n):\nx = raw_input().split()\nP.append((x[0], int(x[1])))\n\nQ = Queue()\nfor x in P:\nQ.put(x)\ntotal = 0\nwhile not Q.empty():\nx = Q.get()\nif x[1] <= q:\ntotal += x[1]\nprint x[0], total\nelse:\ntotal += q\nQ.put((x[0], x[1]-q))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02381/s258762625.py",
  "f2_idx": "./Project_CodeNet_Python800/p02264/s979661771.py",
  "response": "No"
 },
 {
  "f1": "import math\na,b,c=map(int,input().split())\nd=math.gcd(a,b)\nfor i in range(d,0,-1):\nif d%i==0:\nc-=1\nif c==0:\nprint(i)\nbreak",
  "f2": "n = int(input())\n*a, = map(int, input().split())\nans = a[::2][::-1] + a[1::2]\nif n%2==0:\nans = ans[::-1]\nprint(*ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03106/s745029852.py",
  "f2_idx": "./Project_CodeNet_Python800/p03673/s930245310.py",
  "response": "No"
 },
 {
  "f1": "import math\n\na, b, n = map(int, input().split())\n\nM = 0\nt = min(b-1, n)\nM = math.floor(a*t/b) - a*math.floor(t/b)\n\nprint(M)",
  "f2": "def mine(n,m):\ntry:\nif n >= 0 and n<=H and m>=0 and m<=W:\ns[n][m] += 1\nexcept:\nNone\n\n\nH,W = map(int,input().split())\ns = [[0 if i == \".\" else \"#\" for i in input()]for j in range(H)]\n\nfor i in range(H):\nfor j in range(W):\nif s[i][j] == \"#\":\nmine(i-1,j-1)\nmine(i-1,j)\nmine(i-1,j+1)\nmine(i,j+1)\nmine(i,j-1)\nmine(i+1,j-1)\nmine(i+1,j)\nmine(i+1,j+1)\nelse:\nNone\n\nfor k in s:\na = list(map(str,k))\nprint(\"\".join(a))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02696/s927142597.py",
  "f2_idx": "./Project_CodeNet_Python800/p03574/s539992371.py",
  "response": "No"
 },
 {
  "f1": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, random, itertools, math\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LI_(): return list(map(lambda x: int(x)-1, input().split()))\ndef II(): return int(input())\ndef IF(): return float(input())\ndef S(): return input().rstrip()\ndef LS(): return S().split()\ndef IR(n): return [II() for _ in range(n)]\ndef LIR(n): return [LI() for _ in range(n)]\ndef FR(n): return [IF() for _ in range(n)]\ndef LFR(n): return [LI() for _ in range(n)]\ndef LIR_(n): return [LI_() for _ in range(n)]\ndef SR(n): return [S() for _ in range(n)]\ndef LSR(n): return [LS() for _ in range(n)]\nmod = 1000000007\ninf = 1e10\n\n#solve\ndef solve():\nn = II()\na = IR(n)\nans = 0\nfor i in range(n - 1):\nif a[i] & 1 and a[i + 1]:\nans += 1\na[i + 1] -= 1\nans += a[i] >> 1\nans += a[-1] >> 1\nprint(ans)\nreturn\n\n\n#main\nif __name__ == '__main__':\nsolve()",
  "f2": "N = int(input())\nA = [int(i) for i in input().split(' ')]\n\nAA = []\nfor i,a in enumerate(A):\nAA.append(tuple([a,i]))\n\nAA = sorted(AA,reverse=True)\nDP =[]\nfor _ in range(N+1):\nDP.append([0]*(N+1))\n\nfor i,a in enumerate(AA):\nfor x in range(i+1):\ny = i - x\nif x+ 1 <= N:\nDP[x+1][y] = max(DP[x+1][y], DP[x][y]+a[0]*abs(x-a[1]))\nif y+1 <= N:\nDP[x][y+1] = max(DP[x][y+1], DP[x][y]+a[0]*abs(N- 1 - y - a[1]))\n\nMAX = 0\nfor x in range(N):\ny = N - x\nMAX = max(DP[x][y],MAX)\n\nprint(MAX)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p04020/s606268438.py",
  "f2_idx": "./Project_CodeNet_Python800/p02709/s928895863.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\nli=[int(i) for i in input().split()]\n\nli=sorted(li)\nans=0\nfor i in range(n):\nans+=li[i*2]\nprint(ans)",
  "f2": "from collections import Counter\na=[0]\nn=int(input())\np=0\nfor i in input().split():\np+=int(i)\na.append(p)\n\nc=Counter(a)\nans=0\nfor i in list(c.values()):\nans+=i*(i-1)//2\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p04047/s071244986.py",
  "f2_idx": "./Project_CodeNet_Python800/p03363/s528557261.py",
  "response": "No"
 },
 {
  "f1": "import collections\n\nn = int(input())\na = list(map(int, input().split()))\nq = int(input())\nbc = []\n\n\nfor i in range(q):\nbci = list(map(int, input().split()))\nbc.append(bci)\n\ncc = collections.Counter(a)\nli = cc.most_common()\nsu = sum(a)\n\nfor i in range(q):\nb, c = bc[i]\nif cc[b]:\nnum = (c-b)*cc[b]\nelse:\nnum = 0\nsu += num\nprint(su)\nif cc[c]:\ncc[c] += cc[b]\nelse:\ncc[c] = cc[b]\ncc[b] = 0",
  "f2": "P,Q,R=map(int,input().split())\nif P<Q<R or Q<P<R:\nprint(P+Q)\nif Q<R<P or R<Q<P:\nprint(Q+R)\nif R<P<Q or P<R<Q:\nprint(R+P)\nif P==Q==R:\nprint(P+Q)\nif P==Q<R:\nprint(P+Q)\nif P==Q>R:\nprint(R+P)\nif Q==R<P:\nprint(Q+R)\nif Q==R>P:\nprint(P+Q)\nif R==P<Q:\nprint(R+P)\nif R==P>Q:\nprint(Q+R)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02630/s794423994.py",
  "f2_idx": "./Project_CodeNet_Python800/p03011/s150379233.py",
  "response": "No"
 },
 {
  "f1": "X=int(input())\n\nkyu= 10 - X//200\n\nprint(kyu)",
  "f2": "n, m = map(int, input().split())\n\nnum = [''] * n\n\nflag = 0\nfor i in range(m):\ns, c = map(int, input().split())\nif num[s - 1] == '' or num[s - 1] == c:\nnum[s - 1] = c\nelse:\nprint(-1)\nbreak\nelse:\nif num[0] == '':\nif n > 1:\nnum[0] = 1\nelse:\nnum[0] = 0\nfor i in range(1, n):\nif num[i] == '':\nnum[i] = 0\nif n > 1 and num[0] == 0:\nprint(-1)\nelse:\nprint(''.join(map(str, num)))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02600/s703323801.py",
  "f2_idx": "./Project_CodeNet_Python800/p02761/s157606505.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\n\nif N < 10:\nprint(N)\nexit()\n\nn = N - int((len(str(N)) - 1) * '9')\ntmp = (len(str(N)) - 1) * '9'\nif len(str(n)) > (len(str(N)) - 1):\ntmp = str(n)[0] + tmp\n\nres = 0\nfor t in tmp:\nres += int(t)\n\nprint(res)",
  "f2": "Q, H, S, D = list(map(int, input().split()))\nQ *= 8\nH *= 4\nS *= 2\nA = min(Q, H, S, D)\nB = int(min(Q, H, S) / 2)\nN = int(input())\n\nprint(int(N//2*A+N%2*B))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03427/s744538513.py",
  "f2_idx": "./Project_CodeNet_Python800/p03617/s000667932.py",
  "response": "No"
 },
 {
  "f1": "N,K = map(int,input().split())\nA = list(map(int,input().split()))\n\ncount =0\nfirst = True\nwhile N >=K:\nif  first ==True:\ncount +=1\nN-=K\nfirst =False\n\nelse:\ncount+=1\nN-=(K-1)\n\n\n\n\nif N!=0:\ncount+=1\nprint(count)",
  "f2": "w,h,n = map(int,input().split())\nx_a = 0\ny_a = 0\nfor i in range(n):\nx,y,a = map(int,input().split())\n\nif a == 1:\nif x < x_a:\nx_a = x_a\nelse:\nx_a = x\nelif a == 2:\nif x < w:\nw = x\nelse:\nw = w\n\nelif a == 3:\nif y < y_a:\ny_a = y_a\nelse:\ny_a = y\n\nelif a == 4:\nif y < h:\nh = y\nelse:\nh = h\n\nif w - x_a <= 0 or h - y_a <= 0:\nans = 0\nelse:\nans = (w - x_a)*(h - y_a)\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03317/s292940780.py",
  "f2_idx": "./Project_CodeNet_Python800/p03944/s273863948.py",
  "response": "No"
 },
 {
  "f1": "def selection_sort(numbers, n, key=lambda x: x):\n\"\"\"selection sort method\n\nArgs:\nnumbers: a list of numbers to be sorted\nn: len(numbers)\nkey: sort key\n\nReturns:\nsorted numberd, number of swapped times\n\"\"\"\nx = []\nfor data in numbers:\nx.append(data)\n\ncounter = 0\n\nfor i in range(0, n):\nmin_j = i\nfor j in range(i, n):\nif key(x[j]) < key(x[min_j]):\nmin_j = j\nif min_j != i:\nx[min_j], x[i] = x[i], x[min_j]\ncounter += 1\nreturn x, counter\n\n\ndef bubble_sort(numbers, n, key=lambda x: x):\n\"\"\"bubble sort method\n\nArgs:\nnumbers: a list of numbers to be sorted by bubble sort\nn: len(list)\nkey: sort key\n\nReturns:\nsorted list\n\"\"\"\nx = []\nfor data in numbers:\nx.append(data)\n\nflag = True\ncounter = 0\nwhile flag:\nflag = False\nfor index in range(n - 1, 0, -1):\nif key(x[index]) < key(x[index - 1]):\nx[index], x[index - 1] = x[index - 1], x[index]\nflag = True\ncounter += 1\nreturn x, counter\n\n\ndef insertion_sort(numbers, n, key=lambda x: x):\n\"\"\"insertion sort method\n\nArgs:\nnumbers: a list of numbers to be sorted\nn: len(numbers)\n\nReturns:\nsorted list\n\"\"\"\nfor i in range(1, n):\ntarget = numbers[i]\nindex = i - 1\nwhile index >= 0 and target < numbers[index]:\nnumbers[index + 1] = numbers[index]\nindex -= 1\nnumbers[index + 1] = target\n\nreturn numbers\n\n\ndef is_stable(list1, list2):\n\"\"\"check stablity of sorting method used in list2\n\nArgs:\nlist1: sorted list(bubble sort)\nlist2: sorted list(some sort)\n\nReturns:\nbool\n\"\"\"\nflag = True\nfor index, data in enumerate(list1):\nif list2[index] != data:\nflag = False\nbreak\n\nreturn flag\n\n\nlength = int(raw_input())\ncards = raw_input().split()\nbubble_sorted_card, bubble_swapped = bubble_sort(numbers=cards, n=length, key=lambda x: int(x[1]))\nselection_sorted_card, selection_swapped = selection_sort(numbers=cards, n=length, key=lambda x: int(x[1]))\nprint(\" \".join(bubble_sorted_card))\nprint(\"Stable\")\nprint(\" \".join(selection_sorted_card))\n\nif is_stable(bubble_sorted_card, selection_sorted_card):\nprint(\"Stable\")\nelse:\nprint(\"Not stable\")",
  "f2": "# ある学校には、N人の生徒がいます。\n# 生徒たちをいくつかのグループに分け、グループごとにあるテーマについて話し合ってもらうこととなりました。\n# あなたは、2人以下のグループだと効果的な話し合いが出来ないと考えており、なるだけ多くのグループを\n# 3人以上にしたいです。生徒たちを上手く分けて、3人以上のグループの数を最大化してください。\n\n# 標準入力から生徒数 N を取得する\ninput_num = int(input())\n\n# 取得した N人から、3人以上のグループが最大数になるよう算出して出力する\nresult = int(input_num / 3)\nprint(result)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02261/s300609237.py",
  "f2_idx": "./Project_CodeNet_Python800/p03423/s697738147.py",
  "response": "No"
 },
 {
  "f1": "from functools import lru_cache\nh,w= map(int, input().split())\nmaze = [[-1 for i in range(w)] for j in range(h)]\n\nans = 0\nfor i in range(h):\nmaze[i] = input()\n\nINF = 10000\n\n@lru_cache(None)\ndef dfs(y,x,flg,cnt):\nif y == h-1 and x ==w-1:\nif flg ==1:\ncnt+=1\nreturn cnt\nans = [INF]\nfor (ny, nx) in [(y+1, x), (y, x+1)]:\nif 0 <= nx < w and 0 <= ny < h:\nif maze[ny][nx] != maze[y][x]:\nif flg == 0: ans.append(dfs(ny,nx,1,cnt))\nelse: ans.append(dfs(ny,nx,0,cnt+1))\nelse:\nans.append(dfs(ny,nx,flg,cnt))\nreturn(min(ans))\n\nprint(dfs(0,0,(0 if maze[0][0]=='.' else 1),0))",
  "f2": "from itertools import accumulate as ac\nt = 3099044504245996706400 # LCM(1..50)\nN, A, B = map(int, input().split())\nV = sorted([int(a) * t for a in input().split()])[::-1]\nl, r = 0, 1<<200\nwhile r - l > 1:\nm = (l+r) // 2\nif list(ac([v-m for v in V]))[A-1] >= 0:\nl = m\nelse:\nr = m\n\nfa = [1]\nfor i in range(1, 60):\nfa.append(fa[-1] * i)\nC = lambda a, b: fa[a] // (fa[a-b] * fa[b])\n\nprint(l/t)\nprint(sum([C(V.count(V[i-1]), V[:i].count(V[i-1])) for i in range(A, B+1) if sum(V[:i]) == l * i]))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02735/s467433278.py",
  "f2_idx": "./Project_CodeNet_Python800/p03776/s511051438.py",
  "response": "No"
 },
 {
  "f1": "A,B,K = map(int,input().split())\ncount = 0\nfor i in range(1,max(A,B)+1)[::-1]:\nif A%i==0 and B%i==0:\ncount += 1\nif count == K:\nbreak\nprint(i)",
  "f2": "import bisect,collections,copy,itertools,math,string\nimport sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\ndef main():\ns = S()\nlenth = len(s)\nitr = itertools.product([0,1],repeat=lenth-1)\nans = 0\n\nfor i in itr:\ntmp = s[0]\ncnt = 0\nfor plus,char in zip(i, s[1:]):\nif plus == 1:\ncnt += int(tmp)\ntmp = char\nelse:\ntmp += char\ncnt += int(tmp)\nans += cnt\n\nprint(ans)\n\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03106/s383638791.py",
  "f2_idx": "./Project_CodeNet_Python800/p04001/s416127992.py",
  "response": "No"
 },
 {
  "f1": "import sys, os\n\nf = lambda:list(map(int,input().split()))\nif 'local' in os.environ :\nsys.stdin = open('./input.txt', 'r')\n\ndef solve():\na,b,c = f()\nif b-a == c -b:\nprint('YES')\nelse:\nprint('NO')\n\nsolve()",
  "f2": "n,m = map(int, input().split())\n\nif abs(n-m) >1:\nprint(0)\nexit()\n\np = 10**9+7\nfact =[1,1]\nfor i in range(2, max(n,m) + 1):\nfact.append((fact[-1] * i) % p)\n\nif n ==m:\nres = fact[n]*fact[m]*2\n\nelse:\nres = fact[n]*fact[m]\n\nprint(res%p)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03759/s136104940.py",
  "f2_idx": "./Project_CodeNet_Python800/p03681/s864679080.py",
  "response": "No"
 },
 {
  "f1": "table = {alphabet: \"-\" for alphabet in \"abcedfghijklmnopqrstuvwxyz\"}\nrev_table = {alphabet: \"-\" for alphabet in \"abcedfghijklmnopqrstuvwxyz\"}\n\ns = str(input())\nt = str(input())\n\nflag = True\n\nfor i in range(len(s)):\nif table[s[i]] == t[i]:\ncontinue\nelif table[s[i]] == \"-\":\ntable[s[i]] = t[i]\nelse:\nflag = False\nbreak\n\nfor i in range(len(t)):\nif rev_table[t[i]] == s[i]:\ncontinue\nelif rev_table[t[i]] == \"-\":\nrev_table[t[i]] = s[i]\nelse:\nflag = False\nbreak\n\nif flag is True:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "f2": "\"\"\"\n多分またバグらせる\n\"\"\"\n# 尺取\n\nN = int(input())\nAs = list(map(int, input().split()))\nres = 0\nl,r = 0, 0\nval = As[l]\nfor l in range(N):\ncnt = 0\n# 区間が1のときは確定でOKなので+1する\nif l == r:\nr += 1\nval = As[l]\n# 差分が1以上(実質、区間が2つ以上存在するとき)\nelif r-(l-1) > 1:\nval -= As[l-1]\n# 条件を満たすうちは尺を伸ばす\n# print(\"be\",\"l\",l,\"r\",r,\"val\",val)\nwhile (r < N and val^As[r] == val+As[r]):\nval += As[r]\nr += 1\n# print(\"af\",\"l\",l,\"r\",r,\"val\",val)\n# 条件が終了したら差分を加える\nres += (r-l)\nprint(res)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03252/s178159988.py",
  "f2_idx": "./Project_CodeNet_Python800/p03340/s957217619.py",
  "response": "No"
 },
 {
  "f1": "w = input()\ncount = 0\nwhile True:\ntext = input()\nif text == \"END_OF_TEXT\":\nbreak\nwords = [w.lower() for w in text.split()]\nfor word in words:\nif w == word:\ncount += 1\nprint(count)\n",
  "f2": "def c_name(a, b):\nx = '0'*(6-len(str(a)))\ny = '0'*(6-len(str(b)))\nreturn x + str(a) + y + str(b)\n\nN, M = map(int,input().split())\n\nC = []\n\nfor i in range(M):\np, y = map(int,input().split())\n_ = [i, p, y]\nC.append(_)\n\nC.sort(key=lambda x: (x[1],x[2]))\n\nd = {}\ntmp = C[0][1]\nnum = 0\nfor i in C:\nif i[1] == tmp:\nnum += 1\nd[i[0]] = c_name(i[1],num)\nelse:\ntmp = i[1]\nnum = 1\nd[i[0]] = c_name(i[1],num)\n\nans = sorted(d.items())\n\nfor i in ans:\nprint(i[1])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02419/s625807394.py",
  "f2_idx": "./Project_CodeNet_Python800/p03221/s059925723.py",
  "response": "No"
 },
 {
  "f1": "import sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\ndef s(): return input()\ndef i(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b//math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nINF = 10**9\nmod = 10**9+7\n\nH,W = I()\ncost = [l() for _ in range(10)]\nA = [l() for _ in range(H)]\nans = 0\nfor k in range(10):\nfor i in range(10):\nfor j in range(10):\ncost[i][j] = min(cost[i][j], cost[i][k] + cost[k][j])\nfor i in range(H):\nfor j in range(W):\nif A[i][j] > -1:\nans += cost[A[i][j]][1]\nprint(ans)",
  "f2": "n = int(input())\nl = []\npre_c = None\nans = True\nfor _ in range(n):\nw = input()\n# print(w)\n\nif w in l:\nans = False\nbreak\nif not(pre_c is None or pre_c == w[0]):\nans = False\nbreak\n\nl.append(w)\npre_c = w[-1]\n\nif ans:\nprint('Yes')\nelse:\nprint('No')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03546/s707408868.py",
  "f2_idx": "./Project_CodeNet_Python800/p03261/s918382888.py",
  "response": "No"
 },
 {
  "f1": "#coding: utf-8\nN = int(input())\nA = [0] + list(map(int, input().split()))\nB = [0 for _ in range(N+1)]\nans = []\nfor i in range(N, 0, -1):\nv = 0\nj = i\nwhile j <= N:\nv += B[j]\nj += i\nif A[i] != v % 2:\nans.append(i)\nB[i] = 1\n\nans.sort()\nprint(len(ans))\nif len(ans) != 0:\nprint(*ans)",
  "f2": "s = list(map(int,input().split()))\nprint(s[0] * s[1])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02972/s607571365.py",
  "f2_idx": "./Project_CodeNet_Python800/p02657/s946877291.py",
  "response": "No"
 },
 {
  "f1": "#QQ\nfor i in range(1,10):\nfor n in range(1, 10):\nprint(\"%dx%d=%d\" % (i, n, i * n))",
  "f2": "import sys\n\nn = int(input())\na = list(map(int, input().split()))\n\ndp = [sys.maxsize] * n\ndp[0] = 0\nfor i in range(n):\nfor j in (i + 1, i + 2):\nif j < n:\ndp[j] = min(dp[j], dp[i] + abs(a[i] - a[j]))\nprint(dp[n - 1], end=\"\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p00000/s345619793.py",
  "f2_idx": "./Project_CodeNet_Python800/p03160/s433935010.py",
  "response": "No"
 },
 {
  "f1": "def main():\nimport sys\ninput = sys.stdin.readline\nH, W, D = (int(i) for i in input().split())\nA = [[int(i) for i in input().split()] for j in range(H)]\nS = [0] * (H*W + 1)\n\ndic = [(-1, -1) for i in range(H*W + 1)]\nfor h in range(H):\nfor w in range(W):\ndic[A[h][w]] = (h+1, w+1)\n\nfor idx in range(1, H*W+1):\nif H*W < idx+D:\ncontinue\ni, j = dic[idx]\nx, y = dic[idx + D]\nS[idx+D] = abs(x - i) + abs(y - j) + S[idx]\n\nQ = int(input())\nfor query in range(Q):\nle, ri = (int(i) for i in input().split())\nprint(S[ri] - S[le])\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "import fractions\n\nN = int(input())\nA = list(map(int,input().split()))\nMOD = 10** 9 + 7\nlcm = 1\nfor a in A:\nlcm = a // fractions.gcd(a,lcm) * lcm\n\nprint(sum(lcm//a for a in A)%MOD)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03426/s412262195.py",
  "f2_idx": "./Project_CodeNet_Python800/p02793/s076007877.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\n\ndef dfs(a, used=0):\nif len(a)==n:\nprint(''.join(a))\nelse:\nfor i in range(ord('a'), ord('a')+used+1):\nif i == ord('a')+used:\ndfs(a+[chr(i)], used+1)\nelse:\ndfs(a+[chr(i)], used)\n\ndfs([], 0)",
  "f2": "import sys\nimport numpy as np\n\nrm = lambda: map(int, sys.stdin.readline().split())\nrr = lambda: sys.stdin.readline().rstrip()\n\nh, w = rm()\nli = np.array([np.array(list(rr())) for _ in range(h)])\nli2 = []\nli3 = []\nfor i in li:\nif '#' in i:\nli2.append(i)\nli2 = np.array(li2).T\nfor i in li2:\nif '#' in i:\nli3.append(i)\nli3 = np.array(li3).T\nfor i in li3:\nprint(''.join(i))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02744/s663744142.py",
  "f2_idx": "./Project_CodeNet_Python800/p03273/s460117422.py",
  "response": "No"
 },
 {
  "f1": "n,m,p=map(int,input().split())\ng=[[] for _ in range(n)]\ne=[]\nfor _ in range(m):\na,b,c=map(int,input().split())\na,b=a-1,b-1\nc-=p\ng[a].append([b,c])\ne.append([a,b,-c])\n\n\n\n# ベルマンフォード法\n# edges:エッジ、有向エッジ[a,b,c]a->bのエッジでコストc\n# num_v:頂点の数\n# source:始点\ndef BellmanFord(edges,num_v,source):\n#グラフの初期化\ninf=float(\"inf\")\ndist=[inf for i in range(num_v)]\ndist[source]=0\n#辺の緩和をnum_v-1回繰り返す。num_v回目に辺の緩和があればそれは閉路。-1を返す。\nfor i in range(num_v-1):\nfor edge in edges:\nif dist[edge[0]] != inf and dist[edge[1]] > dist[edge[0]] + edge[2]:\ndist[edge[1]] = dist[edge[0]] + edge[2]\nif i==num_v-1: return -1\n#閉路に含まれる頂点を探す。\nnegative=[False]*n\nfor i in range(num_v):\nfor edge in edges:\nif negative[edge[0]]:negative[edge[1]]=True\nif dist[edge[0]] != inf and dist[edge[1]] > dist[edge[0]] + edge[2]:\nnegative[edge[1]] = True\nreturn dist[n-1],negative[n-1]\nd,n=BellmanFord(e,n,0)\nif n:\nprint(-1)\nelse:\nprint(max(0,-d))",
  "f2": "N = int(input())\na = [int(x) for x in input().split()]\nMOD = 10**9 + 7\nans = 1\n\nlst = [0] * 3\n\nfor aa in a:\ncnt = 0\nj = -1\nfor i, l in enumerate(lst):\nif l == aa:\ncnt += 1\nj = i\nif j == -1:\nans = 0\nbreak\nans *= cnt\nans %= MOD\nlst[j] += 1\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02949/s815418033.py",
  "f2_idx": "./Project_CodeNet_Python800/p02845/s114815276.py",
  "response": "No"
 },
 {
  "f1": "import math\n\nwhile True:\nnumber_of_input = int(raw_input())\nif number_of_input == 0:\nbreak\nvalues = [float(x) for x in raw_input().split()]\nsecond_moment = sum([x ** 2.0 for x in values]) / number_of_input\nfirst_moment = sum([x for x in values]) / number_of_input\nprint math.sqrt(second_moment - first_moment ** 2.0)",
  "f2": "n,m = map(int, input().split())\n\nimport math\nmod = 10**9+7\nif n==m:\nans = math.factorial(n) * math.factorial(m) *2\nprint(ans%mod)\nelif abs(n-m)<2:\nans = math.factorial(n) * math.factorial(m)\nprint(ans%mod)\nelse:\nprint(0)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02381/s607745876.py",
  "f2_idx": "./Project_CodeNet_Python800/p03681/s595921731.py",
  "response": "No"
 },
 {
  "f1": "x = int(input())\nif x % 11 > 6:\nprint((x//11)*2 + 2)\nelif 0 < x % 11 <= 6:\nprint((x//11)*2 + 1)\nelse:\nprint((x//11)*2)",
  "f2": "import bisect,collections,copy,itertools,math,string\nimport sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\ndef main():\nn,m = LI()\nroute = [[] for _ in range(n+1)]\nfor _ in range(m):\na,b = LI()\nroute[a].append(b)\nroute[b].append(a)\nans = False\n\nfor i in route[n]:\nif 1 in route[i]:\nans = True\nprint(\"POSSIBLE\" if ans else \"IMPOSSIBLE\")\n\n\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03815/s980318506.py",
  "f2_idx": "./Project_CodeNet_Python800/p03645/s195635911.py",
  "response": "No"
 },
 {
  "f1": "a, b = map(int, input().split())\n\nk = (a+b)/2\n\nif abs(a-k) == abs(b-k) and (a+b) % 2 == 0:\nprint(int(k))\nelse:\nprint(\"IMPOSSIBLE\")",
  "f2": "n,m,*L=map(int,open(0).read().split())\ndp=list(range(n+1))\nfor c in L:\nfor j in range(c,n+1):\ndp[j]=min(dp[j],dp[j-c]+1)\nprint(dp[n])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02957/s943081200.py",
  "f2_idx": "./Project_CodeNet_Python800/p02314/s767877266.py",
  "response": "No"
 },
 {
  "f1": "H,W,K=map(int,input().split(' '))\nS=[input() for i in range(H)]\nans = [[0]*W for i in range(H)]\ncnt = 1\nfor i in range(H):\nfor j in range(W):\nif S[i][j] == \"#\":\nans[i][j] = cnt\ncnt += 1\ndef group(h,w,k):\nans[h][w] = k\nif 0<=w+1<W and ans[h][w+1] == 0:\ngroup(h,w+1,k)\nif 0<=w-1<W and ans[h][w-1] == 0:\ngroup(h,w-1,k)\ndef group_h(h,w,k):\nans[h][w] = k\nif 0<=h+1<H and ans[h+1][w] ==0:\ngroup_h(h+1,w,k)\nif 0<=h-1<H and ans[h-1][w] == 0:\ngroup_h(h-1,w,k)\n\nfor h,i in enumerate(ans):\nfor w,j in enumerate(i):\nif j != 0:\ngroup(h,w,j)\nfor h,i in enumerate(ans):\nfor w,j in enumerate(i):\nif j != 0:\ngroup_h(h,w,j)\nfor i in ans:\nfor j in i:\nprint(j,\"\",end=\"\")\nprint(\"\")",
  "f2": "import sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\ndef s(): return input()\ndef i(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b//math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nINF = 10**9\nmod = 10**9+7\n\nA,B = I()\nif A == B:\nprint('Draw')\nelif A == 1:\nprint('Alice')\nelif B == 1:\nprint('Bob')\nelif A > B:\nprint('Alice')\nelse:\nprint('Bob')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02855/s745492576.py",
  "f2_idx": "./Project_CodeNet_Python800/p03803/s061184504.py",
  "response": "No"
 },
 {
  "f1": "from queue import Queue\nN = int(input())\nG = [[] for _ in range(N)]\nC = [[] for _ in range(N)]\nfor _ in range(N-1):\na, b, w = map(int, input().split())\na -= 1\nb -= 1\nG[a].append(b)\nC[a].append(w)\nG[b].append(a)\nC[b].append(w)\nans = [-1] * N\nans[0] = 0\nque = Queue()\nque.put(0)\nwhile not que.empty():\nv = que.get()\nl = len(G[v])\nfor i in range(l):\nu = G[v][i]\nw = C[v][i]\nif ans[u] != -1:\ncontinue\nans[u] = (ans[v] + w) % 2\nque.put(u)\nprint(*ans, sep='\\n')",
  "f2": "def main():\ns = input().rstrip()\nt = \"CODEFESTIVAL2016\"\nans = 0\nfor i in range(16):\nif s[i] != t[i]:\nans += 1\nprint(ans)\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03044/s468582099.py",
  "f2_idx": "./Project_CodeNet_Python800/p03970/s373961271.py",
  "response": "No"
 },
 {
  "f1": "S=input()\nA=[\"a\",\"SAT\",\"FRI\",\"THU\",\"WED\",\"TUE\",\"MON\",\"SUN\"]\nprint(A.index(S))",
  "f2": "def get_colored_cells():\nN = int(input())\nA = int(input())\nprint(N ** 2 - A)\n\nget_colored_cells()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02847/s817377241.py",
  "f2_idx": "./Project_CodeNet_Python800/p03597/s867230052.py",
  "response": "No"
 },
 {
  "f1": "import math\nh = int(input())\nx = math.floor(math.log2(h)) + 1\ny = (2 ** x) - 1\nprint(y)",
  "f2": "#80\n\nN, A, B = map(int, input().rstrip().split())\nprint(min(N*A, B))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02786/s299709081.py",
  "f2_idx": "./Project_CodeNet_Python800/p03501/s890046490.py",
  "response": "No"
 },
 {
  "f1": "import sys\nimport bisect\na, b, x = map(int, input().split())\nrem = 1 if a%x == 0 else 0\nprint(b//x - a//x +rem)",
  "f2": "import sys\nsys.setrecursionlimit(100000000)\n\nn, m, p = map(int, input().split())\nroutes =[]\nbt = [[] for _ in range(n+1)]\n\nfor i in range(m):\na, b, c = map(int, sys.stdin.readline().split())\nroutes.append([a, b, -1 * (c - p)])\nbt[b].append(a)\n\nenable = set()\nenable.add(n)\nfor i in range(n):\nfor j in range(1, n+1):\nif j in enable:\nfor k in bt[j]:\nif not k in enable:\nenable.add(k)\n\ninf = float('inf')\ncosts = [inf for _ in range(n+1)]\ncosts[1] = 0\nerror = False\nfor i in range(n):\nfor route in routes:\nif route[1] in enable and costs[route[0]] + route[2] < costs[route[1]]:\ncosts[route[1]] = costs[route[0]] + route[2]\nif i == n-1:\nerror = True\nbreak\nif error == True:\nprint(-1)\nelse:\nprint(max(0, -1 * costs[n]))\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03861/s993974708.py",
  "f2_idx": "./Project_CodeNet_Python800/p02949/s058816424.py",
  "response": "No"
 },
 {
  "f1": "import math\n\nn,m = map(int, input().split())\ns = input()\nt = input()\n\nif n == m:\nif s == t:\nprint(n)\nelse:\nprint(-1)\nexit()\n\nif m == 1:\nn,m = m,n\ns,t = t,s\n\nif n == 1:\nif s[0] == t[0]:\nprint(m)\nelse:\nprint(-1)\nexit()\n\nlcm = n * m // math.gcd(n, m)\n\nn1 = lcm//n\nm1 = lcm//m\n\nlcm2 = n1 * m1 // math.gcd(n1, m1)\nstepn = lcm2//n1\nstepm = lcm2//m1\n\nfor i in range(0,10**5):\nif stepn*i > n-1 or stepm*i > m-1:\nprint(lcm)\nbreak\nif s[stepn*i] != t[stepm*i]:\nprint(-1)\nexit()",
  "f2": "from bisect import bisect_left\nN, K = map(int, input().split())\nH = list(map(int, input().split()))\nH.sort()\nres = 0\nidx = bisect_left(H, K)\nif idx < N:\nif H[idx] < K:\nres = N - idx - 1\nelse:\nres = N - idx\nprint(res)\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03231/s186736320.py",
  "f2_idx": "./Project_CodeNet_Python800/p02898/s776673384.py",
  "response": "No"
 },
 {
  "f1": "n,k = map(int,input().split())\nw = [int(input()) for _ in range(n)]\nleft = max(w)-1\nright = sum(w)\n\nwhile (right - left) > 1:\nmid = (left + right)//2\ncount = 1\nc = 0\nfor s in w:\nif mid < c + s:\nc = s\ncount += 1\nelse:\nc += s\nif count <= k:\nright = mid\nelse:\nleft = mid\nprint(right)",
  "f2": "#import sys\n#input = sys.stdin.readline\n#input = sys.stdin.buffer.readline\n\n\n#sys.setrecursionlimit(10**9)\n#from functools import lru_cache\n\ndef RD(): return sys.stdin.read()\ndef II(): return int(input())\ndef MI(): return map(int,input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int,input().split()))\ndef LF(): return list(map(float,input().split()))\ndef TI(): return tuple(map(int,input().split()))\n# rstrip().decode()\n\n#import numpy as np\nfrom collections import defaultdict\n\ndef main():\n\nmod=10**9+7\n\nn=II()\ns=input()\ns=len(s)\n\npp=[1]\nfor i in range(n+10):\npp.append(pp[-1]*25%mod)\n\n\nnn=n+s\n\ncomb=[1]\nfor i in range(1,n+10):\ncomb.append(comb[-1]*(nn-i+1)*pow(i,mod-2,mod)%mod)\n#print(comb)\n\n\nans=0\n\nfor i in range(n+1):\nans+=(pp[i]*comb[i])%mod\nans%=mod\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02270/s026879866.py",
  "f2_idx": "./Project_CodeNet_Python800/p02632/s230583081.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nA = [int(i) for i in input().split()]\nA_tupple = [(idx+1, value) for idx, value in enumerate(A)]\nA_tupple.sort(key=lambda x:x[1])\nfor a in A_tupple:\nprint(a[0], end=\" \")",
  "f2": "import sys\ninput = sys.stdin.readline\n\n\ndef readstr():\nreturn input().strip()\n\n\ndef readint():\nreturn int(input())\n\n\ndef readnums():\nreturn map(int, input().split())\n\n\ndef readstrs():\nreturn input().split()\n\n\ndef main():\nN = readint()\nab = [tuple(readnums()) for _ in range(N)]\nans = 0\nfor a, b in reversed(ab):\nans += b - ((a + ans) % b) if (a + ans) % b else 0\n\nprint(ans)\n\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02899/s583140521.py",
  "f2_idx": "./Project_CodeNet_Python800/p03821/s308939175.py",
  "response": "no"
 },
 {
  "f1": "import itertools\nn = int(input())\nA = list(map(int, input().split()))\n\nA.sort()\nnum = 1\nB = list(itertools.accumulate(A))\nfor i, a in enumerate(A[1:]):\nif B[i]*2 < a:\nnum = 1\nelse:\nnum += 1\nprint(num)",
  "f2": "A,B,C,D=map(int,input().split())\nlis=[A*C,A*D,B*C,B*D]\nprint(max(lis))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03786/s047239602.py",
  "f2_idx": "./Project_CodeNet_Python800/p02553/s508498352.py",
  "response": "No"
 },
 {
  "f1": "import sys\nfrom collections import defaultdict, deque\nimport math\n\n# import copy\nfrom bisect import bisect_left, bisect_right\n# import heapq\n\n# sys.setrecursionlimit(1000000)\n\n# input aliases\ninput = sys.stdin.readline\n\ngetS = lambda: input().strip()\ngetN = lambda: int(input())\ngetList = lambda: list(map(int, input().split()))\ngetZList = lambda: [int(x) - 1 for x in input().split()]\n\nINF = 10 ** 20\nMOD = 10**9 + 7\ndivide = lambda x: pow(x, MOD-2, MOD)\n\ndef solve():\ns1 = getS()\ns2 = getS()\n# print(\"\".join(reversed([c for c in s1])))\nif \"\".join(reversed([c for c in s1])) == s2:\nprint(\"YES\")\nelse:\nprint(\"NO\")\ndef main():\nn = getN()\nfor _ in range(n):\nsolve()\n\n\nif __name__ == \"__main__\":\n# main()\nsolve()",
  "f2": "import sys\nfrom sys import exit\nfrom collections import deque\nfrom bisect import bisect_left, bisect_right, insort_left, insort_right #func(リスト,値)\nfrom heapq import heapify, heappop, heappush\nfrom math import *\n\nsys.setrecursionlimit(10**6)\nINF = 10**20\neps = 1.0e-20\nMOD = 10**9+7\n\ndef lcm(x,y):\nreturn x*y//gcd(x,y)\ndef mint():\nreturn map(int,input().split())\ndef lint():\nreturn list(map(int,input().split()))\ndef ilint():\nreturn int(input()), list(map(int,input().split()))\ndef judge(x, l=['Yes', 'No']):\nprint(l[0] if x else l[1])\ndef lprint(l, sep='\\n'):\nfor x in l:\nprint(x, end=sep)\ndef ston(c, c0='a'):\nreturn ord(c)-ord(c0)\ndef ntos(x, c0='a'):\nreturn chr(x+ord(c0))\nclass counter(dict):\ndef __init__(self, *args):\nsuper().__init__(args)\ndef add(self,x):\nself.setdefault(x,0)\nself[x] += 1\n\nN = int(input())\nL = [0]*26\nfor _ in range(N):\nS = input()\nL[ston(S[0],'A')] += 1\ns = ['M','A','R','C','H']\nans = 0\nfor l in [[0,1,2],[0,1,3],[0,1,4],[0,2,3],[0,2,4],[0,3,4],[1,2,3],[1,2,4],[1,3,4],[2,3,4]]:\nx,y,z = map(lambda x:ston(s[x],'A'), l)\nans += L[x]*L[y]*L[z]\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03555/s077452486.py",
  "f2_idx": "./Project_CodeNet_Python800/p03425/s262728240.py",
  "response": "No"
 },
 {
  "f1": "N = input()\nK = int(input())\n\nL = len(N)\ndp = [[[0]*(K+2) for _ in range(2)] for _ in range(L+1)]\ndp[0][0][0] = 1\n\nfor i in range(1,L+1):\na = int(N[i-1])\nfor k in range(K+1):\ndp[i][0][k] += dp[i-1][0][k] if a==0 else dp[i-1][0][k-1]\ndp[i][1][k] += dp[i-1][1][k-1]*9 + dp[i-1][1][k]\nif a>0:\ndp[i][1][k] += dp[i-1][0][k-1]*(a-1) + dp[i-1][0][k]\n\nprint(dp[L][0][K]+dp[L][1][K])",
  "f2": "# -*- coding: utf-8 -*-\nimport sys\nimport math\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\nimport itertools\nfrom decimal import *\n\ninput = sys.stdin.readline\n\ndef inputInt(): return int(input())\ndef inputMap(): return map(int, input().split())\ndef inputList(): return list(map(int, input().split()))\ndef inputStr(): return input()[:-1]\n\ninf = float('inf')\nmod = 1000000007\n\n#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\ndef main():\nS = inputStr()\nprint(S[:3])\n\n\n#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02781/s450186714.py",
  "f2_idx": "./Project_CodeNet_Python800/p02645/s900702253.py",
  "response": "No"
 },
 {
  "f1": "while True:\ncard = raw_input().strip()\nif card ==\"-\":\nbreak\nshufflenum = int(raw_input().strip())\nfor x in xrange(shufflenum):\nh = int(raw_input().strip())\ncard = card[h:]+card[:h]\nprint card",
  "f2": "import math\n\nn,k = (int(x) for x in input().split())\np = 0\nfor i in range(1,n+1):\na = max([math.ceil((math.log2(k/i))),0])\np += 1/(n*(2**a))\n\nprint(p)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02420/s504266311.py",
  "f2_idx": "./Project_CodeNet_Python800/p03043/s356546074.py",
  "response": "No"
 },
 {
  "f1": "def solve():\nn, m = map(int, input().split())\nreturn \"Yes\" if n == m else \"No\"\n\nprint(solve())",
  "f2": "N = int(input())\nA = list(map(int, input().split()))\nans = 1000\nfor i in range(N - 1):\na = A[i]\nif a < A[i + 1]:\nunits = ans // a\nans = (ans - units * a) + units * A[i + 1]\n# print(i, ans)\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02789/s414686579.py",
  "f2_idx": "./Project_CodeNet_Python800/p02603/s022137190.py",
  "response": "No"
 },
 {
  "f1": "import numpy as np\n\nN,A,B=[int(i) for i in input().split()]\nx=min(A,B)\nif((A+B)>N):\nz=N\ny=abs(A+B-z)\nelse:\ny=0\nprint(\"{} {}\".format(x,y))",
  "f2": "import math\nimport sys\nMOD = 1000000007\n\nn, m = map(int, input().split())\n\nif n == 1:\nprint(m)\nsys.exit()\n\nans = 1\nfor i in range(1, int(math.sqrt(m))+1):\nif m % i == 0:\nj = m / i\nif i <= m/n:\nans = max(ans, i)\nif j <= m/n:\nans = max(ans, j)\n\nprint(int(ans))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03139/s453814273.py",
  "f2_idx": "./Project_CodeNet_Python800/p03241/s037429924.py",
  "response": "No"
 },
 {
  "f1": "import sys\nfrom itertools import accumulate\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\nN, W, *wv = map(int, read().split())\n\nw0 = wv[0]\nweight = [[] for _ in range(4)]\nfor w, v in zip(*[iter(wv)] * 2):\nweight[w - w0].append(v)\n\nfor i in range(4):\nweight[i].sort(reverse=True)\n\ncsum = [[0] for _ in range(4)]\nfor i in range(4):\ncsum[i].extend(accumulate(weight[i]))\n\ndef dfs(w, v, idx):\nif idx == 4:\nreturn v\n\nans = 0\nfor i in range(len(csum[idx])):\nif w + (w0 + idx) * i > W:\nbreak\nans = max(ans, dfs(w + (w0 + idx) * i, v + csum[idx][i], idx + 1))\n\nreturn ans\n\nprint(dfs(0, 0, 0))\n\nreturn\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "import math\nimport sys\nr = float(sys.stdin.readline())\nprint(\"%0.6f %0.6f\" % (math.pi * r ** 2, math.pi * r * 2))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03732/s805797081.py",
  "f2_idx": "./Project_CodeNet_Python800/p02400/s522401570.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\na = list(map(int, input().split()))\na.sort()\nx = a[-1]\ny1 = x//2\ny2 = x//2 + 1\nsa1, sa2 = float(\"inf\"), float(\"inf\")\nz1, z2 = 0, 0\nfor i in range(n-1):\nif sa1 > abs(y1 - a[i]):\nsa1 = abs(y1-a[i])\nz1 = a[i]\nif sa2 > abs(y2 - a[i]):\nsa2 = abs(y2 - a[i])\nz2 = a[i]\n\nif sa1 > sa2:\nprint(x, z2)\nelse:\nprint(x, z1)\n\n",
  "f2": "s = list(input().split())\nprint('Yes' if len(set(s)) == 2 else 'No')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03380/s318870736.py",
  "f2_idx": "./Project_CodeNet_Python800/p02771/s460512168.py",
  "response": "No"
 },
 {
  "f1": "h,w,a,b=map(int,input().split())\n#コンビネーション逆元\ndef cmb(n, r, mod):\nif ( r<0 or r>n ):\nreturn 0\nr = min(r, n-r)\nreturn g1[n] * g2[r] * g2[n-r] % mod\n\n\nmod = 10**9+7 #出力の制限\nN = 10**6\ng1 = [1, 1] # 元テーブル\ng2 = [1, 1] #逆元テーブル\ninverse = [0, 1] #逆元テーブル計算用テーブル\n\n\nfor i in range( 2, N + 1 ):\ng1.append( ( g1[-1] * i ) % mod )\ninverse.append( ( -inverse[mod % i] * (mod//i) ) % mod )\ng2.append( (g2[-1] * inverse[-1]) % mod )\nans=cmb(h+w-2,h-1,mod)\nfor i in range(h-a+1,h+1):\nans-=cmb(i+b-2,i-1,mod)*cmb(h-i+w-b-1,w-b-1,mod)\nans%=mod\nprint(ans)",
  "f2": "import copy\n\nn = int(input())\nl = list(map(int,input().split()))\np1 = n//2\np2 = n//2-1\nans = copy.copy(l)\nans.sort()\n\nfor i in l:\nif i >= ans[p1]:\nprint(ans[p2])\nelse:\nprint(ans[p1])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p04046/s189716163.py",
  "f2_idx": "./Project_CodeNet_Python800/p03379/s036556702.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\n\n\nclass UnionFind:\n# Reference: https://note.nkmk.me/python-union-find/\ndef __init__(self, n):\nself.n = n\nself.parents = [-1] * n\n\ndef find(self, x):\nif self.parents[x] < 0:\nreturn x\nelse:\nself.parents[x] = self.find(self.parents[x])\nreturn self.parents[x]\n\ndef union(self, x, y):\nx = self.find(x)\ny = self.find(y)\n\nif x == y:\nreturn\n\nif self.parents[x] > self.parents[y]:\nx, y = y, x\n\nself.parents[x] += self.parents[y]\nself.parents[y] = x\n\ndef size(self, x):\nreturn -self.parents[self.find(x)]\n\ndef same(self, x, y):\nreturn self.find(x) == self.find(y)\n\ndef members(self, x):\nroot = self.find(x)\nreturn [i for i in range(self.n) if self.find(i) == root]\n\ndef roots(self):\nreturn [i for i, x in enumerate(self.parents) if x < 0]\n\ndef group_count(self):\nreturn len(self.roots())\n\n\ndef main():\nN, M, *AB = map(int, read().split())\n\nAB = list(reversed(AB[2:]))\ncount = N * (N - 1) // 2\nans = [count]\nuf = UnionFind(N)\n\nfor a, b in zip(AB[::2], AB[1::2]):\na -= 1\nb -= 1\nif not uf.same(a, b):\ncount -= uf.size(a) * uf.size(b)\nuf.union(a, b)\nans.append(count)\n\nprint('\\n'.join(map(str, reversed(ans))), sep='\\n')\nreturn\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "def check(s):\nt = 'keyence'\nif s == t:\nreturn 'YES'\nfor i in range(len(s)):\nfor j in range(i + 1, len(s)):\nif t == s[:i] + s[j:]:\nreturn 'YES'\nreturn 'NO'\n\n\ns = input()\nprint(check(s))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03108/s918575563.py",
  "f2_idx": "./Project_CodeNet_Python800/p03150/s904931849.py",
  "response": "No"
 },
 {
  "f1": "X,Y = map(int,input().split())\n\nans = \"No\"\n\nfor i in range(X+1):\nfor j in range (X-i+1):\nif i*2 + j*4 == Y and i + j == X:\nans = \"Yes\"\nbreak\n\nprint(ans)\n",
  "f2": "import itertools\n\nn = int(input())\na = list(map(int,input().split()))\n\nsu = sum(a)\nruisekiwa = list(itertools.accumulate(a))\nruisekiwa.pop()\nans = 10**99\n\nfor i in ruisekiwa:\nans = min(ans,abs(su - 2*i))\n\nprint(ans)\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02640/s030357380.py",
  "f2_idx": "./Project_CodeNet_Python800/p03659/s147288012.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\nh = list(map(int, input().split()))\n\nc = 0\n\nfor i in range(n):\nt = True\nfor j in range(i):\nif h[j] > h[i]:\nt = False\nbreak\nif t == True:\nc += 1\nt = True\nprint(c)",
  "f2": "h , w = map(int,input().split())\ngiri = [list(input()) for i in range(h)]\nans = [[0 for i in range(w)] for j in range(h)]\nfor i in range(h):\nsta = -1\ncou = 0\nfor j in range(w):\nif sta == -1 and giri[i][j] == \".\":\nsta = j\ncou += 1\nelif sta != -1 and giri[i][j] == \".\":\ncou += 1\nelif sta != -1 and giri[i][j] == \"#\":\nfor k in range(sta,j):\nans[i][k] += cou\ncou = 0\nsta = -1\nif j == w-1 and sta != -1:\nfor k in range(sta,w):\nans[i][k] += cou\n\nfor i in range(w):\nsta = -1\ncou = 0\nfor j in range(h):\nif sta == -1 and giri[j][i] == \".\":\nsta = j\ncou += 1\nelif sta != -1 and giri[j][i] == \".\":\ncou += 1\nelif sta != -1 and giri[j][i] == \"#\":\nfor k in range(sta,j):\nans[k][i] += cou\ncou = 0\nsta = -1\nif j == h-1 and sta != -1:\nfor k in range(sta,h):\nans[k][i] += cou\n\nkotae = 0\n\nfor i in range(h):\nfor j in range(w):\nkotae = max(kotae,ans[i][j]-1)\n\nprint(kotae)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03072/s005487046.py",
  "f2_idx": "./Project_CodeNet_Python800/p03014/s529453256.py",
  "response": "No"
 },
 {
  "f1": "N, M = map(int,input().split())\nif N>1 and M>1:\nprint(N*M-(N*2 + (M-2)*2))\nelif N==1 and M>1:\nprint(N*M-2)\nelif M==1 and N>1:\nprint(N*M-2)\nelse:\nprint(1)",
  "f2": "def main():\nS = input()\nfor i in range(len(S)-1):\nif S[i:i+2]==\"AC\":\nprint(\"Yes\")\nexit()\nprint(\"No\")\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03417/s661620895.py",
  "f2_idx": "./Project_CodeNet_Python800/p03567/s863062164.py",
  "response": "No"
 },
 {
  "f1": "from sys import stdin\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n#n = int(stdin.readline().rstrip())\n#l = list(map(int, stdin.readline().rstrip().split()))\nM1, D1 = map(int, stdin.readline().rstrip().split())\nM2, D2 = map(int, stdin.readline().rstrip().split())\n#S = [list(stdin.buffer.readline().decode().rstrip()) for _ in range(h)]\n\nif M1 != M2:\nprint(1)\nelse:\nprint(0)",
  "f2": "def getval():\nn,k = map(int,input().split())\nh = list(map(int,input().split()))\nreturn n,k,h\n\ndef main(n,k,h):\nif k>=n-1:\nprint(abs(h[-1]-h[0]))\nelse:\ndp = [abs(h[i]-h[0]) for i in range(k)]\nfor i in range(n):\nif len(dp)<n:\ndp.append(dp[i]+abs(h[i]-h[i+k]))\nfor j in range(k-1):\nif i+j+1>=n:\nbreak\ndp[i+j+1] = min(dp[i+j+1],dp[i]+abs(h[i]-h[i+j+1]))\nprint(dp[-1])\n\nif __name__==\"__main__\":\nn,k,h = getval()\nmain(n,k,h)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02841/s930506881.py",
  "f2_idx": "./Project_CodeNet_Python800/p03161/s338495986.py",
  "response": "No"
 },
 {
  "f1": "N,M = map(int,input().split())\nA = [input() for _ in range(N)]\nB = [input() for _ in range(M)]\nfor dx in range(N-M+1):\nfor dy in range(N-M+1):\nflg = True\nfor i in range(M):\nif A[i+dx][dy:dy+M] != B[i]:\nflg = False\nbreak\nif flg:\nprint(\"Yes\")\nexit()\nprint(\"No\")",
  "f2": "S = input()\nprint(S[0:3:1])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03804/s783927601.py",
  "f2_idx": "./Project_CodeNet_Python800/p02645/s347057103.py",
  "response": "No"
 },
 {
  "f1": "def enum_divisors(n):\nres = []\nfor i in range(1, int(n ** 0.5) + 1):\nif n % i == 0:\nres.append(i)\nif i != n // i:\nres.append(n // i)\nreturn res\n\n\nN = int(input())\nans = 0\nfor i in enum_divisors(N):\nd = N // i - 1\nif d == 0 or N // d != N % d:\ncontinue\nans += d\nprint(ans)",
  "f2": "N = int(input())\nA = list(map(int, input().split()))\n\nB = [0]*(N+1)\n\nfor i in range (0, N):\nB[A[i]]+=1\n\nC = 0\nimport math\n\nfor i in range (1, N+1):\nC+=math.comb(B[i],2)\n\nfor i in range (0, N):\nprint(C+math.comb(B[A[i]]-1,2)-math.comb(B[A[i]],2))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03050/s822654025.py",
  "f2_idx": "./Project_CodeNet_Python800/p02732/s810717262.py",
  "response": "No"
 },
 {
  "f1": "it = lambda: list(map(int, input().strip().split()))\n\n\ndef solve():\nn = int(input())\nF = [0] * n\nS = [0] * n\nfor i in range(n):\na, b = it()\nF[i] = a\nS[i] = b\n\ncnt = 0\nfor i in range(n):\nif F[i] == S[i]:\ncnt += 1\nif cnt == 3:\nreturn 'Yes'\nelse:\ncnt = 0\nreturn 'No'\n\n\nif __name__ == '__main__':\nprint(solve())",
  "f2": "import bisect\nn = int(input())\ns = input()\nelist = []\nwlist = []\nfor i in range(n):\nif s[i] == \"E\":\nelist.append(i)\nelif s[i] == \"W\":\nwlist.append(i)\nans = 10**18\nlenelist = len(elist)\n\"\"\"\n西にいるWを数える\n東にいるEを数える\n\"\"\"\nfor i in range(n):\ntmp = lenelist-bisect.bisect_right(elist, i)+bisect.bisect_left(wlist, i)\nans = min(tmp, ans)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02547/s635481518.py",
  "f2_idx": "./Project_CodeNet_Python800/p03339/s014801160.py",
  "response": "No"
 },
 {
  "f1": "def resolve():\nn = int(input())\np = map(int,input().split())\ncnt = 0\nfor i,j in enumerate(p):\nif (i+1) != j:\ncnt += 1\nprint('YES' if cnt < 3 else 'NO')\nresolve()",
  "f2": "import sys\n\ndef input_number():\nfor i in range(n):\nadding=map(int,raw_input().split())\nA.append(adding)\nfor i in range(m):\nadding=map(int,raw_input().split())\nB.append(adding)\n\nif __name__ == '__main__':\nn,m,l=map(int,raw_input().split())\nA=[]\nB=[]\nans=[[0 for j in range(l)]for i in range(n)]\ninput_number()\nfor i in range(n):\nfor j in range(l):\nfor k in range(m):\nans[i][j] += A[i][k] * B[k][j]\nfor i in range(n):\nfor j in range(l):\nsys.stdout.write(\"%d\" % ans[i][j])\nif j != l-1:\nsys.stdout.write(\" \")\nsys.stdout.write(\"\\n\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02958/s287104754.py",
  "f2_idx": "./Project_CodeNet_Python800/p02414/s875376900.py",
  "response": "No"
 },
 {
  "f1": "import math\nwhile True:\nn=int(input())\nif n == 0: break\nx=list(map(int,input().split()))\nave=sum(x)/n\na=0\nfor i in x:\na += (i-ave)**2 / n\nprint(math.sqrt(a))",
  "f2": "from pprint import pprint\n\n# import math\n# import collections\n\n# n = int(input())\n# n, k = map(int, input().split(' '))\n# a = list(map(int, input().split(' ')))\n\nc = []\nfor i in range(3):\nc.append(list(map(int, input().split(' '))))\n\ndiff_v = [[0] * 3 for i in range(3)]\ndiff_h = [[0] * 3 for i in range(3)]\n\nfor i in range(0, 3):\nfor j in range(0, 3):\nif i > 0:\ndiff_v[i][j] = c[i][j] - c[i - 1][j]\n\nfor j in range(0, 3):\nfor i in range(0, 3):\nif j > 0:\ndiff_h[j][i] = c[i][j] - c[i][j - 1]\n\n\ndef map_all(es):\nreturn all([e == es[0] for e in es[1:]]) if es else False\n\n\neq_v = all([map_all(d) for d in diff_v])\neq_h = all([map_all(d) for d in diff_h])\n\nif eq_v and eq_h:\nprint('Yes')\nelse:\nprint('No')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02381/s524605508.py",
  "f2_idx": "./Project_CodeNet_Python800/p03435/s272155750.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\narr = list(map(int, input().split()))\n\nc = 0\nh = set([])\n\nfor i in range(n):\nfor j in range(i+1,n):\nfor k in range(j+1,n):\nt = [arr[i], arr[j],arr[k]]\nt.sort()\nif t[0] + t[1] > t[2]:\nif t[0]!=t[1]!=t[2]:#if (i,j,k) not in h:\nh.add((i,j,k))\nc+=1\n\nprint(c)",
  "f2": "import copy\n\ndef warshall_floyd(d,n):\nD = copy.deepcopy(d)\nfor k in range(n):\nfor i in range(n):\nfor j in range(n):\nif i == k  or k == j:\ncontinue\nif d[i][k] + d[k][j] < d[i][j]:\nreturn -1\nelif d[i][k] + d[k][j] == d[i][j]:\nD[i][j] = 0\nans = sum([sum(i) for i in D])\nassert not (ans % 2)\nreturn ans // 2\n\nn = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nans = warshall_floyd(a,n)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02583/s896260359.py",
  "f2_idx": "./Project_CodeNet_Python800/p03600/s354534235.py",
  "response": "No"
 },
 {
  "f1": "import sys\ninput = sys.stdin.readline\n\nN, u, v = map(int, input().split())\nu -= 1\nv -= 1\nF = [[] for _ in range(N)]\nfor _ in range(N-1):\na, b = map(int, input().split())\na -= 1\nb -= 1\nF[a].append(b)\nF[b].append(a)\na_dist = [-1]*N\nt_dist = [-1]*N\na_dist[v] = 0\nt_dist[u] = 0\ndef dfs(p):\ndist = [-1]*N\nstack = [p]\ndist[p] = 0\nwhile stack:\nq = stack.pop()\nfor nq in F[q]:\nif dist[nq] == -1:\ndist[nq] = dist[q]+1\nstack.append(nq)\nreturn dist\na_dist = dfs(v)\nt_dist = dfs(u)\nans = 0\nfor t, a in zip(t_dist, a_dist):\nif t < a:\ntemp = a-1\nif ans < temp:\nans = temp\n\nprint(ans)",
  "f2": "n,k = map(int,input().split())\na = list(map(int,input().split()))\nfor i in range(n-1):\nif a[i]+a[i+1] >= k:\nprint(\"Possible\")\nx = i\nbreak\nelse:\nprint(\"Impossible\")\nexit()\nif x == 0:\nprint(*list(range(1,n))[::-1],sep=\"\\n\")\nelse:\nans = list(range(1,n))\nans[x:] = ans[n-1:x-1:-1]\nprint(*ans,sep=\"\\n\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02834/s899984250.py",
  "f2_idx": "./Project_CodeNet_Python800/p04035/s200739423.py",
  "response": "No"
 },
 {
  "f1": "MM = input().split()\nN = int(MM[0])\nT = int(MM[1])\nlist1 =[]\nfor i in range(N):\nNN = input().split()\nc = int(NN[0])\nt = int(NN[1])\nif t <= T:\nlist1.append(c)\nlist1.sort()\nif len(list1) == 0:\nprint('TLE')\nelse:\nprint(list1[0])",
  "f2": "n = int(input())\nh_list = list(map(int,input().split()))\ndum = 0\nans = 0\nfor i in range(n):\nif h_list[i] >= dum:\nans += 1\ndum = max(h_list[i],dum)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03239/s037508435.py",
  "f2_idx": "./Project_CodeNet_Python800/p03072/s016407364.py",
  "response": "No"
 },
 {
  "f1": "def main():\nimport math\nN = int(input())\nans=0\nfor i in range(1,N+1):\nfor j in range(1, N+1):\nfor k in range(1, N+1):\nt=math.gcd(i,j)\nt=math.gcd(t,k)\nans+=t\n\nprint(ans)\n\nif __name__=='__main__':\nmain()",
  "f2": "n = int(input())\n\nprint(n + n**2 + n**3)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02713/s011508614.py",
  "f2_idx": "./Project_CodeNet_Python800/p02621/s289597376.py",
  "response": "No"
 },
 {
  "f1": "k = int(input())\n\na = [7%k]\n\nfor i in range(1, k):\na.append((a[i-1]*10+7)%k)\n\nfor i in range(k):\nif a[i] == 0:\nprint(i+1)\nexit()\n\nprint(-1)",
  "f2": "def solve():\nN, K = map(int,input().split())\nans = 0\nfor b in range(1,N+1):\nans += max(0,(N//b) * (b-K))\nans += max(0, N%b - K+1)\n\nif K == 0:\nans -= N\n\nprint(ans)\n\nif __name__ == '__main__':\nsolve()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02596/s295382890.py",
  "f2_idx": "./Project_CodeNet_Python800/p03418/s689900473.py",
  "response": "No"
 },
 {
  "f1": "s = input()\ncount = 0\ncheck = \"CODEFESTIVAL2016\"\nfor i in range(len(s)):\nif s[i] != check[i]:\ncount += 1\nprint(count)",
  "f2": "n,k = input().split()\nk = int(k)\n#print(n,k)\np = [int(s) for s in input().split()]\np.sort()\n#print(p)\n#print(k)\np2 = p[0:k]\n#print(p2)\ns = sum(p)\n#print(s)\nprint(sum(p2))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03970/s223902745.py",
  "f2_idx": "./Project_CodeNet_Python800/p02628/s195443610.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\na = list(map(int,input().split()))\nmod = 10**9 + 7\n\nc = [n]*61\nfor i in range(n):\nb = str(bin(a[i]))[2:]\nb = b[::-1]\nfor j, x in enumerate(b):\nif x == \"1\":\nc[j] -= 1\n\nans = 0\nfor i in range(60):\nans += c[i]*(n-c[i])*pow(2,i,mod)\nans %= mod\nprint(ans)",
  "f2": "x = input()\ns_cnt = 0\nt_cnt = 0\nans = 0\ntmp = 0\nfor s in x:\nif s == \"T\":\nif tmp == 0:\nans += 2\nelse:\ntmp -= 1\nelse:\ntmp += 1\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02838/s450502428.py",
  "f2_idx": "./Project_CodeNet_Python800/p03986/s366063883.py",
  "response": "No"
 },
 {
  "f1": "class UnionFind():\ndef __init__(self, n):\nself.n = n\nself.parents = [-1] * n\n\ndef find(self, x):\nif self.parents[x] < 0:\nreturn x\nelse:\nself.parents[x] = self.find(self.parents[x])\nreturn self.parents[x]\n\ndef union(self, x, y):\nx = self.find(x)\ny = self.find(y)\n\nif x==y:\nreturn False\n\nif self.parents[x] > self.parents[y]:\nx, y = y, x\n\nself.parents[x] += self.parents[y]\nself.parents[y] = x\nreturn True\n\ndef size(self, x):\nreturn -self.parents[self.find(x)]\n\nN, M = map(int, input().split())\nans = 0\n\nUF = UnionFind(N)\n\nfor i in range(M):\na, b = map(int, input().split())\na -= 1\nb -= 1\nUF.union(a,b)\n\nfor i in range(N):\nans = max(ans, UF.size(i))\n\nprint(ans)",
  "f2": "N, T = map(int, input().split())\nA = list(map(int, input().split()))\ndictA = {}\nminA = 10**13\nmaxD = 0\nfor ai in A:\nminA = min(minA, ai)\nmaxD = max(ai-minA, maxD)\ndictA[ai] = True\nans = 0\nfor ai in A:\ndictA[ai] = False\nif dictA.get(ai + maxD, False):\nans += 1\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02573/s392928466.py",
  "f2_idx": "./Project_CodeNet_Python800/p03946/s357696136.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\nl=list(map(int,input().split()))\nl=sorted(l)\ns=0\nfor i in range(len(l)):\nif i%2==0:s+=l[i]\nprint(s)",
  "f2": "K,X=map(int,input().split())\nprint(\"YNeos\"[500*K<X::2])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p04047/s062267832.py",
  "f2_idx": "./Project_CodeNet_Python800/p02811/s075345356.py",
  "response": "No"
 },
 {
  "f1": "N ,M = map(int,input().split())\n\nans = 0\nif N==1:\nif M==1:\nans=1\nelse:\nans = M-2\nelif M==1:\nans = N-2\nelse:\nans += (N-2)*(M-2)\n\nprint(ans)",
  "f2": "n, x, m = map(int, input().split())\nmn = min(n, m)\nP = [] # (x,pre_sum)\nsum_p = 0 # sum of pre + cycle\nX = [-1] * m # for cycle check\nfor i in range(mn):\nif X[x] > -1:\ncyc_len = len(P) - X[x]\npre = P[X[x]][1]\ncyc = (sum_p - pre) * ((n - X[x]) // cyc_len)\nnxt = P[X[x] + (n - X[x]) % cyc_len][1] - P[X[x]][1]\nprint(pre + cyc + nxt)\nexit()\nP.append([x, sum_p])\nsum_p += x\nX[x] = i\nx = x*x % m\nprint(sum_p)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03417/s523274477.py",
  "f2_idx": "./Project_CodeNet_Python800/p02550/s695158501.py",
  "response": "No"
 },
 {
  "f1": "from collections import defaultdict\nimport string\ns = input()\nK = int(input())\nlocation = defaultdict(list)\nfor i, s_i in enumerate(s):\nlocation[s_i].append(i)\ncount = 0\ns_list = []\nfor c in string.ascii_lowercase[:26]:\nif location[c] == []:\ncontinue\nfor idx in location[c]:\nfor i in range(K):\nif idx + i + 1 > len(s):\nbreak\nif s[idx:idx+i+1] in s_list:\ncontinue\ns_list.append(s[idx:idx+i+1])\ncount += 1\nif count == K:\nbreak\ns_list.sort()\nprint(s_list[K-1])",
  "f2": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\na, b, c = list(map(int, input().split()))\ncount = 0\nfor i in range(a, b + 1):\nif c % i == 0:\ncount += 1\nprint(count)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03353/s194190017.py",
  "f2_idx": "./Project_CodeNet_Python800/p02398/s817298600.py",
  "response": "No"
 },
 {
  "f1": "H,W,M=map(int,input().split())\n#二次元リストではなく列行を一個のボムで消してくれるためそれぞれのリストを用意。\nsumh = [0] * H\nsumw = [0] * W\nbomb=[]\n\nfor i in range(M):\nh,w=map(int,input().split())\nsumh[h-1]+=1\nsumw[w-1]+=1\nbomb.append((h,w))\n\n#爆弾の個数の最大値とその最大値がいくつずつあるか(ch,cw)に保存。最大の列と最大の行のいずれかの組み合わせに置くことで爆破数を最大化できる。\nmaxh=max(sumh)\nmaxw=max(sumw)\nch=sumh.count(maxh)\ncw=sumw.count(maxw)\n#print(maxh,maxw,ch,cw)\n\n#爆弾のある場所がH,Wの座標で両方共で最大個数の場所であった場合その数を加算\ncount=0\nfor h,w in bomb:\nif sumh[h-1]==maxh and sumw[w-1]==maxw:\ncount+=1\n#print(count)\n\n#破壊できる数は、そのマスに爆破対象があるとき一つ減ってしまう。\nif count==ch*cw:\nprint(maxh+maxw-1)\nelse:\nprint(maxh+maxw)",
  "f2": "S = input()\nN = len(S)\nK = int(input())\nS_list = sorted(set(list(S)))\n\nmemo = {}\n\nfor small_char in S_list:\nfor i in range(N):\nif S[i] == small_char:\nfor j in range(i+1, i+K+1):\nword = S[i:j]\nmemo[word] = None\nif len(memo) >= K:\nbreak\n\nans_list = sorted(list(memo.keys()))\nprint(ans_list[K-1])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02580/s380086153.py",
  "f2_idx": "./Project_CodeNet_Python800/p03353/s194130517.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\ndic = {}\nans = []\n\nfor i in range(n):\ncom = input().split()\nc = com[0]\n\nif com[1] in dic:\nif c[0] == 'f': ans.append(\"yes\")\nelse: pass\n\nelse:\nif c[0] == 'i': dic[ com[1] ] = i\nelse: ans.append(\"no\")\n\n\nfor i in ans: print(i)\n",
  "f2": "import sys\ndef input(): return sys.stdin.readline().strip()\n\ndef resolve():\ns=input()\na='Sunny'\nb='Cloudy'\nc='Rainy'\nif s==a:\nprint(b)\nelif s==b:\nprint(c)\nelse:\nprint(a)\nresolve()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02269/s690200296.py",
  "f2_idx": "./Project_CodeNet_Python800/p02909/s855379737.py",
  "response": "No"
 },
 {
  "f1": "#095_D\nn, c = map(int, input().split())\nx, v = [0], [0]\nfor _ in range(n):\na, b = map(int, input().split())\nx.append(a)\nv.append(b)\nx.append(c)\nv.append(0)\n\nfr1, fr2 = [0 for _ in range(n+1)], [0 for _ in range(n+1)]\nfl1, fl2 = [0 for _ in range(n+2)], [0 for _ in range(n+2)]\n\ntmp1, tmp2 = 0, 0\nfor i in range(0, n):\ntmp1 += v[i+1] - (x[i+1] - x[i])\ntmp2 += v[i+1] - 2 * (x[i+1] - x[i])\nfr1[i+1] = max(tmp1, fr1[i])\nfr2[i+1] = max(tmp2, fr2[i])\n\ntmp1, tmp2 = 0, 0\nfor i in range(n, 0, -1):\ntmp1 += v[i] - abs(x[i+1] - x[i])\ntmp2 += v[i] - 2 * abs(x[i+1] - x[i])\nfl1[i] = max(tmp1, fl1[i+1])\nfl2[i] = max(tmp2, fl2[i+1])\n\nans = 0\nfor i in range(n+1):\nans = max(ans, fr1[i] + fl2[i+1], fr2[i] + fl1[i+1])\nprint(ans)",
  "f2": "import math\n\nA, B = map(int, input().strip().split(\" \"))\nprint(math.ceil((B-1)/(A-1)))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03372/s204971101.py",
  "f2_idx": "./Project_CodeNet_Python800/p02922/s463616089.py",
  "response": "No"
 },
 {
  "f1": "d,n = map(int, input().split())\nif n < 100:\nx = n * 100 ** d\nelse:\nx = 101 * 100 ** d\nprint(x)",
  "f2": "import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nN, K = map(int, readline().split())\nS = list(read().rstrip().decode())\n\nS[K - 1] = S[K - 1].lower()\nprint(''.join(S))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03324/s260255378.py",
  "f2_idx": "./Project_CodeNet_Python800/p03041/s581589870.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\na=list(map(int, input().split()))\ncount=0\nfor i in range(n-1,-1,-1):\nfor j in range(i+1):\nif(a[j]>a[i]):\nt=a[j]\na[j]=a[i]\na[i]=t\ncount+=1\nif(count>1):\nprint(\"NO\")\nelse:\nprint(\"YES\")",
  "f2": "A, B, C = map(int, input().split())\nr = B+min(A+B+1, C)\nprint(r)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02958/s204425987.py",
  "f2_idx": "./Project_CodeNet_Python800/p03186/s809173004.py",
  "response": "No"
 },
 {
  "f1": "#!/usr/bin/env python3\nimport sys\n\nMOD = 1000000007  # type: int\n\ndef solve(S: str):\ntotal = 0\nfor s in S:\nif s == '?':\ntotal += 1\ntri = [1]\nfor i in range(1, total + 1):\ntri.append(tri[i - 1] * 3 % MOD)\nn = len(S)\ndp = [[0] * 4 for _ in range(n + 1)]\ncnt = 0\nfor i in range(n):\ns = S[i]\ndp[i + 1][0] = dp[i][0]\ndp[i + 1][1] = dp[i][1]\ndp[i + 1][2] = dp[i][2]\ndp[i + 1][3] = dp[i][3]\nif s == '?':\ndp[i + 1][1] = dp[i][1] + 1\ndp[i + 1][2] = (dp[i][2] * 3 + dp[i][0] * tri[cnt] + dp[i][1] * tri[cnt - 1]) % MOD\ndp[i + 1][3] = (dp[i][3] + dp[i][2] * tri[total - cnt - 1]) % MOD\ncnt += 1\nelif s == 'A':\ndp[i + 1][0] = dp[i][0] + 1\nelif s == 'B':\ndp[i + 1][2] = (dp[i][2] + dp[i][0] * tri[cnt] + dp[i][1] * tri[cnt - 1]) % MOD\nelif s == 'C':\ndp[i + 1][3] = (dp[i][3] + dp[i][2] * tri[total - cnt]) % MOD\n#print(dp)\nret = dp[n][3] % MOD\nprint(ret)\nreturn\n\n\ndef main():\ndef iterate_tokens():\nfor line in sys.stdin:\nfor word in line.split():\nyield word\ntokens = iterate_tokens()\nS = next(tokens)  # type: str\nsolve(S)\n\nif __name__ == '__main__':\nmain()",
  "f2": "# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport string\nimport heapq\nimport _collections\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport bisect\nimport re\nimport queue\nimport decimal\n\n\nclass Scanner():\n@staticmethod\ndef int():\nreturn int(sys.stdin.readline().rstrip())\n\n@staticmethod\ndef string():\nreturn sys.stdin.readline().rstrip()\n\n@staticmethod\ndef map_int():\nreturn [int(x) for x in Scanner.string().split()]\n\n@staticmethod\ndef string_list(n):\nreturn [Scanner.string() for i in range(n)]\n\n@staticmethod\ndef int_list_list(n):\nreturn [Scanner.map_int() for i in range(n)]\n\n@staticmethod\ndef int_cols_list(n):\nreturn [Scanner.int() for i in range(n)]\n\n\nclass Math():\n@staticmethod\ndef gcd(a, b):\nif b == 0:\nreturn a\nreturn Math.gcd(b, a % b)\n\n@staticmethod\ndef lcm(a, b):\nreturn (a * b) // Math.gcd(a, b)\n\n@staticmethod\ndef divisor(n):\nres = []\ni = 1\nfor i in range(1, int(n ** 0.5) + 1):\nif n % i == 0:\nres.append(i)\nif i != n // i:\nres.append(n // i)\nreturn res\n\n@staticmethod\ndef round_up(a, b):\nreturn -(-a // b)\n\n@staticmethod\ndef is_prime(n):\nif n < 2:\nreturn False\nif n == 2:\nreturn True\nif n % 2 == 0:\nreturn False\nd = int(n ** 0.5) + 1\nfor i in range(3, d + 1, 2):\nif n % i == 0:\nreturn False\nreturn True\n\n@staticmethod\ndef fact(N):\nres = {}\ntmp = N\nfor i in range(2, int(N ** 0.5 + 1) + 1):\ncnt = 0\nwhile tmp % i == 0:\ncnt += 1\ntmp //= i\nif cnt > 0:\nres[i] = cnt\nif tmp != 1:\nres[tmp] = 1\nif res == {}:\nres[N] = 1\nreturn res\n\n\ndef pop_count(x):\nx = x - ((x >> 1) & 0x5555555555555555)\nx = (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\nx = (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f\nx = x + (x >> 8)\nx = x + (x >> 16)\nx = x + (x >> 32)\nreturn x & 0x0000007f\n\n\nMOD = int(1e09) + 7\nINF = int(1e15)\n\n\ndef modinv(a):\nb = MOD\nu = 1\nv = 0\nwhile b:\nt = a // b\na -= t * b\na, b = b, a\nu -= t * v\nu, v = v, u\n\nu %= MOD\nif u < 0:\nu += MOD\nreturn u\n\n\ndef factorial(N):\nif N == 0 or N == 1:\nreturn 1\nres = N\nfor i in range(N - 1, 1, -1):\nres *= i\nres %= MOD\nreturn res\n\n\ndef solve():\nX, Y = Scanner.map_int()\nif (X + Y) % 3 != 0:\nprint(0)\nreturn\nB = (2 * Y - X) // 3\nA = (2 * X - Y) // 3\nif A < 0 or B < 0:\nprint(0)\nreturn\nn = factorial(A + B)\nm = factorial(A)\nl = factorial(B)\nans = n * modinv(m * l % MOD) % MOD\nprint(ans)\n\n\ndef main():\n# sys.setrecursionlimit(1000000)\n# sys.stdin = open(\"sample.txt\")\n# T = Scanner.int()\n# for _ in range(T):\n#     solve()\n# print('YNeos'[not solve()::2])\nsolve()\n\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03291/s650223736.py",
  "f2_idx": "./Project_CodeNet_Python800/p02862/s317124624.py",
  "response": "No"
 },
 {
  "f1": "import sys\ndef input(): return sys.stdin.readline().strip()\noffset = 10**6\n\ndef main():\nN, K = map(int, input().split())\npair = []\nfor _ in range(N):\na, b = map(int, input().split())\npair.append((a * offset + b))\npair.sort()\nnum = 0\nfor val in pair:\na, b = val // offset, val % offset\nif num + b < K:\nnum += b\ncontinue\nprint(a)\nreturn\n\n\nfor p in path: print(p)\n\n\nif __name__ == \"__main__\":\nmain()",
  "f2": "A, V = map(int,input().split())\nB, W = map(int,input().split())\nT = int(input())\nif (V <= W):\nprint(\"NO\")\nelif(T < abs(A - B)/(V-W)):\nprint(\"NO\")\nelse:\nprint(\"YES\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03721/s079367410.py",
  "f2_idx": "./Project_CodeNet_Python800/p02646/s100425106.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\nlist_p = sorted([int(input()) for n in range(0, n)])\nprint(sum(list_p[:n - 1]) + list_p[n - 1] // 2)",
  "f2": "A, B, K = input().split(\" \")\nA, B, K = int(A), int(B), int(K)\n\nres = []\n\nfor i in range(A, 0, -1):\nif A % i == 0 and B % i == 0:\nres.append(i)\n\nprint(res[K-1])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03207/s654274545.py",
  "f2_idx": "./Project_CodeNet_Python800/p03106/s286183393.py",
  "response": "No"
 },
 {
  "f1": "n,c = map(int,input().split())\ninfo = [[0,0]]+[list(map(int,input().split())) for i in range(n)]+[[c,0]]\nleft_info = info[::-1]\n\nright_ruiseki = [0]*(n+1)\nleft_ruiseki = [0]*(n+1)\nou_right_ruiseki = [0]*(n+1)\nou_left_ruiseki = [0]*(n+1)\n\nfor i in range(n):\nright_ruiseki[i+1] = right_ruiseki[i] + info[i+1][1] - info[i+1][0] + info[i][0]\nleft_ruiseki[i+1] = left_ruiseki[i] + left_info[i+1][1] + left_info[i+1][0] - left_info[i][0]\nou_right_ruiseki[i+1] = ou_right_ruiseki[i] + info[i+1][1] - 2*info[i+1][0] + 2*info[i][0]\nou_left_ruiseki[i+1] = ou_left_ruiseki[i] + left_info[i+1][1] + 2*left_info[i+1][0] - 2*left_info[i][0]\n\n#print(right_ruiseki,left_ruiseki,ou_right_ruiseki,ou_left_ruiseki)\n\nfor i in range(n):\nright_ruiseki[i+1]=max(right_ruiseki[i],right_ruiseki[i+1])\nleft_ruiseki[i+1]=max(left_ruiseki[i],left_ruiseki[i+1])\n\n#print(right_ruiseki,left_ruiseki,ou_right_ruiseki,ou_left_ruiseki)\nans = 0\n\nfor i in range(n+1):\ntmp1 = ou_right_ruiseki[i]+left_ruiseki[n-i]\ntmp2 = ou_left_ruiseki[i]+right_ruiseki[n-i]\nans = max(tmp1,tmp2,ans)\nprint(ans)",
  "f2": "A,B = map(int,input().split())\nnum = min(A,B)\nnum1 = max(A,B)\ncount=0\nfor i in range(num1):\ncount += num*(10**i)\nprint(count)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03372/s741712898.py",
  "f2_idx": "./Project_CodeNet_Python800/p02790/s062250567.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\nn = int(input())\nAB = [list(map(int, input().split())) for _ in range(n)]\nfor i in range(n):\na, b = AB[i]\nAB[i] = [a + b, a, b]\nAB.sort(key=lambda x: x[0], reverse=True)\n\nscore_t = sum(AB[i][1] for i in range(n) if i % 2 == 0)\nscore_a = sum(AB[i][2] for i in range(n) if i % 2 != 0)\n\nprint(score_t - score_a)\n\n\nif __name__ == '__main__':\nresolve()",
  "f2": "N=int(input())\n*A,=sorted(map(int,input().split()))\n\ndef f(x):\nfor i in range(x,N,2):\nif A[i-1]!=i or A[i]!=i:\nreturn 0\nreturn 1\n\na=1\nif N%2==0:a=f(1)\nelse:\nif A[0]!=0:a=0\nelse:a=f(2)\nprint(2**(N//2)%(10**9+7)*a)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03141/s530971354.py",
  "f2_idx": "./Project_CodeNet_Python800/p03846/s558399605.py",
  "response": "No"
 },
 {
  "f1": "while True:\nh, w =map(int,input().split())\nodd = '#.'*300\neven = '.#'*300\nif h == 0 and w==0:\nbreak\nfor i in range(h):\nif i%2 ==0:\nout = odd[:w]\nelse:\nout= even[:w]\nprint(out)\nprint()",
  "f2": "a,b,c = map(int,input().split())\n\nmod = a % b\nans = 'NO'\nfor i in range(1,b):\nif (i*mod) % b == c:\nans = 'YES'\nbreak\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02405/s165493405.py",
  "f2_idx": "./Project_CodeNet_Python800/p03730/s720731477.py",
  "response": "No"
 },
 {
  "f1": "N,M = map(int,input().split())\nS =[0]*M\nfor i in range(M):\nk,*s = map(int,input().split())\nS[i] = s\n\nP = list(map(int,input().split()))\nans = 0\nfor num in range(1<<N):\nLight = [0] * N\ncount = 0\nfor i in range(N):\nbit = num>>i & 1\nif bit:\nLight[i] = 1\nfor i,s in enumerate(S):\nlight_count = 0\np = P[i]\nfor si in s:\nif Light[si-1]:\nlight_count += 1\nif light_count % 2 == p:\ncount+=1\nif count == M:\nans += 1\n\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n\n",
  "f2": "N,K=list(map(int,input().split()))\nS=input()\nsdic={\"A\":\"a\",\"B\":\"b\",\"C\":\"c\"}\nprint(S[:K-1]+sdic[S[K-1]]+S[K:])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03031/s407178038.py",
  "f2_idx": "./Project_CodeNet_Python800/p03041/s005425327.py",
  "response": "No"
 },
 {
  "f1": "S = input()\nh = S/3600\nm = S%3600 / 60\ns = S%60\nprint'%d:%d:%d' % (h,m,s)",
  "f2": "n, k, s = map(int, input().split())\nL = [0] * n\nfor i in range(n):\nif i < k:\nL[i] = s\nelse:\nif s != 10 ** 9:\nL[i] = s + 1\nelse:\nL[i] = s - 1\nprint(*L)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02390/s445277378.py",
  "f2_idx": "./Project_CodeNet_Python800/p02797/s045763576.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\narr = [int(input()) for index in range(n)]\n\ncnt, m = 0, 0\nG = []\n\n\ndef insertion_sort(nums, n, g):\nglobal cnt\nfor idx1 in range(g, n):\nv = nums[idx1]\nidx2 = idx1 - g\nwhile idx2 >= 0 and nums[idx2] > v:\nnums[idx2+g] = nums[idx2]\nidx2 -= g\ncnt  += 1\nnums[idx2+g] = v\n\nh = 1\nwhile not h > n:\nG.append(h)\nh = 3 * h + 1\n\nm = len(G)\nG.reverse()\n\nfor index in range(m):\ninsertion_sort(arr, n, G[index])\n\n\nprint(m)\nprint(\" \".join(map(str, G)))\nprint(cnt)\nfor i in range(n):\nprint(arr[i])",
  "f2": "# Ford-Fulkerson algorithm\nclass FordFulkerson:\ndef __init__(self, N):\nself.N = N\nself.edge = [[] for i in range(N)]\n\ndef add_edge(self, fr, to, cap):\nforward = [to, cap, None]\nforward[2] = backward = [fr, 0, forward]\nself.edge[fr].append(forward)\nself.edge[to].append(backward)\n\ndef add_multi_edge(self, v1, v2, cap1, cap2):\nedge1 = [v2, cap1, None]\nedge1[2] = edge2 = [v1, cap2, edge1]\nself.edge[v1].append(edge1)\nself.edge[v2].append(edge2)\n\ndef dfs(self, v, t, f):\nif v == t:\nreturn f\nused = self.used\nused[v] = 1\nfor e in self.edge[v]:\nw, cap, rev = e\nif cap and not used[w]:\nd = self.dfs(w, t, min(f, cap))\nif d:\ne[1] -= d\nrev[1] += d\nreturn d\nreturn 0\n\ndef flow(self, s, t):\nflow = 0\nf = INF = 10**9 + 7\nN = self.N\nwhile f:\nself.used = [0]*N\nf = self.dfs(s, t, INF)\nflow += f\nreturn flow\n\nimport sys\nreadline = sys.stdin.readline\n\nN = int(input())\nR = [list(map(int, input().split())) for _ in range(N)]\nB = [list(map(int, input().split())) for _ in range(N)]\nff = FordFulkerson(2*N+2)\nfor v in range(1,N+1):\nff.add_edge(0,v,1)\nfor v in range(N):\nff.add_edge(1+N+v,2*N+1,1)\nfor u,(a,b) in enumerate(R):\nfor v,(c,d) in enumerate(B):\nif a<c and b<d:\nff.add_edge(1+u,1+N+v,1)\nans = ff.flow(0,2*N+1)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02262/s598762107.py",
  "f2_idx": "./Project_CodeNet_Python800/p03409/s376829903.py",
  "response": "No"
 },
 {
  "f1": "n,k = map(int,input().split())\nr,s,p = map(int,input().split())\nt = input()\nans = 0\nvstd = [0]*n\ndef jungkeng(x):\nglobal ans\nif x=='r':\nans += p\nelif x=='s':\nans += r\nelse:\nans += s\nreturn ans\n\nfor i in range(k):\nans = jungkeng(t[i])\nvstd[i]=1\nfor i in range(k,n):\nif t[i]==t[i-k] and vstd[i-k]:\ncontinue\nans = jungkeng(t[i])\nvstd[i] = 1\nprint(ans)",
  "f2": "#!/usr/bin/env python3\n\nYES = \"Yes\"  # type: str\nNO = \"No\"  # type: str\n\n\ndef solve(A: int, B: int, C: int, D: int):\nwhile True:\n# 高橋\nC -= B\nif C <= 0:\nreturn YES\n# 青木\nA -= D\nif A <= 0:\nreturn NO\n\n\ndef main():\nA, B, C, D = map(int, input().split())\nanswer = solve(A, B, C, D)\nprint(answer)\n\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02820/s826945785.py",
  "f2_idx": "./Project_CodeNet_Python800/p02700/s216672463.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nA = list(map(int,input().split()))\n\ndic = {}\nfor a in A:\nif a in dic:\ndic[a] += 1\nelse:\ndic[a] = 1\n\ndic = sorted(dic.items(), reverse=True)\n\nans = 1\ncheck = 0\nbool1 = False\nfor (i,j) in dic:\ncnt = j // 2\nfor _ in range(cnt):\nans *= i\ncheck += 1\nif check == 2:\nbool1 = True\nbreak\nif bool1:\nbreak\n\nprint(ans if ans != 1 else 0)",
  "f2": "# coding: utf-8\nheight, width = list(map(int, input().split(\" \")))\nanswer = [[0 for _ in range(width + 1)] for _ in range(height + 1)]\n\nfor row in range(height):\ncolumn = 0\nsumOfColumn = 0\nfor value in list(map(int, input().split(\" \"))):\nanswer[row][column] = value\nsumOfColumn += value\ncolumn += 1\nanswer[row][column] = sumOfColumn\n\nfor columnIndex in range(width + 1):\nsumOfRow = 0\nfor rowIndex in range(height):\nvalue = answer[rowIndex][columnIndex]\nsumOfRow += value\nanswer[height][columnIndex] = sumOfRow\n\nfor row in answer:\nprint(\" \".join(map(str, row)))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03625/s208240276.py",
  "f2_idx": "./Project_CodeNet_Python800/p02413/s761040660.py",
  "response": "No"
 },
 {
  "f1": "a, b = input().split()\nN = int(a+b)\nfor n in range(N):\nif n*n == N:\nprint(\"Yes\")\nbreak\nelse:\nprint(\"No\")",
  "f2": "S=[x for x in input()]\nT=S[::-1]\nstart=0\nend=0\nfor i in range(len(S)):\nif S[i]=='A':\nstart=i\nbreak\nfor i in range(len(T)):\nif T[i]=='Z':\nend=i\nbreak\n\nprint(len(S)-end-start)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03456/s244864402.py",
  "f2_idx": "./Project_CodeNet_Python800/p03814/s363424721.py",
  "response": "No"
 },
 {
  "f1": "s = input()\nt = int(input())\nv = set(s)\n\nans = 0\nif len(v) == 1:\nans = (len(s)*t)//2\nprint (ans)\nexit()\n\na = []\no = s[0]\nc = 0\n\nfor i in range(len(s)):\nif o == s[i]:\nc += 1\nelse:\na.append([o,c])\nc = 1\no = s[i]\na.append([o,c])\n\nfor i,j in a:\nif j == 1:\ncontinue\nans += (j//2)*t\n\nif len(v) > 1:\nif a[0][0] == a[-1][0]:\nif a[0][1]%2 == 1 and a[-1][1]%2 == 1:\nans += t-1\n\nprint (ans)",
  "f2": "N = int(input())\nA = [[]]\n\nfor _ in range(N):\na = int(input())\nif len(A[-1]) > 0 and a < A[-1][-1]:\nA.append([])\nA[-1].append(a)\n\ndef isOk():\nfor l, r in zip(A, A[1:]):\nif l[-1] + 1 < r[0]:\nreturn False\nfor grp in A:\nfor l, r in zip(grp, grp[1:]):\nif l + 1 < r:\nreturn False\n\nreturn A[0][0] == 0\n\nif not isOk():\nprint(-1)\nexit()\n\nB = []\nfor a in A:\nB.extend(a)\nB = [-10**18] + B[::-1]\n\nans = 0\nfor r, l in zip(B, B[1:]):\nif l >= r:\nans += l\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02891/s855379005.py",
  "f2_idx": "./Project_CodeNet_Python800/p03347/s081203154.py",
  "response": "No"
 },
 {
  "f1": "n = int(input().split()[0])\nans = 24 - n + 24\nprint(ans)",
  "f2": "n = int(input())\n\nans = 1\n\nfor i in range(1, n+1):\nans *= i\nans %= 1000000007\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03473/s085614607.py",
  "f2_idx": "./Project_CodeNet_Python800/p03796/s368269145.py",
  "response": "No"
 },
 {
  "f1": "from itertools import product\n\nn = int(input())\nA = list(map(int, input().split()))\nq = int(input())\nM = list(map(int, input().split()))\n\ncases = product([0, 1], repeat=n)\n\nseen = set()\n\nfor case in cases:\nsum_ = 0\nfor i in range(n):\nsum_ += case[i] * A[i]\nseen.add(sum_)\n\nfor target in M:\nif target in seen:\nprint('yes')\nelse:\nprint('no')",
  "f2": "S = input()\n\nif S == \"Sunny\":\nprint(\"Cloudy\")\nif S == \"Cloudy\":\nprint(\"Rainy\")\nif S == \"Rainy\":\nprint(\"Sunny\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02271/s636891756.py",
  "f2_idx": "./Project_CodeNet_Python800/p02909/s671492615.py",
  "response": "No"
 },
 {
  "f1": "t1,t2 = map(int,input().split())\na1,a2 = map(int,input().split())\nb1,b2 = map(int,input().split())\nv1 = [a1,b1]\nd = a1*t1 + a2*t2 - b1*t1 - b2*t2\nif d == 0:\nprint(\"infinity\")\nexit()\nif d > 0:\nf = 0\ns = 1\nelse:\nf = 1\ns = 0\nd = -d\nl = t1*(v1[s]-v1[f])\nif l < 0:\nprint(0)\nexit()\ntm = int(l//d)\nif int(l%d) == 0:\nprint(2*tm)\nelse:\nprint(1+2*tm)",
  "f2": "from fractions import gcd\n\ndef mi():\nreturn map(int, input().split())\n\ndef ii():\nreturn int(input())\n\ndef main():\nN = ii()\nA = list(mi())\nans = A[0]\nfor i in range(N-1):\nans = gcd(ans, A[i+1])\nprint(ans)\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02846/s980171083.py",
  "f2_idx": "./Project_CodeNet_Python800/p03127/s814805330.py",
  "response": "No"
 },
 {
  "f1": "A,B,C,D=map(int,input().split())\nd=min(B,D)-max(A,C)\nprint(d if d>=0 else 0)",
  "f2": "A, B, C, D = map(int, input().split())\n\n\"\"\"\ncount = 0\n\nfor i in range(0,101):\nif A <= i and i < B and C <= i and i < D:\ncount += 1\n\nprint(count)\n\"\"\"\n\nlower = max(A, C)\nupper = min(B, D)\n\nans = max(0, upper - lower)\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03632/s960126939.py",
  "f2_idx": "./Project_CodeNet_Python800/p03632/s744078792.py",
  "response": "Yes"
 },
 {
  "f1": "N = int(input())\nS = input()\n\nret = \"No\"\nfor i in range(N//2):\ns = S[:i+1]\n\nif s + s == S:\nret = \"Yes\"\nbreak\n\nprint(ret)",
  "f2": "N,M,X = map(int,input().split())\nA =  list(map(int,input().split()))\n#print(A)\nleft = []\nright = []\nfor i in A:\nif i > X:\nright.append(i)\nelse:\nleft.append(i)\n\n#print(right,left)\nprint(min(len(right),len(left)))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02860/s976454283.py",
  "f2_idx": "./Project_CodeNet_Python800/p03378/s354583335.py",
  "response": "No"
 },
 {
  "f1": "\nN = int(input())\n\nres = True\npre_t, pre_x, pre_y = 0, 0, 0\nfor _ in range(N):\nt, x, y = map(int, input().split())\ntmp = (t - pre_t) - abs(x - pre_x) - abs(y - pre_y)\nif tmp < 0 or tmp % 2 == 1:\nres = False\nbreak\npre_t = t\npre_x = x\npre_y = y\n\nprint('Yes' if res else 'No')",
  "f2": "n = int(input())\na = []\nfor i in range(n):\na.append(int(input()))\na.append(0)\nans = 0\nfor i in range(n):\nans += a[i] // 2\na[i] %= 2\nif a[i] == 1 and a[i + 1] >= 1:\nans += 1\na[i + 1] -= 1\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03457/s479328232.py",
  "f2_idx": "./Project_CodeNet_Python800/p04020/s212519819.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\nnPowTen = pow(10,n,pow(10,9) + 7)\nnPowNine = pow(9,n,pow(10,9) + 7)\nnPowEight = pow(8,n,pow(10,9) + 7)\n\nprint((nPowTen - nPowNine - nPowNine +nPowEight) % (pow(10,9) + 7))",
  "f2": "A, B, C = map(int, input().split())\n\nif any(i % 2 == 0 for i in [A, B, C]):\nprint(0)\nelse:\nprint(min(A*B, B*C, C*A))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02554/s063339135.py",
  "f2_idx": "./Project_CodeNet_Python800/p04005/s321902749.py",
  "response": "No"
 },
 {
  "f1": "import sys\nN = int(input())\narray = []\nfor I in range(N): array.append(int(input()))\nfor J in array:\nif not ( 100 <= J <= 10000 ): sys.exit()\nif not ( 2 <= N <= 10 ): sys.exit()\n\nprint(max(array)//2 + sum(array) - max(array))",
  "f2": "from itertools import combinations\n\nN,M = map(int,input().split())\n\na=[\"A\" for i in range(0,N)]\nb=[\"B\" for i in range(0,M)]\n\ntmp1=(len(list(combinations(a,2))))\ntmp2=(len(list(combinations(b,2))))\n\nprint(tmp1+tmp2)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03207/s556098997.py",
  "f2_idx": "./Project_CodeNet_Python800/p02729/s495224471.py",
  "response": "No"
 },
 {
  "f1": "n, m = map(int, input().split(' '))\n\ndef nCr(n, r):\nif n < r:\nreturn 0\nans = 1\nfor i in range (r):\nans *= (n-r+i+1)\nans = ans // (i+1)\n\nreturn ans\n\nprint(nCr(n, 2) + nCr(m, 2))",
  "f2": "\ndef main():\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nm = 0\nfor i in range(n):\nm += b[a[i]-1]\nif i != 0 and a[i] - a[i-1] == 1:\nm += c[a[i-1]-1]\n\nprint(m)\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02729/s032011749.py",
  "f2_idx": "./Project_CodeNet_Python800/p02916/s368255960.py",
  "response": "No"
 },
 {
  "f1": "A,B = map(int, input().split())\na = (A+B)%24\nprint(a)",
  "f2": "import sys,bisect\nsys.setrecursionlimit(15000)\ns = sys.stdin.readline().rstrip()\nst = []\nars = []\nar = 0\nfor i,c in enumerate(s):\nif c == \"\\\\\":\nst.append(i)\nelif c == \"/\":\nif st:\nj = st.pop()\nar += i-j\nwhile ars and j < ars[-1][1]:\nar0,_ = ars.pop()\nar += ar0\nars.append([ar,j])\nar = 0\nprint(sum([ar for ar,_ in ars]))\nif len(ars)==0:\nprint(0)\nelse:\nprint(len(ars),\" \".join(map(str,[ar for ar,_ in ars])))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03773/s855666399.py",
  "f2_idx": "./Project_CodeNet_Python800/p02266/s321050973.py",
  "response": "No"
 },
 {
  "f1": "n = input()\na = 100000\nfor i in range(1,int(n)+1):\na = int(a*1.05)\nif(a%1000 > 0):\na = 1000*int(a/1000) + 1000\n\nprint(a)",
  "f2": "\nN = input()\n\na = []\nfor i in range(int(N)):\ns = input().split()\nss = [int(s[0]), int(s[1]), int(s[2])]\nss.sort()\n\nif ss[2]**2 == ss[0]**2 + ss[1]**2:\nprint(\"YES\")\nelse:\nprint(\"NO\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p00007/s951388262.py",
  "f2_idx": "./Project_CodeNet_Python800/p00003/s021720200.py",
  "response": "No"
 },
 {
  "f1": "N, A, B = map(int,input().split())\n\nmax_s = B * (N-2)\nmin_s = A * (N-2)\nans = max_s - min_s + 1\nif ans >= 0:\nprint(max_s - min_s + 1)\nelse:\nprint(0)",
  "f2": "import copy\n\ndef f(n):\nif n==0:\nreturn 1\nelif n==1:\nreturn 2\nelse:\nreturn f(n-1)+f(n-2)\n\np=10**9+7\nH,W,K=map(int,input().split())\n\nif W==1:\nans=1\nelse:\nd={}\nfor i in range(8):\nd[i]=f(i)\nd[-1]=d[-2]=d[-3]=1\n\nb=[0 for i in range(W+2)]\na=[0 for i in range(W+2)]\n\nb[1]=d[W-2];b[2]=d[W-3]\n\nfor i in range(H-1):\nfor k in range(1,W+1):\na[k]=b[k-1]*d[k-3]*d[W-k-1]\na[k]+=b[k]*d[k-2]*d[W-k-1]\na[k]+=b[k+1]*d[k-2]*d[W-k-2]\na[k]%=p\nb=copy.copy(a)\n\nans=b[K]\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03705/s392307462.py",
  "f2_idx": "./Project_CodeNet_Python800/p03222/s389175736.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\ns = input()\n\nwn = s.count('.')\nbn = n - wn\nans = min(wn,bn)\n\nlw = 0\nlb = 0\nfor i in range(n):\nif s[i]=='.':\nlw += 1\nelse:\nlb += 1\nans = min(ans, lb + (wn - lw))\n\nprint(ans)",
  "f2": "#!/usr/bin/env python3\n# Generated by https://github.com/kyuridenamida/atcoder-tools\nfrom typing import *\nimport itertools\nimport math\nimport sys\n\nINF = float('inf')\n\n\ndef solve(a: int):\nreturn a+a*a+a**3\n\n\ndef main():\n\nsys.setrecursionlimit(10 ** 6)\n\ndef iterate_tokens():\nfor line in sys.stdin:\nfor word in line.split():\nyield word\ntokens = iterate_tokens()\na = int(next(tokens))  # type: int\nprint(solve(a))\n\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03069/s161415384.py",
  "f2_idx": "./Project_CodeNet_Python800/p02621/s308046750.py",
  "response": "No"
 },
 {
  "f1": "import sys\nimport string\n\ndef main():\nchars = {x:0 for x in string.ascii_lowercase}\n\nfor line in sys.stdin:\nfor ch in line.lower():\nif ch in chars:\nchars[ch] += 1\n\nfor ch in string.ascii_lowercase:\nprint(ch+\" : \"+str(chars[ch]))\n\nif __name__ == '__main__':\nmain()",
  "f2": "n = int(input())\nA = list(map(int, input().split()))\n\nS = sum(A)\nd = 10**14\nfor i, a in enumerate(A):\nif abs(a*n-S) < d:\nd = abs(a*n-S)\nind = i\n\nprint(ind)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02417/s902511087.py",
  "f2_idx": "./Project_CodeNet_Python800/p03214/s589282768.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\na = list(map(int,input().split()))\nm = min(a)\nM = max(a)\nans = M-m\nprint(ans)",
  "f2": "import sys\nread=sys.stdin.readline\nclass SEGTree:\ndef __init__(self,n):\nself.Unit=0\ni=1\nwhile(i<n):\ni*=2\nself.SEG=[self.Unit]*(2*i-1)\nself.d=i\ndef update(self,i,x):\ni+=self.d-1\nself.SEG[i]=1<<x\nwhile i>0:\ni=(i-1)//2\nself.SEG[i]=self.SEG[i*2+1]|self.SEG[i*2+2]\ndef find(self,a,b,k,l,r):\nif r<=a or b<=l:\nreturn self.Unit\nif a<=l and r<=b:\nreturn self.SEG[k]\nelse:\nc1=self.find(a,b,2*k+1,l,(l+r)//2)\nc2=self.find(a,b,2*k+2,(l+r)//2,r)\nreturn c1|c2\ndef get(self,a,b):\nreturn self.find(a,b,0,0,self.d)\ndef bitcnt(x):\nres=0\nwhile x>0:\nif x&1:\nres+=1\nx//=2\nreturn res\n\nn=int(input())\ns=input()\nq=int(input())\nseg=SEGTree(n)\nfor i in range(n):\nseg.update(i,ord(s[i])-97)\nfor i in range(q):\nq,x,y=read().rstrip().split()\nif q=='1':\nseg.update(int(x)-1,ord(y)-97)\nelse:\nx,y=int(x)-1,int(y)\nbit=seg.get(x,y)\nprint(bitcnt(bit))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03694/s081410394.py",
  "f2_idx": "./Project_CodeNet_Python800/p02763/s377285459.py",
  "response": "No"
 },
 {
  "f1": "class Combination:\ndef __init__(self, n_max, MOD=10 ** 9 + 7):\n\"\"\"\n前処理 = O(n_max + log(MOD))\n:param self.fac[n]: n!\n:param self.facinv[n]: 1/n!\n\"\"\"\nself.mod = MOD\nf = 1\nself.fac = fac = [f]\nfor i in range(1, n_max+1):\nf = f * i % MOD\nfac.append(f)\nf = pow(f, MOD - 2, MOD)\nself.facinv = facinv = [f]\nfor i in range(n_max, 0, -1):\nf = f * i % MOD\nfacinv.append(f)\nfacinv.reverse()\n\ndef __call__(self, n, r):  # self.C と同じ\nif not 0 <= r <= n: return 0\nreturn self.fac[n] * self.facinv[r] % self.mod * self.facinv[n-r] % self.mod\n\n\nN, P = map(int, input().split())\nA = []\nfor a in map(int, input().split()):\nA.append(a%2)\ncnt1 = A.count(1)\ncnt0 = N - cnt1\nC = Combination(cnt1)\nif P==1:\nres = sum(C(cnt1,i) for i in range(1,cnt1+1,2))*pow(2,cnt0)\nelse:\nres = sum(C(cnt1,i) for i in range(0,cnt1+1,2))*pow(2,cnt0)\nprint(res)",
  "f2": "ans = 6\nfor _ in range(2):\nans -= int(input())\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03665/s128492109.py",
  "f2_idx": "./Project_CodeNet_Python800/p02829/s562126664.py",
  "response": "No"
 },
 {
  "f1": "ma = lambda :map(int,input().split())\nni = lambda:int(input())\nimport collections\nimport math\nimport fractions\ngcd = fractions.gcd\nn,m = ma()\ns = input()\nt = input()\nl = m*n //gcd(m,n)\nln = []\nfor i in range(n):\nln.append((l//n*i+1,s[i]))\n\nfor i in range(m):\nln.append((l//m*i+1,t[i]))\nln.sort()\nprev=-1\nwp = \"\"\nfor num,w in ln:\nif num==prev:\nif w ==wp:\npass\nelse:\nprint(-1)\nexit()\nprev=num\nwp = w\nprint(l)",
  "f2": "S = input()\n\nACGT = ['A', 'C', 'G', 'T']\n\ncount = 0\nmax_count = 0\nfor s in S:\nif s in ACGT:\ncount += 1\nelse:\nmax_count = max(max_count, count)\ncount = 0\nmax_count = max(max_count, count)\nprint(max_count)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03231/s434611445.py",
  "f2_idx": "./Project_CodeNet_Python800/p03086/s378573890.py",
  "response": "No"
 },
 {
  "f1": "def f(i):\nif i == n:\non = [0] * m\nfor j in range(m):\nfor k in range(1, s[j][0] + 1):\nif t[s[j][k] - 1]:\non[j] += 1\nfor j in range(m):\nif not on[j] % 2 == p[j]:\nreturn\nglobal ans\nans += 1\nreturn\nt[i] = 1\nf(i + 1)\nt[i] = 0\nf(i + 1)\nreturn\n\nn, m = map(int, input().split())\ns = [list(map(int, input().split())) for _ in range(m)]\np = list(map(int, input().split()))\nans = 0\nt = [0] * n\nf(0)\nprint(ans)",
  "f2": "INT = lambda: int(input())\nINTM = lambda: map(int,input().split())\nSTRM = lambda: map(str,input().split())\nSTR = lambda: str(input())\nLIST = lambda: list(map(int,input().split()))\nLISTS = lambda: list(map(str,input().split()))\ndef do():\na=INT()\nprint(a+a**2+a**3)\nif __name__ == '__main__':\ndo()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03031/s001339222.py",
  "f2_idx": "./Project_CodeNet_Python800/p02621/s132598395.py",
  "response": "No"
 },
 {
  "f1": "def main():\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nthreshold = sum(A) / (4 * M)\nif sorted(A, reverse=True)[M-1] >= threshold:\nprint(\"Yes\")\nelse:\nprint(\"No\")\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\n\nimport sys\nsys.setrecursionlimit(max(1000, 10**9))\n\n\ns = int(input())\nx1, y1 = 0, 0\n# k : k*k <= sである最大のk\nk = int(s**0.5) - 2\nwhile k<0 or k*k<s:\nk += 1\nk -= 1\n\nif k*k==s:\nx2, y3 = k, k\nx3, y2 = 0, 0\nelif k*(k+1)>=s:\nx2, y3 = k, k+1\nx3, y2 = 1, (x2*y3 - s)\nelse:\nx2, y3 = k+1, k+1\nx3, y2 = 1, (x2*y3 - s)\nprint(\" \".join(map(lambda x: str(int(x)), [x1, y1, x2, y2, x3, y3])))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02718/s088404709.py",
  "f2_idx": "./Project_CodeNet_Python800/p02963/s781719461.py",
  "response": "No"
 },
 {
  "f1": "x, y = [int(i) for i in input().split()]\nprint((x+y)%24)",
  "f2": "while True:\ns = raw_input()\nif(s == \"0\"):\nbreak\nsum = 0\nfor i in range(len(s)):\nsum += int(s[i])\nprint(sum)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03773/s911778102.py",
  "f2_idx": "./Project_CodeNet_Python800/p02416/s450168302.py",
  "response": "No"
 },
 {
  "f1": "import sys\ninput = sys.stdin.readline\na = [int(x) for x in input().split()]\na.sort()\nprint(a[0] + a[1])",
  "f2": "N,X = map(int,input().split())\nM = sorted([int(input()) for i in range(N)])\nans = N\n\nX -= sum(M)\nans += X//M[0]\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03671/s735668141.py",
  "f2_idx": "./Project_CodeNet_Python800/p03370/s513711750.py",
  "response": "No"
 },
 {
  "f1": "'''\nCreated on 2020/08/17\n\n@author: harurun\n'''\n\ndef main():\nimport sys\npin=sys.stdin.readline\npout=sys.stdout.write\nperr=sys.stderr.write\n\nmod=1000000000000000000\n\nA,B,C,K=map(int,pin().split())\nif abs(A-B)>mod:\nprint(\"Unfair\")\nelif K%2==0:\nprint(A-B)\nelse:\nprint(B-A)\n\nmain()",
  "f2": "a,b = map(int, input().split())\nif(a<b) :\nprint( \"a < b\" )\nif(a>b) :\nprint( \"a > b\" )\nif(a==b) :\nprint( \"a == b\" )",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03345/s220712416.py",
  "f2_idx": "./Project_CodeNet_Python800/p02391/s931884530.py",
  "response": "No"
 },
 {
  "f1": "def multiply(values):\nout = 1\nfor i in values:\nout *= int(i)\nprint(out)\n\nstdin = input().split()\nmultiply(stdin)",
  "f2": "N,M = map(int,input().split())\nimport math\nif N>M/2:\nprint(int(M/2))\nelse:\nprint(N+math.floor((M-2*N)/4))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02657/s533990746.py",
  "f2_idx": "./Project_CodeNet_Python800/p03797/s015033778.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\ns = [input() for i in range(N)]\npre = ''\nshirori = {}\nfor i in range(N):\nS = s[i]\nif i == 0:\npre = S[len(S) - 1]\nshirori[S] = 1\ncontinue\nelse:\nif shirori.get(S) is None:\nnow = S[0]\nif now == pre:\npre = S[len(S) - 1]\nshirori[S] = 1\nelse:\nprint('No')\nexit(0)\nelse:\nprint('No')\nexit(0)\nprint('Yes')",
  "f2": "import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\n_, x = rm()\nli = rl()\ncnt = 0\nd = 0\nfor i in li:\nd += i\nif d <= x:\ncnt += 1\nprint(cnt + 1)\n\n\n\n\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03261/s848459452.py",
  "f2_idx": "./Project_CodeNet_Python800/p03000/s859553081.py",
  "response": "No"
 },
 {
  "f1": "N,X = map(int,input().split())\nA = list(map(int,input().split()))\nwa = []\nans = 0\n\nif A[0] > X:\nans += A[0]-X\nA[0] = X\n\nfor i in range(N-1):\nwa.append(A[i]+A[i+1])\n\nfor j in range(N-2):\nif wa[j] > X:\nans += wa[j]-X\nwa[j+1] -= wa[j]-X\n\nif wa[N-2] > X:\nans += wa[N-2]-X\n\nprint(ans)",
  "f2": "arr = \"1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51\".split(\", \")\nK = int(input())\nprint(arr[K-1])\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03862/s459072154.py",
  "f2_idx": "./Project_CodeNet_Python800/p02741/s135189213.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nA = list(map(int,input().split()))\n\ncount = 1\nup,down = 1,1\n\nfor i in range(1,N):\nif A[i-1] > A[i]:\nup = 0\nif down == 0:\ncount += 1\nup,down = 1,1\nelif A[i-1] < A[i]:\ndown = 0\nif up == 0:\ncount += 1\nup,down = 1,1\n\nprint(count)",
  "f2": "n,a,b=map(int,input().split())\nif a > b or (n==1 and a != b):\n# 該当パターンなし\nprint(0)\nelse:\nprint((b-a)*(n-2)+1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03745/s710760616.py",
  "f2_idx": "./Project_CodeNet_Python800/p03705/s531545032.py",
  "response": "No"
 },
 {
  "f1": "s = raw_input()\np = raw_input()\n\nslen = len(s)\nplen = len(p)\nflag = False\n\nfor i in xrange(len(s)):\nj = 0\nwhile(j < plen and s[(i+j)%slen] == p[j]):\nj += 1\nif (j == plen):\nflag = True\n\nif(flag):\nprint \"Yes\"\nelse:\nprint \"No\"",
  "f2": "import sys\ndef input(): return sys.stdin.readline().strip()\noffset = 10**10\n\ndef main():\nN, W = map(int, input().split())\nw0, v0 = map(int, input().split())\nitem = [0, w0 * offset + v0]\nweight_sum, value_sum = w0, v0\nfor _ in range(1, N):\nw, v = map(int, input().split())\nitem.append(w * offset + v)\nweight_sum += w\nvalue_sum += v\n\nif W < w0:\nprint(0)\nreturn\nif weight_sum <= W:\nprint(value_sum)\nreturn\n\nif w0 <= 3 * (N - 1):\n# dp[i][j] = (1~i番目の荷物を重さj以下で詰めたときの最大価値)\ndp = [[0] * (W + 1) for _ in range(N + 1)]\nfor i in range(1, N + 1):\nw, v = item[i] // offset, item[i] % offset\nfor j in range(w): dp[i][j] = dp[i - 1][j]\nfor j in range(w, W + 1):\ndp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w] + v)\nprint(dp[N][W])\nreturn\n\n# dp[i][j][k] = (1~i番目までのものを見たとき、重さが(j * w0 + k)以下で最大価値がいくらか)\ndp = [[[0] * (3 * (N - 1) + 1) for _ in range(N + 1)] for _ in range(N + 1)]\nfor i in range(1, N + 1):\nw, v = item[i] // offset, item[i] % offset\nfor j in range(i + 1):\nfor k in range(3 * (N - 1) + 1):\nweight = j * w0 + k\nq, r = (weight - w) // w0, (weight - w) % w0\nif weight < w:\ndp[i][j][k] = dp[i - 1][j][k]\nelif (weight - w) % w0 > 3 * (N - 1):\ndp[i][j][k] = max(dp[i - 1][j][k], dp[i - 1][q][3 * (N - 1)] + v)\nelse:\ndp[i][j][k] = max(dp[i - 1][j][k], dp[i - 1][q][r] + v)\nq, r = W // w0, min(W % w0, 3 * (N - 1))\nprint(dp[N][q][r])\n\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02418/s046459908.py",
  "f2_idx": "./Project_CodeNet_Python800/p03732/s546295688.py",
  "response": "No"
 },
 {
  "f1": "from itertools import accumulate\n\nn = int(input())\narr = list(map(int, input().split()))\n\narr.sort()\n\n# 1つ前までの累積和の2倍がその時点の要素の大きさに達しているかどうか\ncumsum = list(accumulate(arr))\n\nresult = []\nfor x, y in zip(arr[1:], cumsum[:-1]):\nif x <= y * 2:\nresult.append(True)\nelse:\nresult.append(False)\n\nif all(result):\nans = n\nelse:\nans = result[::-1].index(False) + 1\n\nprint(ans)",
  "f2": "a, b, c, d = map(int,input().split())\n\nl=[1,9,7,4]\nif a in l and b in l and c in l and d in l and len(set([a,b,c,d]))==4:\nprint('YES')\nelse:\nprint('NO')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03786/s098342458.py",
  "f2_idx": "./Project_CodeNet_Python800/p03149/s743745184.py",
  "response": "No"
 },
 {
  "f1": "\nN = int(input())\n\nVn = list(map(int, input().split()))\nCn = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\ndifference = Vn[i] - Cn[i]\nif difference > 0:\nans += difference\n\nprint(ans)",
  "f2": "n,m=map(int,input().split())\nablist=[]\nfor i in range(n):\nab=list(map(int,input().split()))\nablist.append(ab)\nablistsort=sorted(ablist)\nans=0\nko=0\nfor i in range(n):\nans+=ablistsort[i][0]*ablistsort[i][1]\nko+=ablistsort[i][1]\nif ko>m:\nans-=(ablistsort[i][0]*ablistsort[i][1])\nko-=ablistsort[i][1]\nwhile ko<m:\nans+=ablistsort[i][0]\nko+=1\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03060/s341596326.py",
  "f2_idx": "./Project_CodeNet_Python800/p03103/s593615531.py",
  "response": "No"
 },
 {
  "f1": "x, a, b = list(map(int, input().split()))\ndef MealDelivery(x, a, b):\nif abs(x -a) < abs(x -b):\nreturn 'A'\nelif abs(x -a) > abs(x -b):\nreturn 'B'\nelse:\nreturn 'Even'\nans = MealDelivery(x, a, b)\nprint(ans)",
  "f2": "n = int(input())\n# したから計算\nif n == 0:\nprint(0)\nexit()\nans = \"\"\ndigit = 1\nwhile n != 0:\nnum = 0\nif n % pow(2, digit):\nnum = 1\nans = str(num) + ans\nn -= num * pow(-2, digit - 1)\ndigit += 1\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03623/s480908028.py",
  "f2_idx": "./Project_CodeNet_Python800/p03286/s140342272.py",
  "response": "No"
 },
 {
  "f1": "from math import ceil\n\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\ndef f(x):\ncnt = 0\nfor a in A:\ncnt += ceil(a / x) - 1\nreturn True if cnt <= K else False\n\nOK, NG = 10**9, 0\nwhile OK - NG > 1:\nmid = (OK + NG) // 2\nif f(mid):\nOK = mid\nelse:\nNG = mid\n\nprint(OK)",
  "f2": "N = int(input())\nA = list(map(int, input().split()))\n\nS = [abs(A[0])]\nfor i in range(N-1):\nS.append(S[-1] + abs(A[i+1] - A[i]))\nS.append(S[-1] + abs(A[N-1]))\n\nfor i in range(N):\nif i == 0:\nans = S[N] - S[1] + abs(A[1])\nprint(ans)\nelif i == N-1:\nans = S[N-2] + abs(A[N-2])\nprint(ans)\nelse:\nans = S[i-1] + (S[N] - S[i+1]) + abs(A[i+1] - A[i-1])\nprint(ans)\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02598/s154911914.py",
  "f2_idx": "./Project_CodeNet_Python800/p03401/s140702994.py",
  "response": "No"
 },
 {
  "f1": "N,X = list(map(int,input().split()))\n\nn_patties = {0:1}\nl_burgur = {0:1}\nfor i in range(N):\nn_patties[i+1] = n_patties[i]*2+1\nl_burgur[i+1] = l_burgur[i]*2+3\n\ndef cnt_patty(level,x):\nif x == l_burgur[level]:\nreturn n_patties[level]\nelif l_burgur[level-1] + 2 < x:\nreturn n_patties[level-1] + 1 + cnt_patty(level-1,x-l_burgur[level-1]-2)\nelif l_burgur[level-1] + 2 == x:\nreturn n_patties[level-1] + 1\nelif 1 < x:\nreturn cnt_patty(level-1,x-1)\nelse:\nreturn 0\n\nprint(cnt_patty(N,X))",
  "f2": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\n\n\ndef input(): return sys.stdin.readline().strip()\n\n\ndef INT(): return int(input())\n\n\ndef MAP(): return map(int, input().split())\n\n\ndef LIST(): return list(map(int, input().split()))\n\n\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef main():\nH, W, K = MAP()\ncake = [list(input()) for _ in range(H)]\ncut = [[1 for _ in range(W)] for _ in range(H)]\nlis_0 = []\nlis_1 = []\nnum = 1\nfor i in range(H):\nif cake[i].count(\"#\") > 0:\nlis_1.append(i)\nelse:\nlis_0.append(i)\ncontinue\n\nct = 0\nfor j in range(W):\nif cake[i][j] == \"#\":\nct += 1\nif ct < 2:\ncut[i][j] = num\nelse:\nnum += 1\nct = 1\ncut[i][j] = num\nelse:\ncut[i][j] = num\n\nnum +=1\n\n# print(lis_0)\n# print(lis_1)\n\nfor x in lis_0:\nind = bisect(lis_1, x)\n# print(ind)\nif ind == len(lis_1):\nind -= 1\ncut[x] = cut[lis_1[ind]]\n# print(\"x\", cut[x])\n# print(\"ind\", cut[lis_1[ind]])\n\nfor x in cut:\nprint(*x)\n\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03209/s568738859.py",
  "f2_idx": "./Project_CodeNet_Python800/p02855/s210382912.py",
  "response": "No"
 },
 {
  "f1": "x = input().strip()\nif x[-1] == 's':\nx += \"es\"\nelse:\nx += 's'\n\nprint(x)",
  "f2": "import sys\nsys.setrecursionlimit(1000000000)\nINF=10**9\nn,a,b,c=map(int,input().split())\nl=[int(input()) for i in range(n)]\ndef dfs(i,x,y,z):\nif i==n:\nif min(x,y,z)>0:\nreturn abs(x-a)+abs(y-b)+abs(z-c)-30\nelse:\nreturn INF\nans=dfs(i+1,x,y,z)\nant=dfs(i+1,x+l[i],y,z)+10\nanu=dfs(i+1,x,y+l[i],z)+10\nanv=dfs(i+1,x,y,z+l[i])+10\nreturn min(ans,ant,anu,anv)\nprint(dfs(0,0,0,0))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02546/s033096307.py",
  "f2_idx": "./Project_CodeNet_Python800/p03111/s996584276.py",
  "response": "No"
 },
 {
  "f1": "'''\n研究室PCでの解答\n'''\nimport math\n#import numpy as np\nimport queue\nimport bisect\nfrom collections import deque,defaultdict\nimport heapq as hpq\nfrom sys import stdin,setrecursionlimit\n#from scipy.sparse.csgraph import dijkstra\n#from scipy.sparse import csr_matrix\nipt = stdin.readline\nsetrecursionlimit(10**7)\nmod = 10**9+7\n\ndef main():\nn = int(ipt())\na = [int(i) for i in ipt().split()]\np2 = [0]*(n+1)\nfor i in range(n,0,-1):\nsm = 0\nfor j in range(i,n+1,i):\nsm += p2[j]\np2[i] = (a[i-1]-sm)%2\n\nsm = sum(p2)\nprint(sm)\nans = []\nfor i,pi in enumerate(p2):\nif pi:\nans.append(str(i))\n\nprint(\" \".join(ans))\nreturn None\n\nif __name__ == '__main__':\nmain()",
  "f2": "a,b = map(int, input().split())\n\nbefore = a - 1\nnow = 0\nif a <= b:\nnow = 1\n\nprint(before + now)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02972/s139008505.py",
  "f2_idx": "./Project_CodeNet_Python800/p03359/s272013804.py",
  "response": "No"
 },
 {
  "f1": "import sys\nsys.setrecursionlimit(5 * 10**5)\ninput = sys.stdin.readline\n\nN, M = list(map(int, input().split()))\n\nA = 1 - 1 / 2**M\nB = 100 * N + 1800 * M\n\nans = A * B / (2**M - 1) / (1 - A)**2\n\nprint(round(ans))",
  "f2": "# https://atcoder.jp/contests/abc043/tasks/abc043_b\n\nimport sys\n# sys.setrecursionlimit(100000)\n\n\ndef input():\nreturn sys.stdin.readline().strip()\n\n\ndef input_int():\nreturn int(input())\n\n\ndef input_int_list():\nreturn [int(i) for i in input().split()]\n\n\ndef main():\nS = input()\nans = []\nfor s in S:\nif s != \"B\":\nans.append(s)\nelse:\nif ans:\nans.pop()\nprint(\"\".join(ans))\n\nreturn\n\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03549/s211930468.py",
  "f2_idx": "./Project_CodeNet_Python800/p04030/s063083497.py",
  "response": "No"
 },
 {
  "f1": "N=int(input())\nS=str(input())\nprint(S.count('ABC'))",
  "f2": "a,b=int(input()),int(input());print(['LESS','GREATER'][a>b] if a!=b else 'EQUAL')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02812/s973401726.py",
  "f2_idx": "./Project_CodeNet_Python800/p03738/s751350021.py",
  "response": "No"
 },
 {
  "f1": "# python 3.4.3\nimport sys\ninput = sys.stdin.readline\nimport numpy as np\n\n# -------------------------------------------------------------\n# function\n# -------------------------------------------------------------\n\n\n# -------------------------------------------------------------\n# main\n# -------------------------------------------------------------\nN = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nprint(min(N,K)*X + max(N-K,0)*Y)",
  "f2": "r = input()\nn = list(r)\nx = int(n[0])*100 + int(n[0])*10 + int(n[0])\n\nif x < int(r):\nprint( ((int(n[0])+1)*100 + (int(n[0])+1)*10 + int(n[0])+1))\nelse:\nprint(x)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p04011/s842188778.py",
  "f2_idx": "./Project_CodeNet_Python800/p03243/s304996984.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\nn, m = map(int, sys.stdin.readline().split())\n\ndef main():\nif n >= m // 2: res = m // 2\nelse: res = n + (m - 2 * n) // 4\nprint(res)\n\nif __name__ ==  '__main__':\nmain()",
  "f2": "# 上皿天秤は、左の皿に乗っているおもりの重さの合計を L とし、\n# 右の皿に乗っているおもりの重さの合計を R としたとき、\n# L > R なら左に傾き、 L = R なら釣り合い、\n# L < R なら右に傾きます。\n#\n# 高橋君は、上皿天秤の左の皿に重さ A のおもりと重さ B のおもりを、\n# 右の皿に重さ C のおもりと重さ D のおもりを置きました。\n#\n# 上皿天秤が左に傾くなら Left を、\n# 釣り合うなら Balanced を、\n# 右に傾くなら Right を出力してください。\n\n# 制約\n# 1 ≦ A, B, C, D ≦ 10\n# 入力はすべて整数である\n\n# 標準入力から A, B, C ,D の値を取得する\na, b, c, d = map(int, input().split())\n\n# 上皿天秤の状態を判定し、結果を出力する\nresult = \"ret\"\n\nif (a + b) > (c + d):\nresult = \"Left\"\nelif (a + b) < (c + d):\nresult = \"Right\"\nelse:\nresult = \"Balanced\"\n\nprint(result)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03797/s184598953.py",
  "f2_idx": "./Project_CodeNet_Python800/p03477/s315531948.py",
  "response": "No"
 },
 {
  "f1": "while 1:\ns = input()\nif s[0] == \"-\":\nbreak\nm = int(input())\nfor i in range(m):\nh = int(input())\ns = s[h:] + s[:h]\nprint(s)",
  "f2": "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees, log2, gcd\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\n#mod = 10 ** 9 + 7\nmod = 998244353\nfrom decimal import *\n#import numpy as np\n#decimal.getcontext().prec = 10\n\nN = INT()\nD = LIST()\n\nd = Counter(D)\n\nif D[0] != 0 or 2 <= d[0]:\nprint(0)\nexit()\n\nans = 1\n\nfor i in range(1, max(d.keys())+1):\nans = ans * pow(d[i-1], d[i], mod) % mod\ntmp = d[i]\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02420/s275712934.py",
  "f2_idx": "./Project_CodeNet_Python800/p02866/s920983279.py",
  "response": "No"
 },
 {
  "f1": "import copy\na, b, c = map(int,input().split())\n\nx = copy.deepcopy(a)\nvisited = [False] * (b+1)\nflg = True\nwhile True:\nx %= b\nif x == c:\nbreak\nelif visited[x]:\nflg = False\nbreak\nelse:\nvisited[x] = True\nx += a\nprint('YES') if flg else print('NO')",
  "f2": "i = int(input())\n\nif i >=30:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03730/s624948679.py",
  "f2_idx": "./Project_CodeNet_Python800/p02594/s662503125.py",
  "response": "No"
 },
 {
  "f1": "def main():\nN = int(input())\nA = [int(i) for i in input().split()]\nma = A[0]\nans = 0\nfor a in A:\nma = max(ma, a)\nans += ma - a\nprint(ans)\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "n = int(input())\na,b = map(str,input().split())\nc =[]\nfor i in range(n):\nc.append(a[i])\nc.append(b[i])\nc1 = \"\".join(c)\nprint(c1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02578/s218935046.py",
  "f2_idx": "./Project_CodeNet_Python800/p02830/s565805499.py",
  "response": "No"
 },
 {
  "f1": "n, m = map(int, input().split())\na = sorted(list(map(int, input().split())), reverse=True)\n総投票数 = sum(a)\nx = 総投票数 / (4 * m)\nfor i in range(m):\nif a[i] < x:\nflag = 0\nbreak\nelse:\nflag = 1\nprint([\"No\", \"Yes\"][flag])",
  "f2": "from collections import defaultdict\nn,t=map(int,input().split())\na=list(map(int,input().split()))\nmin_v=a[0]\ndiv=0\nfor i in range(1,n):\nmin_v=min(min_v,a[i])\ndiv=max(div,a[i]-min_v)\nd=defaultdict(int)\nfor i in range(n):\nd[a[i]]=i\nans=0\nfor i in range(n):\nif d[a[i]]<d[a[i]+div]:\nans+=1\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02718/s184374134.py",
  "f2_idx": "./Project_CodeNet_Python800/p03946/s427624943.py",
  "response": "No"
 },
 {
  "f1": "R,G,B=map(int,input().split())\nK=int(input())\n\nM=0\n\nwhile R>=G or G>=B:\nif R>=G:\nG*=2\nM+=1\n\nif G>=B:\nB*=2\nM+=1\n\nif M<=K:\nprint('Yes')\nelse:\nprint('No')",
  "f2": "S = input().replace(\"hi\",\"\")\n\nif S == \"\":\nprint(\"Yes\")\nelse:\nprint(\"No\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02601/s205374087.py",
  "f2_idx": "./Project_CodeNet_Python800/p02747/s306398614.py",
  "response": "No"
 },
 {
  "f1": "import sys\nsys.setrecursionlimit(10**6)\n\nN,M = map(int,input().split())\np = [list(map(int,input().split())) for _ in range(M)]\ndp = [-1]*N\nip = [[] for _ in range(N)]\nfor i in range(M):\nip[p[i][1]-1].append(p[i][0]-1)\n\n#閉路がないため同じ頂点は通らない\n#i番目の頂点に到達するまでの最長手数をメモ化再帰で求める\n\ndef maxpath(i):\nif dp[i] != -1:\nreturn dp[i]\na = 0\nfor el in ip[i]:\na = max(a,maxpath(el)+1)\ndp[i] = a\nreturn a\n\nfor i in range(N):\nmaxpath(i)\n\nprint(max(dp))",
  "f2": "# map(int, input().split())\nN = int(input())\nx = N / 3\nprint(x ** 3)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03166/s687677652.py",
  "f2_idx": "./Project_CodeNet_Python800/p02731/s966961295.py",
  "response": "No"
 },
 {
  "f1": "S = input()\nT = input()\nN = len(S)\nx = 0\nif S == T:\nprint('Yes')\nexit()\nwhile S != T:\nif x > N:\nprint('No')\nexit()\nelse:\nS = S[N - 1] + S\nS = S[0:N]\nx += 1\nif S == T:\nprint('Yes')\nexit()",
  "f2": "N,C,K = map(int,input().split())\nT = [int(input()) for i in range(N)]\nT.sort()\nbusCount = 0\npCount = 0\ntime = 0\nfirstTime = 0\nfor i in range(N):\ntime = T[i]\nif firstTime == 0:\nfirstTime = T[i]\nbusCount += 1\npCount += 1\nif time > firstTime + K:\nfirstTime = T[i]\nbusCount += 1\npCount = 1\ncontinue\nif pCount == C:\nfirstTime = 0\npCount = 0\nprint(busCount)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03293/s634004622.py",
  "f2_idx": "./Project_CodeNet_Python800/p03785/s079282567.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\ninput = sys.stdin.readline\n\na, b= map(int, input().split())\n\nab = a+b\nif ab >= 10:\nprint(\"error\")\nelse:\nprint(ab)",
  "f2": "# -*- coding: utf-8 -*-\nfrom collections import deque\n\nN,M = list(map(int, input().rstrip().split()))\nAB_list = [list(map(int, input().rstrip().split())) for i in range(M)]\n#-----\n\nedge_dic = {}\n\n# \"idx 0\" doesn't use\n# 1: visited, 0: not visited\nvisited = [1] + [0]*N\n\n# We use on and after \"idx 2\"\nguidepost = [0]*2 + [None]*(N-1)\n\n\nfor a,b in AB_list:\nedge_dic.setdefault(a, [])\nedge_dic[a].append(b)\n\nedge_dic.setdefault(b, [])\nedge_dic[b].append(a)\n\n\nqueue = deque([1])\nvisited[1] = 1\n\nwhile queue:\ncurrent = queue.popleft()\n\nfor next_room in edge_dic[current]:\nif visited[next_room] == 0:\nguidepost[next_room] = current\nvisited[next_room] = 1\nqueue.append(next_room)\n\n\nif (visited.count(0) == 0) and (guidepost.count(None) == 0):\nprint(\"Yes\")\n\nfor num in guidepost[2:]:\nprint(num)\n\nelse:\nprint(\"No\")",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03697/s966908178.py",
  "f2_idx": "./Project_CodeNet_Python800/p02678/s596759034.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\na = list(map(int,input().split()))\ndic = {}\nfor i in range(n):\ndic.setdefault(a[i],0)\ndic[a[i]] += 1\nans = 1\nfor key,value in dic.items():\n#偶数\nif n%2==0:\nif n > key and key%2==1 and value==2:\nans *= 2\nelse:\nans = 0\nbreak\n#奇数\nelse:\nif n > key and key%2==0:\nif key==0 and value==1:\nans *= 1\nelif value==2:\nans *= 2\nelse:\nans = 0\nbreak\nelse:\nans = 0\nbreak\nprint(ans%(10**9+7))",
  "f2": "import sys\ndef rs(): return sys.stdin.readline().rstrip()\ndef ri(): return int(rs())\ndef rs_(): return [_ for _ in rs().split()]\ndef ri_(): return [int(_) for _ in rs().split()]\n\nN = ri()\nS = rs()\nx = 0\nans = 0\nfor s in S:\nif s == 'I':\nx += 1\nelse:\nx -= 1\nans = max(ans, x)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03846/s713343696.py",
  "f2_idx": "./Project_CodeNet_Python800/p03827/s675635502.py",
  "response": "No"
 },
 {
  "f1": "s = 'abcdefghijklmnopqrstuvwxyz'\nc = input()\nfor i in range(26):\nif c == s[i]:\nprint(s[i+1])\nexit()\nexit()",
  "f2": "import sys\ndef input(): return sys.stdin.readline().strip()\n\n\ndef main():\nA, B = map(int, input().split())\nif B % A == 0:\nprint(A + B)\nelse:\nprint(B - A)\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02801/s040262555.py",
  "f2_idx": "./Project_CodeNet_Python800/p03125/s901548950.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\nlength = 1000018\nsosu = 500009\nht = [-1] * length\n\n\ndef convert(moji):\nl_moji = len(moji)\nnum = 0\nfor j in range(l_moji):\nketa = 10 ** (l_moji - j - 1)\nif moji[j] == 'A':\nnum += keta * 1\nif moji[j] == 'C':\nnum += keta * 2\nif moji[j] == 'G':\nnum += keta * 3\nif moji[j] == 'T':\nnum += keta * 4\nreturn num\n\n\ndef hash_in(nk, num, m):\nif m == 0:\nreturn False\nhash_num = nk + (num % m)\nif hash_num > length:\nhash_num -= length\nif ht[hash_num] == -1:\nht[hash_num] = num\nelif ht[hash_num] != num:\nhash_in(hash_num, num, m-1)\nreturn\n\n\ndef find(nk, num, m):\nif m == 0:\nreturn 'no'\nhash_num = nk + (num % m)\nif hash_num > length:\nhash_num -= length\nif ht[hash_num] == -1:\nreturn 'no'\nelif ht[hash_num] != num:\nreturn find(hash_num, num, m-1)\nelif ht[hash_num] == num:\nreturn 'yes'\n\n\ndef main():\noutput = list()\nfor i in range(n):\ncommand = list(input().split())\nnum = convert(command[1])\nif command[0] == 'insert':\nif hash_in(0, num, sosu) is not None:\nprint('an error is occured')\nbreak\nif command[0] == 'find':\noutput.append(find(0, num, sosu))\n\nfor j in output:\nprint(j)\n\n\nif __name__ == '__main__':\nmain()\n",
  "f2": "D=int(input())\nc=list(map(int,input().split()))\ns=[list(map(int,input().split())) for i in [0]*D]\nk=[]\nfor i in range(D):\nl=-1\np=0\nfor j in range(26):\nq=s[i][j]-sum([c[a]for a in k])\np=max([p,q])\nif p==q:\nl=j\nif l==-1:\nl=k[-1]\nk+=[l]\nprint(l+1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02269/s905514508.py",
  "f2_idx": "./Project_CodeNet_Python800/p02618/s949411600.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\nx=list(map(int,input().split()))\nans=1000000000000\nfor p in range(100):\na=0\nfor i in range(n):\na+=(x[i]-p)**2\nif a < ans:\nans = a\n\nprint(ans)",
  "f2": "# 1\n# 2\n# 3\nn=input()\na=n[-1]\nif a in list('24579'):\nans='hon'\nelif a in list('0168'):\nans='pon'\nelse:\nans='bon'\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02767/s751350875.py",
  "f2_idx": "./Project_CodeNet_Python800/p02675/s964360730.py",
  "response": "No"
 },
 {
  "f1": "def actual(a, b, s):\nif s[a] != '-':\nreturn 'No'\n\nfor i in range(0, a):\nif not '0' <= s[i] <= '9':\nreturn 'No'\n\nfor j in range(a + 1, len(s)):\nif not '0' <= s[j] <= '9':\nreturn 'No'\n\nreturn 'Yes'\n\n\na, b = map(int, input().split())\ns = input()\n\nprint(actual(a, b, s))",
  "f2": "A, B, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nx = [0]*m\ny = [0]*m\nc = [0]*m\nfor i in range(m):\nx[i], y[i], c[i] = map(int ,input().split())\n\nans = min(a) + min(b)\nfor i in range(m):\nans = min(ans, a[x[i]-1] + b[y[i]-1] - c[i])\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03474/s749268484.py",
  "f2_idx": "./Project_CodeNet_Python800/p02748/s588396845.py",
  "response": "No"
 },
 {
  "f1": "n, m = input().split()\nn, m = int(n), int(m)\nC = [int(c) for c in input().split()]\n\n# Coin Changing Problem\nT = [0] + [float('inf')] * n\n\nfor c in C:\nfor j in range(c, n+1):\nT[j] = min(T[j], T[j - c] + 1)\n\nprint(T[-1])",
  "f2": "def make_divisors(n):\nlower_divisors , upper_divisors = [], []\ni = 1\nwhile i*i <= n:\nif n % i == 0:\nlower_divisors.append(i)\nif i != n // i:\nupper_divisors.append(n//i)\ni += 1\nreturn lower_divisors + upper_divisors[::-1]\n\nN = int(input())\ndivsN = make_divisors(N)\ndivsN2 = make_divisors(N-1)\ndivsN.pop(0)\n\nans = len(divsN2)-1\n\nfor div in divsN:\nn = N\nwhile True:\nif n%div != 0 or n==1:\nbreak\nn //= div\nif n%div == 1:\nans += 1\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02314/s639840254.py",
  "f2_idx": "./Project_CodeNet_Python800/p02722/s716471192.py",
  "response": "No"
 },
 {
  "f1": "def resolve():\na, b, c = map(int, input().split())\nprint(\"Yes\" if sorted([a, b, c])[1] == c else \"No\")\n\n\nif __name__ == \"__main__\":\nresolve()",
  "f2": "def main():\nn = int(input())\nl = list(map(int, input().split()))\nmax_l = max(l)\nif max_l < (sum(l) - max_l):\nprint('Yes')\nelse:\nprint('No')\n\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03067/s385405130.py",
  "f2_idx": "./Project_CodeNet_Python800/p03136/s617510927.py",
  "response": "No"
 },
 {
  "f1": "def main():\nN = int(input())\nA = list(map(int, input().split()))\ncnt = 0\nflag = 0\n\nwhile flag == 0:\nfor i in range(N):\nif A[i] % 2 != 1:\nA[i] = A[i] // 2\nelse:\nflag = 1\nprint(cnt)\nreturn\ncnt += 1\n\nmain()",
  "f2": "from math import log2\n\nn,k = map(int, input().split())\nal = list(map(int, input().split()))\n\nlogk = int(log2(k))+1\ndb = [ [0]*n for _ in range(logk) ]\nfor ni in range(n):\ndb[0][ni] = al[ni]-1\nfor ki in range(logk-1):\nfor ni in range(n):\ndb[ki+1][ni] = db[ki][db[ki][ni]]\n\nnow = 0\nfor i in range(logk):\nif k&(1<<i) > 0:\nnow = db[i][now]\nprint(now+1)\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03494/s291331380.py",
  "f2_idx": "./Project_CodeNet_Python800/p02684/s452401648.py",
  "response": "No"
 },
 {
  "f1": "def main():\nn,m=map(int,input().split())\nif n%2==1:\nx=[f\"{i+1} {n-i}\" for i in range(m)]\nprint(\" \".join(x))\nelse:\nx=[f\"{i+1} {n-i}\" if i<m/2 else f\"{i+1} {n-i-1}\" for i in range(m)]\nprint(\" \".join(x))\n\nif __name__ == \"__main__\":\nmain()",
  "f2": "n = int(input())\nw = list(map(int, input().split()))\nl = []\nfor t in range(n-1):\nl.append(abs(sum(w[0:t+1])-sum(w[t+1:n])))\nprint(min(l))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02697/s567379100.py",
  "f2_idx": "./Project_CodeNet_Python800/p03012/s496873307.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\ninput = sys.stdin.readline\n\ndef main():\ns = input().rstrip('\\n')\nif s[-1] == 's':\ns += 'es'\nelse:\ns += 's'\n\nprint(s)\n\nif __name__ == '__main__':\nmain()",
  "f2": "def pmod(a,b,m):\nret=1\nwhile b>0:\nif b&1:\nret=(ret*a)%m\na=(a*a)%m\nb=b>>1\nreturn ret\n\ndef fmod(n,m):\nret=1\nfor i in range(n,0,-1):\nret=(ret*i)%m\nreturn ret\n\ndef cmod(n,r,m):\nret=1\nfor i in range(r):\nret=(ret*(n-i))%m\nreturn (ret*pmod(fmod(r,m),m-2,m))%m\n\nmod=10**9+7\nn,m,k=map(int,input().split())\nans=0\nc=cmod(n*m-2,k-2,mod)\nfor i in range(1,n):\nans+=i*c*(m**2)*(n-i)\nans=ans%mod\nfor i in range(1,m):\nans+=i*c*(n**2)*(m-i)\nans=ans%mod\nprint(ans%mod)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02546/s140853990.py",
  "f2_idx": "./Project_CodeNet_Python800/p03039/s435193599.py",
  "response": "No"
 },
 {
  "f1": "S = input()\nN = len(S)\n\ncnt1 = 0\ncnt2 = 0\nfor s in S[::2]:\nif s == '0':\ncnt1 += 1\nelif s == '1':\ncnt2 += 1\nfor s in S[1::2]:\nif s == '1':\ncnt1 += 1\nelif s == '0':\ncnt2 += 1\n\nprint(N-max(cnt1, cnt2))",
  "f2": "from collections import deque\nn, m = map(int, input().split())\nab = [list(map(int, input().split())) for _ in range(m)]\n\ncount = 0\nfor i in range(m):\nedges = [[]*n for _ in range(n)]\nfor j in range(m):\nif j == i:\ncontinue\nedges[ab[j][0]-1].append(ab[j][1]-1)\nedges[ab[j][1]-1].append(ab[j][0]-1)\n#print(edges)\nd = deque([0])\nvisited = [0]*n\nvisited[0] = 1\nwhile d:\np = d.pop()\nfor child in edges[p]:\nif visited[child] == 1:\ncontinue\nvisited[child] = 1\nd.append(child)\nif sum(visited) != n:\ncount += 1\nprint(count)\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03073/s473085091.py",
  "f2_idx": "./Project_CodeNet_Python800/p03575/s046036639.py",
  "response": "No"
 },
 {
  "f1": "x,y = map(str,input().split())\ndic = {}\ndic.setdefault('A',1)\ndic.setdefault('B',2)\ndic.setdefault('C',3)\ndic.setdefault('D',4)\ndic.setdefault('E',5)\ndic.setdefault('F',6)\nif dic[x]<dic[y]:\nprint('<')\nelif dic[x]>dic[y]:\nprint('>')\nelse:\nprint('=')",
  "f2": "import sys\nread = sys.stdin.buffer.read\n# readline = sys.stdin.buffer.readline\n# readlines = sys.stdin.buffer.readlines\n# import collections\n# import math\n# import string\n# import bisect\n# import re\n# import itertools\n# import statistics\n\ndef main():\na, t, b = (int(x) for x in read().split())\nif a * t >= b: print(b)\nelse: print(a * t)\n\n\nif __name__ == \"__main__\":\n# execute only if run as a script\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03547/s429895299.py",
  "f2_idx": "./Project_CodeNet_Python800/p03501/s786214950.py",
  "response": "No"
 },
 {
  "f1": "mod=10**9+7\nh,w,a,b=map(int,input().split())\nF,I=[0]*(h+w+2),[0]*(h+w+2)\ndef inv(n):\nreturn pow(n,mod-2,mod)\nF[0],F[1],I[0],I[1]=1,1,1,1\nfor i in range(2,h+w+2):\nF[i]=i*F[i-1]%mod\nI[i]=inv(F[i])\ndef c(a,b):\nreturn F[a+b]*I[a]*I[b]%mod\nans=0\nfor i in range(b+1,w+1):\nans+=(c(h-a-1,i-1)*c(a-1,w-i))%mod\nprint(ans%mod)",
  "f2": "import sys\ninput = sys.stdin.readline\n\ndef main():\nH, W, A, B = map(int, input().split())\n\nMOD = int(1e9) + 7\n\nkai = [1] * (max(H-A+W, A+W-B) + 1)\nfor i in range(1, len(kai)):\nkai[i] = kai[i-1] * i\nkai[i] %= MOD\n\nup = [0] * (W-B)\ndown = [0] * (W-B)\n\nt1 = H-A-1\nfor i in range(W-B):\nt2 = B + 1 + i-1\n# print(t1, t2)\nup[i] = kai[t1 + t2] * pow(kai[t1], MOD-2, MOD) * pow(kai[t2], MOD-2, MOD)\nup[i] %= MOD\nt1 = A-1\nfor i in range(W-B):\nt2 = W-B-i-1\n# print(t1, t2)\ndown[i] = kai[t1 + t2] * pow(kai[t1], MOD-2, MOD) * pow(kai[t2], MOD-2, MOD)\ndown[i] %= MOD\n\nans = 0\nfor i in range(W-B):\nans += (up[i] * down[i])\nans %= MOD\nprint(ans)\n\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p04046/s162359607.py",
  "f2_idx": "./Project_CodeNet_Python800/p04046/s978275619.py",
  "response": "Yes"
 },
 {
  "f1": "h,m=map(int,input().split())\na=[input()for i in range(h)]\nfor i in a:\nprint(i)\nprint(i)",
  "f2": "N, K = map(int, input().split())\nH = [int(x) for x in input().split()]\nHa = sorted(H, reverse=True)\ndel Ha[:K]\nprint(sum(Ha))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03853/s827875314.py",
  "f2_idx": "./Project_CodeNet_Python800/p02785/s598769243.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\ninp = []\nfor i in range(n-1):\ninp.append(list(map(int, input().split())))\n\nfor i in range(n-1):\ntotal = 0\nfor j in range(i, n-1):\nif total < inp[j][1]:\ntotal = inp[j][1]\nwhile total % inp[j][2] != 0:\ntotal += 1\ntotal += inp[j][0]\nprint(total)\nprint(0)\n\n\n\n",
  "f2": "s = input()\nt = ''\nfor i in range(0, 3):\nt += s[i]\nprint(t)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03475/s034765023.py",
  "f2_idx": "./Project_CodeNet_Python800/p02645/s492695573.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\nsys.setrecursionlimit(10 ** 7)\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\nH, W = map(int, input().split())\ncost = [list(map(int, input().split())) for _ in range(10)]\ngrid = [list(map(int, input().split())) for _ in range(H)]\n\nfor k in range(10):\nfor i in range(10):\nfor j in range(10):\ncost[i][j] = min(cost[i][j], cost[i][k] + cost[k][j])\n\nres = 0\nfor h in range(H):\nfor w in range(W):\nif grid[h][w] == -1 or grid[h][w] == 1:\ncontinue\nnum = grid[h][w]\nres += cost[num][1]\nprint(res)\n\n\nif __name__ == '__main__':\nresolve()",
  "f2": "n, a, b = map(int, input().split())\nr = n // (a + b)\nq = n % (a + b)\nprint(a * r + min(q, a))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03546/s419462541.py",
  "f2_idx": "./Project_CodeNet_Python800/p02754/s811898482.py",
  "response": "No"
 },
 {
  "f1": "s = input()\nt = input()\n\ns_len = len(s)\nt_len = len(t)\n\nout = t_len\n\nfor i in range(0, s_len - t_len + 1):\ndiff = 0\nfor j in range(0, t_len):\nif t[j] != s[i + j]:\ndiff += 1\nout = min(out, diff)\n\nprint(out)",
  "f2": "N = int(input())\ndmin = N+N\nfor i in range(1,int(N**0.5)+1):\nif N%i==0:\ndmin = min(dmin,i+N//i-2)\nprint(dmin)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02571/s074793784.py",
  "f2_idx": "./Project_CodeNet_Python800/p02881/s432220942.py",
  "response": "No"
 },
 {
  "f1": "def resolve():\n'''\ncode here\n'''\nfrom decimal import Decimal\na, b, c = [int(item) for item in input().split()]\n\nx = c - a - b\ny = 2 * Decimal(a*b).sqrt()\n\nif y < x:\nprint('Yes')\nelse:\nprint('No')\n\n\n\n\nif __name__ == \"__main__\":\nresolve()",
  "f2": "n = int(input())\na = [0]+list(map(int, input().split()))\nans = 0\nfor i in range(1, n+1):\nif i%2 == 1 and a[i]%2==1:\nans += 1\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02743/s675982228.py",
  "f2_idx": "./Project_CodeNet_Python800/p02607/s116347071.py",
  "response": "No"
 },
 {
  "f1": "def main():\nw, h, n = map(int, input().split())\n\nx_min = 0\nx_max = w\ny_min = 0\ny_max = h\n\nfor _ in range(n):\nx, y, a = map(int, input().split())\nif a == 1:\nx_min = max(x_min, x)\nelif a == 2:\nx_max = min(x_max, x)\nelif a == 3:\ny_min = max(y_min, y)\nelse:\ny_max = min(y_max, y)\n\nprint(\n(x_max - x_min) * (y_max - y_min)\nif x_min < x_max and y_min < y_max else 0\n)\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "h, w = map(int, input().split())\na = [input() for _ in range(h)]\n\ncnt = 0\nfor i in range(h):\nfor j in range(w):\nif a[i][j] == '#':\ncnt += 1\nif cnt == h+w-1:\nprint('Possible')\nelse:\nprint('Impossible')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03944/s142231755.py",
  "f2_idx": "./Project_CodeNet_Python800/p03937/s598045327.py",
  "response": "No"
 },
 {
  "f1": "def calc(b, e):\ncnt = e // b\nreturn (b + e) * cnt // 2\n\nN = int(input())\n\nans = 0\n\nfor i in range(1, N+1):\nans += calc(i, N//i * i)\n\nprint(ans)",
  "f2": "#!/usr/bin/env python3\n\nimport sys\n# import time\n# import math\n# import numpy as np\n# import scipy.sparse.csgraph as cs            # csgraph_from_dense(ndarray, null_value=inf), bellman_ford(G, return_predecessors=True), dijkstra, floyd_warshall\n# import random                                # random, uniform, randint, randrange, shuffle, sample\n# import string                                # ascii_lowercase, ascii_uppercase, ascii_letters, digits, hexdigits\n# import re                                    # re.compile(pattern) => ptn obj; p.search(s), p.match(s), p.finditer(s) => match obj; p.sub(after, s)\n# from bisect import bisect_left, bisect_right # bisect_left(a, x, lo=0, hi=len(a)) returns i such that all(val<x for val in a[lo:i]) and all(val>-=x for val in a[i:hi]).\n# from collections import deque                # deque class. deque(L): dq.append(x), dq.appendleft(x), dq.pop(), dq.popleft(), dq.rotate()\n# from collections import defaultdict          # subclass of dict. defaultdict(facroty)\n# from collections import Counter              # subclass of dict. Counter(iter): c.elements(), c.most_common(n), c.subtract(iter)\n# from datetime import date, datetime          # date.today(), date(year,month,day) => date obj; datetime.now(), datetime(year,month,day,hour,second,microsecond) => datetime obj; subtraction => timedelta obj\n# from datetime.datetime import strptime       # strptime('2019/01/01 10:05:20', '%Y/%m/%d/ %H:%M:%S') returns datetime obj\n# from datetime import timedelta               # td.days, td.seconds, td.microseconds, td.total_seconds(). abs function is also available.\n# from copy import copy, deepcopy              # use deepcopy to copy multi-dimentional matrix without reference\n# from functools import reduce                 # reduce(f, iter[, init])\n# from functools import lru_cache              # @lrucache ...arguments of functions should be able to be keys of dict (e.g. list is not allowed)\n# from heapq import heapify, heappush, heappop # built-in list. heapify(L) changes list in-place to min-heap in O(n), heappush(heapL, x) and heappop(heapL) in O(lgn).\n# from heapq import nlargest, nsmallest        # nlargest(n, iter[, key]) returns k-largest-list in O(n+klgn).\n# from itertools import count, cycle, repeat   # count(start[,step]), cycle(iter), repeat(elm[,n])\n# from itertools import groupby                # [(k, list(g)) for k, g in groupby('000112')] returns [('0',['0','0','0']), ('1',['1','1']), ('2',['2'])]\n# from itertools import starmap                # starmap(pow, [[2,5], [3,2]]) returns [32, 9]\n# from itertools import product, permutations  # product(iter, repeat=n), permutations(iter[,r])\n# from itertools import combinations, combinations_with_replacement\n# from itertools import accumulate             # accumulate(iter[, f])\n# from operator import itemgetter              # itemgetter(1), itemgetter('key')\n# from fractions import gcd                    # for Python 3.4 (previous contest @AtCoder)\n\n\n\ndef main():\nmod = 1000000007                # 10^9+7\ninf = float('inf')              # sys.float_info.max = 1.79...e+308\n# inf = 2 ** 64 - 1             # (for fast JIT compile in PyPy) 1.84...e+19\nsys.setrecursionlimit(10**6)    # 1000 -> 1000000\ndef input(): return sys.stdin.readline().rstrip()\ndef ii():    return int(input())\ndef mi():    return map(int, input().split())\ndef mi_0():  return map(lambda x: int(x)-1, input().split())\ndef lmi():   return list(map(int, input().split()))\ndef lmi_0(): return list(map(lambda x: int(x)-1, input().split()))\ndef li():    return list(input())\n\n\na, b, c, d = mi()\nprint('Yes') if abs(c - a) <= d or (abs(c - b) <= d and abs(b - a) <= d) else print('No')\n\n\nif __name__ == \"__main__\":\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02624/s554211976.py",
  "f2_idx": "./Project_CodeNet_Python800/p03351/s494454129.py",
  "response": "No"
 },
 {
  "f1": "(N,), *XL = [list(map(int, s.split())) for s in open(0)]\nXL.sort(key=lambda x: x[0] + x[1])\ncurr = -float(\"inf\")\nans = 0\nfor x, l in XL:\nif x - l >= curr:\ncurr = x + l\nans += 1\nprint(ans)",
  "f2": "N = int(input())\nA = list(map(int, input().split()))\n\nans = [0] * N\n\nfor i in A:\nans[i-1] += 1\n\nfor j in ans:\nprint(j)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02796/s139574180.py",
  "f2_idx": "./Project_CodeNet_Python800/p02707/s954015002.py",
  "response": "No"
 },
 {
  "f1": "n=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nD=[i-j for i,j in zip(a,b)]\nc=[i for i in D if i>0]\nc.sort()\nd=[i for i in D if i<0]\n\ne=sum(d)\nif sum(a)<sum(b):\nprint(-1)\nelif len(d)==0:\nprint(0)\nelse:\nans=0\nfor i in c[::-1]:\nans+=1\ne+=i\nif e>=0:\nprint(ans+len(d))\nexit()",
  "f2": "S = input()\nans = len(S)\nfor i in range(26):\ns = chr(97+i)\ntmp = -1\nres = 0\nflg = False\nfor j in range(len(S)):\nif S[j] == s:\nflg = True\nres = max(res, j-tmp-1)\ntmp = j\nif not flg:\ncontinue\nans = min(ans, max(res, len(S)-tmp-1))\nprint(ans)\n",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03151/s434338143.py",
  "f2_idx": "./Project_CodeNet_Python800/p03687/s284158780.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\na = list(map(int,input().split()))\n\ncnt_fu = 0\ncnt_0 = 0\nans = 0\nb = []\nfor i in range(n):\nans += abs(a[i])\nb.append(abs(a[i]))\nif a[i]<0:\ncnt_fu += 1\nif a[i]==0:\ncnt_0 += 1\n#print(cnt_fu,cnt_0,ans,b)\nif cnt_fu%2==0:\nprint(ans)\nelse:\nprint(ans-min(b)*2)",
  "f2": "n,m  = map(int,input().split())\n\ncoins = list(map(int,input().split()))\n\ndp = [20**10]*(n+1)\ndp[0] = 0\nfor coin in coins:\nfor price in range(coin,n+1):\ndp[price]  = min(dp[price],dp[price-coin]+1)\n\nprint(dp[n])",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03062/s553709671.py",
  "f2_idx": "./Project_CodeNet_Python800/p02314/s272081728.py",
  "response": "No"
 },
 {
  "f1": "import sys\nimport itertools\nsys.setrecursionlimit(1000000000)\nfrom heapq import heapify,heappop,heappush,heappushpop\nimport math\nimport collections\n\nn = int(input())\na = list(map(int,input().split()))\nc = collections.Counter(a)\nli2 = [0,0]\nli4 = [0]\nfor key,value in c.items():\nif value>=4:\nli4.append(key)\nelif value>=2:\nli2.append(key)\nli2.sort()\nli4.sort()\nans1 = li2[-1]*li2[-2]\nans2 = li4[-1]**2\nans3 = li4[-1]*li2[-1]\nans = max(ans1,ans2)\nans = max(ans,ans3)\nprint(ans)\n",
  "f2": "import sys, os, math, bisect, itertools, collections, heapq, queue\n# from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall\nfrom decimal import Decimal\nfrom collections import defaultdict, deque\n\nsys.setrecursionlimit(10000000)\n\nii = lambda: int(sys.stdin.buffer.readline().rstrip())\nil = lambda: list(map(int, sys.stdin.buffer.readline().split()))\nfl = lambda: list(map(float, sys.stdin.buffer.readline().split()))\niln = lambda n: [int(sys.stdin.buffer.readline().rstrip()) for _ in range(n)]\n\niss = lambda: sys.stdin.buffer.readline().decode().rstrip()\nsl = lambda: list(map(str, sys.stdin.buffer.readline().decode().split()))\nisn = lambda n: [sys.stdin.buffer.readline().decode().rstrip() for _ in range(n)]\n\nlcm = lambda x, y: (x * y) // math.gcd(x, y)\n\nMOD = 10 ** 9 + 7\nMAX = float('inf')\n\n\ndef main():\nif os.getenv(\"LOCAL\"):\nsys.stdin = open(\"input.txt\", \"r\")\n\nH, W = il()\nHW = [sl() for _ in range(H)]\nh = [False] * H\nw = [False] * W\n\nfor n in range(H):\nhw = HW[n]\nif '#' in hw[0]:\nh[n] = True\nfor m in range(W):\nif hw[0][m] == '#':\nw[m] = True\n\nfor n in range(H):\nif h[n]:\nstr = ''\nfor m in range(W):\nif w[m]:\nstr += HW[n][0][m]\nprint(str)\n\n\nif __name__ == '__main__':\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03625/s717461609.py",
  "f2_idx": "./Project_CodeNet_Python800/p03273/s528917878.py",
  "response": "No"
 },
 {
  "f1": "a,b = map(int,input().split())\nT = 0\n\nfor n in range(1,b-a+1):\nT+=n\n\nprint(T-b)",
  "f2": "def main():\nr = int(input())\nprint(r * 2 * 3.14159265)\nmain()",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03328/s255810574.py",
  "f2_idx": "./Project_CodeNet_Python800/p02705/s579354402.py",
  "response": "No"
 },
 {
  "f1": "#!/usr/bin/env python3\nimport sys\n\nMOD = 998244353  # type: int\n\n\ndef solve(N: int, D: \"List[int]\"):\nfrom collections import Counter\nc = Counter(D)\n\nx = sorted(list(set(D)))\nif any([0 >= i for i in D[1:]]):\nprint(0)\nexit()\n\nif D[0] != 0 or len(x) <= 1 or max(x) - min(x) + 1 != len(x):\nprint(0)\nexit()\n\nans = 1\nfor i in range(2, N):\nif c[i - 1] >= 2:\nans *= pow(c[i - 1], c[i]) % MOD\n\nprint(ans % MOD)\n\nreturn\n\n\n# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools\n# (tips: You use the default template now. You can remove this line by\n# using your custom template)\ndef main():\ndef iterate_tokens():\nfor line in sys.stdin:\nfor word in line.split():\nyield word\ntokens = iterate_tokens()\nN = int(next(tokens))  # type: int\nD = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\nsolve(N, D)\n\n\nif __name__ == '__main__':\nmain()",
  "f2": "n = input()\nrenga = list(map(int, input().split(\" \")))\n\nni = 1\nremains = 0\n\nfor r in renga:\nif ni == r:\nni += 1\nremains += 1\nif ni == 1:\nprint(-1)\nelse:\nprint(len(renga) - remains)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02866/s700197511.py",
  "f2_idx": "./Project_CodeNet_Python800/p02832/s225542275.py",
  "response": "No"
 },
 {
  "f1": "N, M = map(int, input().split())\nA = list(map(int, input().split()))\n\ncnt = 0\nsumA = sum(A)\nfor a in A:\nif a >=  sumA / 4 / M:\ncnt += 1\nif cnt >= M:\nprint('Yes')\nelse:\nprint('No')",
  "f2": "from collections import defaultdict\nH, W, N = map(int, input().split())\n\n\nD = defaultdict(int)\nfor i in range(N):\nh, w = map(int, input().split())\nh, w = h - 1, w - 1\nfor dh in range(-1, 2):\nfor dw in range(-1, 2):\nif not ((1 <= h + dh < H - 1) and (1 <= w + dw < W - 1)):\ncontinue\nD[(h + dh, w + dw)] += 1\n\nans = [0] * 10\nfor v in D.values():\nans[v] += 1\n\nans[0] = (H - 2) * (W - 2) - sum(ans[1:])\nprint(*ans, sep='\\n')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02718/s073599489.py",
  "f2_idx": "./Project_CodeNet_Python800/p04000/s587113314.py",
  "response": "No"
 },
 {
  "f1": "A, B = input().split()\n\nprint(int(A) * round(float(B) * 100) // 100)",
  "f2": "import sys\ninput = sys.stdin.readline\n\nN, L = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(N-1):\nif a[i] + a[i+1] >= L:\nprint('Possible')\nfor j in range(1, i+1):\nprint(j)\nfor j in range(i+1, N)[::-1]:\nprint(j)\nexit()\nprint('Impossible')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02659/s236932042.py",
  "f2_idx": "./Project_CodeNet_Python800/p04035/s220248297.py",
  "response": "No"
 },
 {
  "f1": "\ndef main():\npass\nN = int(input())\nA = list(map(int, input().split()))\n\nH = [0]*N\nfor i in range(0,N):\nif i >= A[i]:\nH[i-A[i]] += 1\n\nans = 0\nfor k in range(0,N):\nBk = k+A[k]\nif Bk < N:\nans += H[Bk]\n\nprint(ans)\n\nif __name__ == '__main__':\nmain()",
  "f2": "a, b, c = list(map(int, input().split()))\nmy_result = c - a + b\nif my_result >= 0:\nprint(my_result)\nelse:\nprint(0)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02691/s310729003.py",
  "f2_idx": "./Project_CodeNet_Python800/p02951/s831890581.py",
  "response": "No"
 },
 {
  "f1": "N = int(input())\nL = list(map(int, input().split()))\nl = []\nfor i in L:\nl.append(format(i, 'b')[::-1].find('1'))\nprint(min(l))",
  "f2": "x,y,z = map(int,input().split())\n\nlength = x - 2*z\n\nc = 1\nwhile True:\nif (y*c)+(z*(c-1)) > length:\nbreak\n\nc += 1\n\nprint(c-1)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03494/s216049215.py",
  "f2_idx": "./Project_CodeNet_Python800/p03548/s035872005.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\nA = list(map(int, input().split()))\nl = A[0]\nr = sum(A[1:])\nx = abs(l-r)\nfor a in A[1:]:\nl += a\nr -= a\nif x > abs(l-r): x = abs(l-r)\nprint(x)",
  "f2": "n ,l = map(int, input().split())\napple = []\nfor i in range(n):\napple.append(l + i)\n\nif l - 1 + n - 1 < 0:\nprint(sum(apple[:n - 1]))\nelif l < 0 and  0 <= l - 1 + n - 1:\nprint(sum(apple))\nelif 0 <= l:\nprint(sum(apple[1:]))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02854/s479935100.py",
  "f2_idx": "./Project_CodeNet_Python800/p02994/s442324580.py",
  "response": "No"
 },
 {
  "f1": "n, k, c = map(int, input().split())\ns = input()\nL = [-1]*k\nR = [-1]*k\nnow = 0\ncnt = 0\nwhile now < n and cnt < k:\nif s[now] == \"o\":\nL[cnt] = now\ncnt += 1\nnow += c+1\nelse:\nnow += 1\nnow = n-1\ncnt = k-1\nwhile now >= 0 and cnt >= 0:\nif s[now] == \"o\":\nR[cnt] = now\ncnt -= 1\nnow -= c+1\nelse:\nnow -= 1\nA = []\nfor i in range(k):\nif L[i] == R[i]:\nA.append(L[i]+1)\nprint(*A, sep=\"\\n\")",
  "f2": "import sys\nN = int(input())\nS = [str(s) for s in sys.stdin.read().split()]\nprint(len(set(S)))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02721/s698968178.py",
  "f2_idx": "./Project_CodeNet_Python800/p02701/s332681786.py",
  "response": "No"
 },
 {
  "f1": "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees#, log2\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10**9 + 7\n#from decimal import *\n\nN = INT()\nS = list(input())\n\ntmp = S.count(\".\")\nnum = [0]*N\nnum_sharp = 0\nnum_peri = 0\nfor i in range(len(S)):\nif S[i] == \"#\":\nnum_sharp += 1\nelse:\nnum_peri += 1\nnum[i] = num_sharp + tmp-num_peri\n\nprint(min(tmp, min(num)))",
  "f2": "print(\"ABC\", input(), sep='')",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03069/s814201300.py",
  "f2_idx": "./Project_CodeNet_Python800/p03643/s854792404.py",
  "response": "No"
 },
 {
  "f1": "s=list(input())\na=[\"0\",\"1\"]\ncnt=0\nfor i in range(len(s)):\nif s[i]!=a[i%2]:\ncnt+=1\nprint(min(cnt,len(s)-cnt))",
  "f2": "s = str(input())\nif len(s) == 2:\nprint(s)\nelse:\ns = list(s)\ns.reverse()\nprint(\"\".join(s))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03073/s891813378.py",
  "f2_idx": "./Project_CodeNet_Python800/p03227/s141118121.py",
  "response": "No"
 },
 {
  "f1": "n,k = map(int,input().split())\nl = list(map(int,input().split()))\n\nprint(-(-(n-1)//(k-1)))",
  "f2": "l=list(map(int,input().split()))\nprint(max(l)+max(max(l)-1,min(l)))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03317/s011381223.py",
  "f2_idx": "./Project_CodeNet_Python800/p03071/s895381948.py",
  "response": "No"
 },
 {
  "f1": "import itertools\n\nn = int(input())\na = list(map(int,input().split()))\nq = int(input())\nm = list(map(int,input().split()))\n\ndata = []\nfor i in itertools.product(range(2),repeat=n):\ndata.append(sum([i[j]*a[j] for j in range(n)]))\n\nfor i in m:\nif i in data:\nprint(\"yes\")\nelse:\nprint(\"no\")",
  "f2": "a= int(input())\nb= int(input())\nh= int(input())\neq= (a+b)*h/2\nprint(int(eq))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02271/s276481495.py",
  "f2_idx": "./Project_CodeNet_Python800/p03997/s580416070.py",
  "response": "No"
 },
 {
  "f1": "n, m = map(int, input().split())\ns = input()\nt = input()\ndef gcd(a, b):\nwhile b!=0:\na, b = b, a%b\nreturn a\ng = gcd(n, m)\nl = n*m//g\nfor i, j in zip(s[0:n:n//g], t[0:m:m//g]):\nif i!=j:\nprint(-1)\nbreak\nelse:\nprint(l)",
  "f2": "a,b,k = map(int, input().split())\nwhile True:\nif k == 0:\nbreak\n\nif (a % 2) == 1:\na = a - 1\nb = b + (a / 2)\na = a / 2\nk = k - 1\n\nif k == 0:\nbreak\n\nif (b % 2) == 1:\nb = b - 1\na = a + (b / 2)\nb = b / 2\nk = k - 1\n\na = int(a)\nb = int(b)\n\nprint(\"{0} {1}\".format(str(a), str(b)))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03231/s005060885.py",
  "f2_idx": "./Project_CodeNet_Python800/p03228/s586799132.py",
  "response": "No"
 },
 {
  "f1": "N, M = map(int, input().split())\nedges_used = {}\n\nfrom heapq import heappush, heappop\ndef dijkstra(n, graph, s):\ndist = [float('inf')] * n\nhq = [(0, s)]\ndist[s] = 0\nwhile hq:\nc, v = heappop(hq)\nif dist[v] < c:\ncontinue\nfor t, cost in graph[v]:\nif dist[v] + cost < dist[t]:\ndist[t] = dist[v] + cost\nheappush(hq, (dist[t], t))\nreturn dist\n\ngraph = [[] for _ in range(N)]\nfor i in range(M):\na, b, c = map(int, input().split())\na -= 1\nb -= 1\ngraph[a].append((b, c))\ngraph[b].append((a, c))\nedges_used[(a, b, c)] = False\ndist = [dijkstra(N, graph, i) for i in range(N)]\n\nfor edge in edges_used.keys():\na, b, c = edge\nfor i in range(N):\nif dist[i][a] == dist[i][b] + c or dist[i][b] == dist[i][a] + c:\nedges_used[edge] = True\n\nans = 0\nfor used in edges_used.values():\nif not used:\nans += 1\nprint(ans)",
  "f2": "import sys\nH, W = map(int, input().split())\nG = [sys.stdin.readline() for _ in range(H)]\n\ncounts = [[[-1] * 4 for _ in range(W + 1)] for _ in range(H + 1)]\nfor h in range(H):\nfor w in range(W):\nif G[h][w] == \".\":\ncounts[h][w][0] = counts[h][w-1][0] + 1\ncounts[h][w][1] = counts[h-1][w][1] + 1\ndih = H - h - 1\ndiw = W - w - 1\nif G[dih][diw] == \".\":\ncounts[dih][diw][2] = counts[dih][diw+1][2] + 1\ncounts[dih][diw][3] = counts[dih+1][diw][3] + 1\nans = 0\nfor h in range(H):\nfor w in range(W):\nif G[h][w] == \".\":\nans = max(ans, sum(counts[h][w]) + 1)\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03837/s406477098.py",
  "f2_idx": "./Project_CodeNet_Python800/p03014/s032612649.py",
  "response": "No"
 },
 {
  "f1": "import sys\n\n\ndef main():\ninput = sys.stdin.buffer.readline\nn, k = map(int, input().split())\ni = 1\nwhile k ** i <= n:\ni += 1\nprint(i)\n\n\nif __name__ == \"__main__\":\nmain()",
  "f2": "r = int(input())\n\nrr = r*r\n\nprint(rr)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02766/s474746526.py",
  "f2_idx": "./Project_CodeNet_Python800/p02859/s499392247.py",
  "response": "No"
 },
 {
  "f1": "import sys\ninput = sys.stdin.readline\nimport math\nimport collections\ndef I(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\n\nn,d=MI()\nans=math.ceil(n/(2*d+1))\nprint(ans)",
  "f2": "while True:\ntry:\n[a, b] = map(int, raw_input().split())\nsum = a + b\ncount = 0\nwhile sum:\ncount += 1\nsum /= 10\nprint count\nexcept (EOFError):\nbreak;",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02970/s183632527.py",
  "f2_idx": "./Project_CodeNet_Python800/p00002/s172779060.py",
  "response": "No"
 },
 {
  "f1": "N, A, B, C = map(int, input().split())\nl = [int(input()) for _ in range(N)]\nINF = 10 ** 9\n\ndef dfs(i, a, b, c):\nif i == N:\nif a > 0 and b > 0 and c > 0:\n# 最初の一本目の合体において +10 の必要がないのに足しているので、それぞれについて -10 してあげる\nreturn abs(a - A) + abs(b - B) + abs(c - C) - 30\nelse:\nreturn INF\n\nres0 = dfs(i + 1, a, b, c)\nres1 = dfs(i + 1, a + l[i], b, c) + 10\nres2 = dfs(i + 1, a, b + l[i], c) + 10\nres3 = dfs(i + 1, a, b, c + l[i]) + 10\n\nreturn min(res0, res1, res2, res3)\n\nres = dfs(0, 0, 0, 0)\nprint(res)",
  "f2": "A=list(input().split())\nprint(list(A[0])[0].upper()+list(A[1])[0].upper()+list(A[2])[0].upper())",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03111/s122944662.py",
  "f2_idx": "./Project_CodeNet_Python800/p03737/s524536320.py",
  "response": "No"
 },
 {
  "f1": "n = int(input())\nalst = list(map(int, input().split()))\nalst.sort()\npos = 0\ntotal = 0\nfor i, a in enumerate(alst):\nif a > total * 2:\npos = i\ntotal += a\nprint(n - pos)",
  "f2": "N, K, S = map(int ,input().split())\n\n\nif N == K:\nA = [S] * N\nelif S == 10**9:\nA = [S]*K + [1]*(N-K)\nelif K == 0:\nA = [S+1] * N\nelif S == 1:\nA = [1]*K + [2]*(N-K)\nelse:\nA = [S+1] * N\nx = S // 2\ny = S - x\nfor i in range(K+1):\nif i%2 == 0:\nA[i] = x\nelse:\nA[i] = y\n\nprint(' '.join(map(str, A)))",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03786/s279706248.py",
  "f2_idx": "./Project_CodeNet_Python800/p02797/s144796513.py",
  "response": "No"
 },
 {
  "f1": "import math\nn,k = map(int,input().split())\na = list(map(int,input().split()))\nlim = int((1e+9)+7)\nright = [0 for _ in range(n)]\nleft = [0 for _ in range(n)]\nfor i in range(n):\nfor j in range(n):\nif a[j] < a[i]:\nif i < j:\nright[i] += 1\nelse:\nleft[i] += 1\nans = 0\ndef c(g):\nre = g*(g-1)//2\nreturn re\n\nfor i in range(n):\nans = (ans - (left[i]*k) + ((right[i]+left[i])*c(k+1)))%lim\nprint(ans)",
  "f2": "import sys\n\nstdin = sys.stdin\ninf = 1 << 60\nmod = 1000000007\n\nsys.setrecursionlimit(10 ** 7)\n\nni      = lambda: int(ns())\nnin     = lambda y: [ni() for _ in range(y)]\nna      = lambda: list(map(int, stdin.readline().split()))\nnan     = lambda y: [na() for _ in range(y)]\nnf      = lambda: float(ns())\nnfn     = lambda y: [nf() for _ in range(y)]\nnfa     = lambda: list(map(float, stdin.readline().split()))\nnfan    = lambda y: [nfa() for _ in range(y)]\nns      = lambda: stdin.readline().rstrip()\nnsn     = lambda y: [ns() for _ in range(y)]\nncl     = lambda y: [list(ns()) for _ in range(y)]\nnas     = lambda: stdin.readline().split()\n\nfrom collections import Counter\n\ns = ns()\nc = Counter(s)\n\nans = inf\nfor i in c.keys():\nns = i + s + i\nj = 1\ncur = 0\nres = 0\nwhile j < len(ns):\nif ns[j] == i:\nres = max(res, j - cur - 1)\ncur = j\nj += 1\nans = min(ans, res)\n\nprint(ans)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p02928/s091796799.py",
  "f2_idx": "./Project_CodeNet_Python800/p03687/s418878254.py",
  "response": "No"
 },
 {
  "f1": "# region header\nimport sys\nimport math\nfrom bisect import bisect_left, bisect_right, insort_left, insort_right\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom fractions import gcd\nfrom functools import lru_cache, reduce\nfrom heapq import heappop, heappush\nfrom itertools import accumulate, groupby, product, permutations, combinations, combinations_with_replacement\nfrom math import ceil, floor, factorial, log, sqrt, sin, cos\nfrom operator import itemgetter\nfrom string import ascii_lowercase, ascii_uppercase, digits\nsys.setrecursionlimit(10**7)\nrs = lambda: sys.stdin.readline().rstrip()\nri = lambda: int(rs())\nrf = lambda: float(rs())\nrs_ = lambda: [_ for _ in rs().split()]\nri_ = lambda: [int(_) for _ in rs().split()]\nrf_ = lambda: [float(_) for _ in rs().split()]\nINF = float('inf')\nMOD = 10 ** 9 + 7\nPI = math.pi\n# endregion\nA, B, C = ri_()\nK = ri()\nprint(A + B + C - max(A, B, C) + max(A, B, C) * (2 ** K))",
  "f2": "from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush\nfrom bisect import bisect_left,bisect_right\nimport sys,math,itertools,fractions,pprint\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\nL = input()\nn = len(L)\n#0:kaku 1:mikaku\ndp = [[0] * (n+1) for _ in range(2)]\ndp[1][0] = 1\nfor i,x in enumerate(L):\nif x == '0':\ndp[0][i+1] = dp[0][i]*3\ndp[1][i+1] = dp[1][i]\nelse:\ndp[0][i+1] = dp[0][i]*3 + dp[1][i]\ndp[1][i+1] = dp[1][i]*2\ndp[0][i+1] %= mod\ndp[1][i+1] %= mod\nprint((dp[0][-1] + dp[1][-1])%mod)",
  "sim": 0,
  "type": "NoClone",
  "f1_idx": "./Project_CodeNet_Python800/p03360/s264631037.py",
  "f2_idx": "./Project_CodeNet_Python800/p03015/s348356218.py",
  "response": "No"
 }
]